**************************************************************************
TABLO ADI = Seller
TARİH = 10 Aralık 2010 Cuma 16:58:57


ID    ----->    TextBoxMax_
Type    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
No    ----->    TextBoxMax_
ShortExplanation    ----->    TextBoxMax_
Link    ----->    TextBoxMax_
ImagePath    ----->    TextBoxMax_
MainPage    ----->    CheckBox_
Ordering    ----->    TextBoxMax_
State    ----->    CheckBox_
Created_Date    ----->    TextBoxMax_
ImageState    ----->    CheckBox_
Lang    ----->    TextBoxMax_



Seller  ------------------>  TextBox_In <----------------

protected bool retrieveData( Seller item, Label mesaj){
if(item != null){
try{
TextBox_Type.Text = item.Type.ToString();
TextBox_Name.Text = item.Name.ToString();
TextBox_Address.Text = string.IsNullOrEmpty(item.Address) ? String.Empty : item.Address;
TextBox_No.Text = string.IsNullOrEmpty(item.No) ? String.Empty : item.No;
TextBox_ShortExplanation.Text = string.IsNullOrEmpty(item.ShortExplanation) ? String.Empty : item.ShortExplanation;
TextBox_Link.Text = string.IsNullOrEmpty(item.Link) ? String.Empty : item.Link;
TextBox_ImagePath.Text = string.IsNullOrEmpty(item.ImagePath) ? String.Empty : item.ImagePath;
CheckBox_MainPage.Checked = item.MainPage;
TextBox_Ordering.Text = item.Ordering.ToString();
CheckBox_State.Checked = item.State;
CheckBox_ImageState.Checked = item.ImageState.HasValue ?  item.ImageState.Value : false;
TextBox_Lang.Text = string.IsNullOrEmpty(item.Lang) ? String.Empty : item.Lang;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Seller  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Seller">
<tr  id="tr_Type" runat="server">
<td class="name">
<asp:Label ID="Label_Type" CssClass="Label_Deger" runat="server" Text="Tipi"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Type" CssClass="textBox_NORMAL" ValidationGroup="Seller" MaxLength="20" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="Seller" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Address" runat="server">
<td class="name">
<asp:Label ID="Label_Address" CssClass="Label_Deger" runat="server" Text="Adres"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Address" CssClass="textBox_NORMAL" ValidationGroup="Seller" MaxLength="255" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_No" runat="server">
<td class="name">
<asp:Label ID="Label_No" CssClass="Label_Deger" runat="server" Text="No"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_No" CssClass="textBox_NORMAL" ValidationGroup="Seller" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_ShortExplanation" runat="server">
<td class="name">
<asp:Label ID="Label_ShortExplanation" CssClass="Label_Deger" runat="server" Text="Kısa Açıklama"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_ShortExplanation" CssClass="textBox_NORMAL" ValidationGroup="Seller" MaxLength="500" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Link" runat="server">
<td class="name">
<asp:Label ID="Label_Link" CssClass="Label_Deger" runat="server" Text="Link"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Link" CssClass="textBox_NORMAL" ValidationGroup="Seller" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_ImagePath" runat="server">
<td class="name">
<asp:Label ID="Label_ImagePath" CssClass="Label_Deger" runat="server" Text="Resim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_ImagePath" CssClass="textBox_NORMAL" ValidationGroup="Seller" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_MainPage" runat="server">
<td class="name">
<asp:Label ID="Label_MainPage" CssClass="Label_Deger" runat="server" Text="Ana Sayfa"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_MainPage" ValidationGroup="Seller" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Seller" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Seller" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_ImageState" runat="server">
<td class="name">
<asp:Label ID="Label_ImageState" CssClass="Label_Deger" runat="server" Text="Resim Durumu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_ImageState" ValidationGroup="Seller" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Lang" runat="server">
<td class="name">
<asp:Label ID="Label_Lang" CssClass="Label_Deger" runat="server" Text="Dil"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Lang" CssClass="textBox_NORMAL" ValidationGroup="Seller" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Seller  ------------------>  TextBox_Insert <----------------

protected bool initialize(Seller item,Label mesaj){
if(item != null){
try{
//item.ID=-1;
item.Type=TextBox_Type.Text.Trim();
item.Name=TextBox_Name.Text.Trim();
item.Address=TextBox_Address.Text.Trim();
item.No=TextBox_No.Text.Trim();
item.ShortExplanation=TextBox_ShortExplanation.Text.Trim();
item.Link=TextBox_Link.Text.Trim();
item.ImagePath=TextBox_ImagePath.Text.Trim();
item.MainPage=CheckBox_MainPage.Checked;
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
item.State=CheckBox_State.Checked;
//item.Created_Date=DateTime.Now;
item.ImageState=CheckBox_ImageState.Checked;
item.Lang=TextBox_Lang.Text.Trim();
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Seller  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Seller"  CssClass="Ei_Labels" runat="server">
<table class="Seller">
<tr>
<td class="name">
<asp:Label ID="Label_ID_1" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Type_1" CssClass="db_Name"  Text="Tipi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Type" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Address_1" CssClass="db_Name"  Text="Adres" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Address" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_No_1" CssClass="db_Name"  Text="No" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_No" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_ShortExplanation_1" CssClass="db_Name"  Text="Kısa Açıklama" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ShortExplanation" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Link_1" CssClass="db_Name"  Text="Link" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Link" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_ImagePath_1" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImagePath" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_MainPage_1" CssClass="db_Name"  Text="Ana Sayfa" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_MainPage" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Created_Date_1" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Created_Date" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_ImageState_1" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImageState" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Lang_1" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Lang" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Seller  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Seller item){
Label_ID.Text = item.ID.ToString();
Label_Type.Text = item.Type.ToString();
Label_Name.Text = item.Name.ToString();
Label_Address.Text = item.Address.HasValue ?  item.Address.Value.ToString() : String.Empty;
Label_No.Text = item.No.HasValue ?  item.No.Value.ToString() : String.Empty;
Label_ShortExplanation.Text = item.ShortExplanation.HasValue ?  item.ShortExplanation.Value.ToString() : String.Empty;
Label_Link.Text = item.Link.HasValue ?  item.Link.Value.ToString() : String.Empty;
Label_ImagePath.Text = item.ImagePath.HasValue ?  item.ImagePath.Value.ToString() : String.Empty;
Label_MainPage.Text = item.MainPage.ToString();
Label_Ordering.Text = item.Ordering.ToString();
Label_State.Text = item.State.ToString();
Label_Created_Date.Text = item.Created_Date.HasValue ?  item.Created_Date.Value.ToString() : String.Empty;
Label_ImageState.Text = item.ImageState.HasValue ?  item.ImageState.Value.ToString() : String.Empty;
Label_Lang.Text = item.Lang.HasValue ?  item.Lang.Value.ToString() : String.Empty;
}



Seller  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_ID" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
<asp:Label ID="Label_Type" CssClass="db_Name"  Text="Tipi" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_Address" CssClass="db_Name"  Text="Adres" runat="server"></asp:Label>
<asp:Label ID="Label_No" CssClass="db_Name"  Text="No" runat="server"></asp:Label>
<asp:Label ID="Label_ShortExplanation" CssClass="db_Name"  Text="Kısa Açıklama" runat="server"></asp:Label>
<asp:Label ID="Label_Link" CssClass="db_Name"  Text="Link" runat="server"></asp:Label>
<asp:Label ID="Label_ImagePath" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
<asp:Label ID="Label_MainPage" CssClass="db_Name"  Text="Ana Sayfa" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Created_Date" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
<asp:Label ID="Label_ImageState" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
<asp:Label ID="Label_Lang" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>



Seller  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Seller" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Seller">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Type")  %>
<%#  Eval("Name")  %>
<%#  Eval("Address")  %>
<%#  Eval("No")  %>
<%#  Eval("ShortExplanation")  %>
<%#  Eval("Link")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Seller" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Type,Name,Address,No,ShortExplanation,Link,ImagePath,MainPage,Ordering,State,ImageState,Lang FROM Seller WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Seller  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Seller" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Seller">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Type</th>
<th>Name</th>
<th>Address</th>
<th>No</th>
<th>ShortExplanation</th>
<th>Link</th>
<th>ImagePath</th>
<th>MainPage</th>
<th>Ordering</th>
<th>State</th>
<th>ImageState</th>
<th>Lang</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Type" cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_Address" cssClass="evalCss" runat="server" Text='<%#  Eval("Address")  %>' /></td>
<td><asp:Label ID="Label_No" cssClass="evalCss" runat="server" Text='<%#  Eval("No")  %>' /></td>
<td><asp:Label ID="Label_ShortExplanation" cssClass="evalCss" runat="server" Text='<%#  Eval("ShortExplanation")  %>' /></td>
<td><asp:Label ID="Label_Link" cssClass="evalCss" runat="server" Text='<%#  Eval("Link")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_MainPage" cssClass="evalCss" runat="server" Text='<%#  Eval("MainPage")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Type" cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_Address" cssClass="evalCss" runat="server" Text='<%#  Eval("Address")  %>' /></td>
<td><asp:Label ID="Label_No" cssClass="evalCss" runat="server" Text='<%#  Eval("No")  %>' /></td>
<td><asp:Label ID="Label_ShortExplanation" cssClass="evalCss" runat="server" Text='<%#  Eval("ShortExplanation")  %>' /></td>
<td><asp:Label ID="Label_Link" cssClass="evalCss" runat="server" Text='<%#  Eval("Link")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_MainPage" cssClass="evalCss" runat="server" Text='<%#  Eval("MainPage")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Seller" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Type,Name,Address,No,ShortExplanation,Link,ImagePath,MainPage,Ordering,State,ImageState,Lang FROM Seller WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Seller  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Seller" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Seller">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Type cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_Address cssClass="evalCss" runat="server" Text='<%#  Eval("Address")  %>' />
</td>
<td>
<asp:Label ID="Label_No cssClass="evalCss" runat="server" Text='<%#  Eval("No")  %>' />
</td>
<td>
<asp:Label ID="Label_ShortExplanation cssClass="evalCss" runat="server" Text='<%#  Eval("ShortExplanation")  %>' />
</td>
<td>
<asp:Label ID="Label_Link cssClass="evalCss" runat="server" Text='<%#  Eval("Link")  %>' />
</td>
<td>
<asp:Label ID="Label_ImagePath cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' />
</td>
<td>
<asp:Label ID="Label_MainPage cssClass="evalCss" runat="server" Text='<%#  Eval("MainPage")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_ImageState cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' />
</td>
<td>
<asp:Label ID="Label_Lang cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Seller" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Type,Name,Address,No,ShortExplanation,Link,ImagePath,MainPage,Ordering,State,ImageState,Lang FROM Seller WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Seller  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Seller" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Seller">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Type")  %>
<%#  Eval("Name")  %>
<%#  Eval("Address")  %>
<%#  Eval("No")  %>
<%#  Eval("ShortExplanation")  %>
<%#  Eval("Link")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Seller" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Type,Name,Address,No,ShortExplanation,Link,ImagePath,MainPage,Ordering,State,ImageState,Lang FROM Seller WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Seller  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Seller" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Seller">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Type")  %>
<%#  Eval("Name")  %>
<%#  Eval("Address")  %>
<%#  Eval("No")  %>
<%#  Eval("ShortExplanation")  %>
<%#  Eval("Link")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Seller" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Type,Name,Address,No,ShortExplanation,Link,ImagePath,MainPage,Ordering,State,ImageState,Lang FROM Seller WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Seller  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Seller" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Seller">
<ItemTemplate>
<li class="Seller">
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Type")  %>
<%#  Eval("Name")  %>
<%#  Eval("Address")  %>
<%#  Eval("No")  %>
<%#  Eval("ShortExplanation")  %>
<%#  Eval("Link")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Seller" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Type,Name,Address,No,ShortExplanation,Link,ImagePath,MainPage,Ordering,State,ImageState,Lang FROM Seller WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Seller  ------------------>  TextBox_Resource_to_XML <----------------




Seller  ------------------>  TextBox_List_XML <----------------

<word Keyword="Type" Translate="Type"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="Address" Translate="Address"/>
<word Keyword="No" Translate="No"/>
<word Keyword="ShortExplanation" Translate="ShortExplanation"/>
<word Keyword="Link" Translate="Link"/>
<word Keyword="ImagePath" Translate="ImagePath"/>
<word Keyword="MainPage" Translate="MainPage"/>
<word Keyword="Ordering" Translate="Ordering"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Created_Date" Translate="Created_Date"/>
<word Keyword="ImageState" Translate="ImageState"/>
<word Keyword="Lang" Translate="Lang"/>



Seller  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Seller" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Seller" runat="server" AllowPaging="True" DataKeyNames="ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Seller" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="ID"  InsertVisible="False" Visible="False"  HeaderText="ID" SortExpression="ID" /> 
<asp:BoundField DataField="Type" HeaderText="Tipi" SortExpression="Type" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:BoundField DataField="Address" HeaderText="Adres" SortExpression="Address" /> 
<asp:BoundField DataField="No" HeaderText="No" SortExpression="No" /> 
<asp:BoundField DataField="ShortExplanation" HeaderText="Kısa Açıklama" SortExpression="ShortExplanation" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Seller" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ID,Type,Name,Address,No,ShortExplanation FROM Seller  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Seller  ------------------>  TextBox_Veri <----------------

protected void generateSellerData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Seller item = new Seller();
item.Type=Guid.NewGuid().ToString().Replace("-"," ");
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.Address=Guid.NewGuid().ToString().Replace("-"," ");
item.No=Guid.NewGuid().ToString().Replace("-"," ");
item.ShortExplanation="ShortExplanation";
item.Link=Guid.NewGuid().ToString().Replace("-"," ");
item.ImagePath=Guid.NewGuid().ToString().Replace("-"," ");
item.MainPage=true;
item.Ordering= rand.Next(1000);
item.State=true;
item.Created_Date= DateTime.Now;
item.ImageState=true;
item.Lang=Guid.NewGuid().ToString().Replace("-"," ");
data.Sellers.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Seller  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE SellerInsert(
@Type nvarchar(20),
@Name nvarchar(100),
@Address nvarchar(255),
@No nvarchar(50),
@ShortExplanation varchar(500),
@Link nvarchar(100),
@ImagePath nvarchar(100),
@MainPage bit,
@Ordering int,
@State bit,
@Created_Date datetime,
@ImageState bit,
@Lang nvarchar(50))
AS INSERT INTO Seller(
Type,Name,Address,No,ShortExplanation,Link,ImagePath,MainPage,Ordering,State,Created_Date,ImageState,Lang) VALUES (
@Type,@Name,@Address,@No,@ShortExplanation,@Link,@ImagePath,@MainPage,@Ordering,@State,@Created_Date,@ImageState,@Lang)
RETURN
----------------------------------------------
CREATE PROCEDURE SellerUpdate(
@ID int,
@Type nvarchar(20),
@Name nvarchar(100),
@Address nvarchar(255),
@No nvarchar(50),
@ShortExplanation varchar(500),
@Link nvarchar(100),
@ImagePath nvarchar(100),
@MainPage bit,
@Ordering int,
@State bit,
@Created_Date datetime,
@ImageState bit,
@Lang nvarchar(50))
AS UPDATE Seller SET
Type = @Type,
Name = @Name,
Address = @Address,
No = @No,
ShortExplanation = @ShortExplanation,
Link = @Link,
ImagePath = @ImagePath,
MainPage = @MainPage,
Ordering = @Ordering,
State = @State,
Created_Date = @Created_Date,
ImageState = @ImageState,
Lang = @Lang
WHERE ID=@ID;
RETURN
----------------------------------------------
CREATE PROCEDURE SellerDelete(
@ID int
)
AS DELETE FROM Seller WHERE ID = @ID;
RETURN



Seller  ------------------>  TextBox_State <----------------

ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;3;True;True;False;False;
Type;NO;nvarchar;20;nvarchar(20);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;14;False;True;True;True;TextBox_Type
Name;NO;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;9;False;True;True;True;TextBox_Name
Address;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;1;False;True;True;True;TextBox_Address
No;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;10;False;True;True;True;TextBox_No
ShortExplanation;YES;varchar;500;varchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;12;False;True;True;True;TextBox_ShortExplanation
Link;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_Link
ImagePath;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;4;False;False;False;False;TextBox_ImagePath
MainPage;NO;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;9;False;8;False;False;False;False;CheckBox_MainPage
Ordering;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;11;False;False;False;False;TextBox_Ordering
State;NO;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;11;False;13;False;False;False;False;CheckBox_State
Created_Date;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;True;2;False;False;False;False;
ImageState;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;13;False;5;False;False;False;False;CheckBox_ImageState
Lang;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;6;False;False;False;False;TextBox_Lang



Seller  ------------------>  TextBox_InsertMethod <----------------

public void  insertSeller(SellerItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Seller (Type, Name, Address, No, ShortExplanation, Link, ImagePath, MainPage, Ordering, State, Created_Date, ImageState, Lang) values (@Type, @Name, @Address, @No, @ShortExplanation, @Link, @ImagePath, @MainPage, @Ordering, @State, @Created_Date, @ImageState, @Lang)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,SellerItem item)
 {
command.Parameters.AddWithValue("@Type", item.Type);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Address", item.Address);
command.Parameters.AddWithValue("@No", item.No);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }




Seller  ------------------>  TextBox_UpdateMethod <----------------

public void  updateSeller(SellerItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Seller SET  Type=@Type, Name=@Name, Address=@Address, No=@No, ShortExplanation=@ShortExplanation, Link=@Link, ImagePath=@ImagePath, MainPage=@MainPage, Ordering=@Ordering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang  WHERE ID= @ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,SellerItem item)
 {
command.Parameters.AddWithValue("@Type", item.Type);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Address", item.Address);
command.Parameters.AddWithValue("@No", item.No);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }




Seller  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteSeller(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Seller WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Seller  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getSellerWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Seller WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getSeller(sql, list.ToArray());
}
public List<SellerItem> getSeller (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Seller  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getSeller (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Seller  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public SellerItem getSeller (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

SellerItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Seller WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getSellerCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Seller  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getSeller (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Seller  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getAllSellerItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Seller";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Seller  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getSellerItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Seller WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Seller  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertSeller(SellerItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Seller (Type, Name, Address, No, ShortExplanation, Link, ImagePath, MainPage, Ordering, State, Created_Date, ImageState, Lang) values (@Type, @Name, @Address, @No, @ShortExplanation, @Link, @ImagePath, @MainPage, @Ordering, @State, @Created_Date, @ImageState, @Lang)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,SellerItem item)
 {
command.Parameters.AddWithValue("@Type", item.Type);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Address", item.Address);
command.Parameters.AddWithValue("@No", item.No);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }




Seller  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateSeller(SellerItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Seller SET  Type=@Type, Name=@Name, Address=@Address, No=@No, ShortExplanation=@ShortExplanation, Link=@Link, ImagePath=@ImagePath, MainPage=@MainPage, Ordering=@Ordering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang  WHERE ID= @ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Seller  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteSeller(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Seller WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Seller  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<SellerItem> getSeller (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Seller  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<SellerItem> getSeller (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Seller  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public SellerItem getSeller (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

SellerItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Seller WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getSellerCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Seller  ------------------>  TextBox_OleDbInsertMethod <----------------

public Boolean  insertSeller(SellerItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Seller (Type, Name, Address, No, ShortExplanation, Link, ImagePath, MainPage, Ordering, State, Created_Date, ImageState, Lang) values (@Type, @Name, @Address, @No, @ShortExplanation, @Link, @ImagePath, @MainPage, @Ordering, @State, @Created_Date, @ImageState, @Lang)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,SellerItem item)
 {
command.Parameters.AddWithValue("@Type", item.Type);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Address", item.Address);
command.Parameters.AddWithValue("@No", item.No);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }




Seller  ------------------>  TextBox_OleDbUpdateMethod <----------------

public Boolean  updateSeller(SellerItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Seller SET  Type=@Type, Name=@Name, Address=@Address, No=@No, ShortExplanation=@ShortExplanation, Link=@Link, ImagePath=@ImagePath, MainPage=@MainPage, Ordering=@Ordering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@ID", myItem.ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Seller  ------------------>  TextBox_OleDbDeleteMethod <----------------

public Boolean  deleteSeller(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Seller WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Seller  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<SellerItem> getSeller (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Seller  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getSellerWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Seller WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getSeller(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getSeller (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Seller  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public SellerItem getSeller (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

SellerItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Seller WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getSellerCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}
}



Seller  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getSeller (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Seller  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getAllSellerItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Seller";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Seller  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<SellerItem> getSellerItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Seller WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Seller  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertSeller(SellerItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Seller (Type, Name, Address, No, ShortExplanation, Link, ImagePath, MainPage, Ordering, State, Created_Date, ImageState, Lang) values (@Type, @Name, @Address, @No, @ShortExplanation, @Link, @ImagePath, @MainPage, @Ordering, @State, @Created_Date, @ImageState, @Lang)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,SellerItem item)
 {
command.Parameters.AddWithValue("@Type", item.Type);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Address", item.Address);
command.Parameters.AddWithValue("@No", item.No);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }




Seller  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateSeller(SellerItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Seller SET  Type=@Type, Name=@Name, Address=@Address, No=@No, ShortExplanation=@ShortExplanation, Link=@Link, ImagePath=@ImagePath, MainPage=@MainPage, Ordering=@Ordering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Seller  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteSeller(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Seller WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Seller  ------------------>  TextBox_OracleSelectMethod <----------------

public List<SellerItem> getSeller (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Seller  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<SellerItem> getSeller (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<SellerItem> listItem = new List<SellerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getSellerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Seller  ------------------>  TextBox_OracleSelectMethod3 <----------------

public SellerItem getSeller (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

SellerItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Seller WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getSellerCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Seller  ------------------>  TextBox_MyTableItem <----------------

public int ID { get; set; }
public string Type { get; set; }
public string Name { get; set; }
public string Address { get; set; }
public string No { get; set; }
public string ShortExplanation { get; set; }
public string Link { get; set; }
public string ImagePath { get; set; }
public Boolean MainPage { get; set; }
public int Ordering { get; set; }
public Boolean State { get; set; }
public DateTime Created_Date { get; set; }
public Boolean ImageState { get; set; }
public string Lang { get; set; }




Seller  ------------------>  TextBox2 <----------------




Seller  ------------------>  TextBox_IReader <----------------

public SellerItem getSellerCollectionFromReader (IDataRecord  read)
{
SellerItem item = new SellerItem();

item.ID = (read["ID"] is DBNull) ? -1 : Convert.ToInt32(read["ID"].ToString());
item.Type = (read["Type"] is DBNull) ? "" : read["Type"].ToString();
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.Address = (read["Address"] is DBNull) ? "" : read["Address"].ToString();
item.No = (read["No"] is DBNull) ? "" : read["No"].ToString();
item.ShortExplanation = (read["ShortExplanation"] is DBNull) ? "" : read["ShortExplanation"].ToString();
item.Link = (read["Link"] is DBNull) ? "" : read["Link"].ToString();
item.ImagePath = (read["ImagePath"] is DBNull) ? "" : read["ImagePath"].ToString();
item.MainPage = (read["MainPage"] is DBNull) ? false : Boolean.Parse(read["MainPage"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Created_Date = (read["Created_Date"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Created_Date"].ToString());
item.ImageState = (read["ImageState"] is DBNull) ? false : Boolean.Parse(read["ImageState"].ToString());
item.Lang = (read["Lang"] is DBNull) ? "" : read["Lang"].ToString();
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Users
TARİH = 10 Aralık 2010 Cuma 16:59:04


Users_ID    ----->    TextBoxMax_
FirstName    ----->    TextBoxMax_
LastName    ----->    TextBoxMax_
Password    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Gender    ----->    RadioButtonList_
Role    ----->    TextBoxMax_
Created_Date    ----->    TextBoxMax_
Age    ----->    TextBoxMax_
Nation    ----->    TextBoxMax_
Profile    ----->    TextBox_MultiLine
ImagePath    ----->    TextBoxMax_
ImageState    ----->    CheckBox_
Approval    ----->    CheckBox_
Kontur    ----->    TextBoxMax_



Users  ------------------>  TextBox_In <----------------

protected bool retrieveData( Users item, Label mesaj){
if(item != null){
try{
TextBox_Users_ID.Text = item.Users_ID.ToString();
TextBox_FirstName.Text = item.FirstName.ToString();
TextBox_LastName.Text = string.IsNullOrEmpty(item.LastName) ? String.Empty : item.LastName;
TextBox_Password.Text = item.Password.ToString();
TextBox_Email.Text = item.Email.ToString();
if (item.Gender.HasValue){
func.selectRadioButtons(RadioButtonList_Gender,item.Gender.Value.ToString());
}
TextBox_Role.Text = string.IsNullOrEmpty(item.Role) ? String.Empty : item.Role;
TextBox_Age.Text = item.Age.HasValue ?  item.Age.Value.ToString() : String.Empty;
TextBox_Nation.Text = string.IsNullOrEmpty(item.Nation) ? String.Empty : item.Nation;
TextBox_Profile.Text = string.IsNullOrEmpty(item.Profile) ? String.Empty : item.Profile;
TextBox_ImagePath.Text = string.IsNullOrEmpty(item.ImagePath) ? String.Empty : item.ImagePath;
CheckBox_ImageState.Checked = item.ImageState.HasValue ?  item.ImageState.Value : false;
CheckBox_Approval.Checked = item.Approval.HasValue ?  item.Approval.Value : false;
TextBox_Kontur.Text = item.Kontur.HasValue ?  item.Kontur.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Users  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Users">
<tr  id="tr_Users_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Users_ID" CssClass="Label_Deger" runat="server" Text="Users_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Users_ID"  CssClass="textBox_NORMAL" ValidationGroup="Users" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_FirstName" runat="server">
<td class="name">
<asp:Label ID="Label_FirstName" CssClass="Label_Deger" runat="server" Text="Adı"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_FirstName" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_LastName" runat="server">
<td class="name">
<asp:Label ID="Label_LastName" CssClass="Label_Deger" runat="server" Text="Soy adı"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_LastName" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Password" runat="server">
<td class="name">
<asp:Label ID="Label_Password" CssClass="Label_Deger" runat="server" Text="Şifre"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Password" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Email" runat="server">
<td class="name">
<asp:Label ID="Label_Email" CssClass="Label_Deger" runat="server" Text="E-Posta"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Email" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Gender" runat="server">
<td class="name">
<asp:Label ID="Label_Gender" CssClass="Label_Deger" runat="server" Text="Cinsiyet"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:RadioButtonList ID="RadioButtonList_Gender"   CssClass="radioButton_LIST" ValidationGroup="Users" runat="server"></asp:RadioButtonList>

</td>
</tr>
<tr  id="tr_Role" runat="server">
<td class="name">
<asp:Label ID="Label_Role" CssClass="Label_Deger" runat="server" Text="Sıfatı"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Role" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Age" runat="server">
<td class="name">
<asp:Label ID="Label_Age" CssClass="Label_Deger" runat="server" Text="Yaş"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Age"  CssClass="textBox_NORMAL" ValidationGroup="Users" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Nation" runat="server">
<td class="name">
<asp:Label ID="Label_Nation" CssClass="Label_Deger" runat="server" Text="Nation"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Nation" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Profile" runat="server">
<td class="name">
<asp:Label ID="Label_Profile" CssClass="Label_Deger" runat="server" Text="Profil"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Profile" TextMode="MultiLine" ValidationGroup="Users" CssClass="textBox_MULTI" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_ImagePath" runat="server">
<td class="name">
<asp:Label ID="Label_ImagePath" CssClass="Label_Deger" runat="server" Text="Resim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_ImagePath" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_ImageState" runat="server">
<td class="name">
<asp:Label ID="Label_ImageState" CssClass="Label_Deger" runat="server" Text="Resim Durumu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_ImageState" ValidationGroup="Users" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_Approval" runat="server">
<td class="name">
<asp:Label ID="Label_Approval" CssClass="Label_Deger" runat="server" Text="Onaylı"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_Approval" ValidationGroup="Users" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Kontur" runat="server">
<td class="name">
<asp:Label ID="Label_Kontur" CssClass="Label_Deger" runat="server" Text="Kontur"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Kontur"  CssClass="textBox_NORMAL" ValidationGroup="Users" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Users  ------------------>  TextBox_Insert <----------------

protected bool initialize(Users item,Label mesaj){
if(item != null){
try{
if(func.isInteger(TextBox_Users_ID.Text))
item.Users_ID= Convert.ToInt32(TextBox_Users_ID.Text.Trim());
item.FirstName=TextBox_FirstName.Text.Trim();
item.LastName=TextBox_LastName.Text.Trim();
item.Password=TextBox_Password.Text.Trim();
item.Email=TextBox_Email.Text.Trim();
if (RadioButtonList_Gender.SelectedItem != null){
item.Gender= char.Parse(RadioButtonList_Gender.SelectedValue);}
item.Role=TextBox_Role.Text.Trim();
//item.Created_Date=DateTime.Now;
if(func.isDateTime(TextBox_Age.Text.Trim()))
item.Age= DateTime.Parse(TextBox_Age.Text.Trim());
item.Nation=TextBox_Nation.Text.Trim();
item.Profile=func.stringCut(TextBox_Profile.Text.Trim(),0,998);
item.ImagePath=TextBox_ImagePath.Text.Trim();
item.ImageState=CheckBox_ImageState.Checked;
item.Approval=CheckBox_Approval.Checked;
if(func.isInteger(TextBox_Kontur.Text))
item.Kontur= Convert.ToInt32(TextBox_Kontur.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Users  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Users"  CssClass="Ei_Labels" runat="server">
<table class="Users">
<tr>
<td class="name">
<asp:Label ID="Label_Users_ID_1" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Users_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_FirstName_1" CssClass="db_Name"  Text="Adı" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_FirstName" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_LastName_1" CssClass="db_Name"  Text="Soy adı" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_LastName" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Password_1" CssClass="db_Name"  Text="Şifre" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Password" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Email_1" CssClass="db_Name"  Text="E-Posta" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Email" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Gender_1" CssClass="db_Name"  Text="Cinsiyet" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Gender" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Role_1" CssClass="db_Name"  Text="Sıfatı" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Role" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Created_Date_1" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Created_Date" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Age_1" CssClass="db_Name"  Text="Yaş" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Age" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Nation_1" CssClass="db_Name"  Text="Nation" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Nation" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Profile_1" CssClass="db_Name"  Text="Profil" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Profile" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_ImagePath_1" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImagePath" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_ImageState_1" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImageState" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Approval_1" CssClass="db_Name"  Text="Onaylı" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Approval" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Kontur_1" CssClass="db_Name"  Text="Kontur" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Kontur" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Users  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Users item){
Label_Users_ID.Text = item.Users_ID.ToString();
Label_FirstName.Text = item.FirstName.ToString();
Label_LastName.Text = item.LastName.HasValue ?  item.LastName.Value.ToString() : String.Empty;
Label_Password.Text = item.Password.ToString();
Label_Email.Text = item.Email.ToString();
Label_Gender.Text = item.Gender.HasValue ?  item.Gender.Value.ToString() : String.Empty;
Label_Role.Text = item.Role.HasValue ?  item.Role.Value.ToString() : String.Empty;
Label_Created_Date.Text = item.Created_Date.HasValue ?  item.Created_Date.Value.ToString() : String.Empty;
Label_Age.Text = item.Age.HasValue ?  item.Age.Value.ToString() : String.Empty;
Label_Nation.Text = item.Nation.HasValue ?  item.Nation.Value.ToString() : String.Empty;
Label_Profile.Text = item.Profile.HasValue ?  item.Profile.Value.ToString() : String.Empty;
Label_ImagePath.Text = item.ImagePath.HasValue ?  item.ImagePath.Value.ToString() : String.Empty;
Label_ImageState.Text = item.ImageState.HasValue ?  item.ImageState.Value.ToString() : String.Empty;
Label_Approval.Text = item.Approval.HasValue ?  item.Approval.Value.ToString() : String.Empty;
Label_Kontur.Text = item.Kontur.HasValue ?  item.Kontur.Value.ToString() : String.Empty;
}



Users  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_Users_ID" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
<asp:Label ID="Label_FirstName" CssClass="db_Name"  Text="Adı" runat="server"></asp:Label>
<asp:Label ID="Label_LastName" CssClass="db_Name"  Text="Soy adı" runat="server"></asp:Label>
<asp:Label ID="Label_Password" CssClass="db_Name"  Text="Şifre" runat="server"></asp:Label>
<asp:Label ID="Label_Email" CssClass="db_Name"  Text="E-Posta" runat="server"></asp:Label>
<asp:Label ID="Label_Gender" CssClass="db_Name"  Text="Cinsiyet" runat="server"></asp:Label>
<asp:Label ID="Label_Role" CssClass="db_Name"  Text="Sıfatı" runat="server"></asp:Label>
<asp:Label ID="Label_Created_Date" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
<asp:Label ID="Label_Age" CssClass="db_Name"  Text="Yaş" runat="server"></asp:Label>
<asp:Label ID="Label_Nation" CssClass="db_Name"  Text="Nation" runat="server"></asp:Label>
<asp:Label ID="Label_Profile" CssClass="db_Name"  Text="Profil" runat="server"></asp:Label>
<asp:Label ID="Label_ImagePath" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
<asp:Label ID="Label_ImageState" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
<asp:Label ID="Label_Approval" CssClass="db_Name"  Text="Onaylı" runat="server"></asp:Label>
<asp:Label ID="Label_Kontur" CssClass="db_Name"  Text="Kontur" runat="server"></asp:Label>



Users  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<%#  Eval("Users_ID")  %>
<%#  Eval("FirstName")  %>
<%#  Eval("LastName")  %>
<%#  Eval("Password")  %>
<%#  Eval("Email")  %>
<%#  Eval("Gender")  %>
<%#  Eval("Role")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Age")  %>
<%#  Eval("Nation")  %>
<%#  Eval("Profile")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("ImageState")  %>
<%#  Eval("Approval")  %>
<%#  Eval("Kontur")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Users_ID</th>
<th>FirstName</th>
<th>LastName</th>
<th>Password</th>
<th>Email</th>
<th>Gender</th>
<th>Role</th>
<th>Age</th>
<th>Nation</th>
<th>Profile</th>
<th>ImagePath</th>
<th>ImageState</th>
<th>Approval</th>
<th>Kontur</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_FirstName" cssClass="evalCss" runat="server" Text='<%#  Eval("FirstName")  %>' /></td>
<td><asp:Label ID="Label_LastName" cssClass="evalCss" runat="server" Text='<%#  Eval("LastName")  %>' /></td>
<td><asp:Label ID="Label_Password" cssClass="evalCss" runat="server" Text='<%#  Eval("Password")  %>' /></td>
<td><asp:Label ID="Label_Email" cssClass="evalCss" runat="server" Text='<%#  Eval("Email")  %>' /></td>
<td><asp:Label ID="Label_Gender" cssClass="evalCss" runat="server" Text='<%#  Eval("Gender")  %>' /></td>
<td><asp:Label ID="Label_Role" cssClass="evalCss" runat="server" Text='<%#  Eval("Role")  %>' /></td>
<td><asp:Label ID="Label_Age" cssClass="evalCss" runat="server" Text='<%#  Eval("Age")  %>' /></td>
<td><asp:Label ID="Label_Nation" cssClass="evalCss" runat="server" Text='<%#  Eval("Nation")  %>' /></td>
<td><asp:Label ID="Label_Profile" cssClass="evalCss" runat="server" Text='<%#  Eval("Profile")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Approval" cssClass="evalCss" runat="server" Text='<%#  Eval("Approval")  %>' /></td>
<td><asp:Label ID="Label_Kontur" cssClass="evalCss" runat="server" Text='<%#  Eval("Kontur")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_FirstName" cssClass="evalCss" runat="server" Text='<%#  Eval("FirstName")  %>' /></td>
<td><asp:Label ID="Label_LastName" cssClass="evalCss" runat="server" Text='<%#  Eval("LastName")  %>' /></td>
<td><asp:Label ID="Label_Password" cssClass="evalCss" runat="server" Text='<%#  Eval("Password")  %>' /></td>
<td><asp:Label ID="Label_Email" cssClass="evalCss" runat="server" Text='<%#  Eval("Email")  %>' /></td>
<td><asp:Label ID="Label_Gender" cssClass="evalCss" runat="server" Text='<%#  Eval("Gender")  %>' /></td>
<td><asp:Label ID="Label_Role" cssClass="evalCss" runat="server" Text='<%#  Eval("Role")  %>' /></td>
<td><asp:Label ID="Label_Age" cssClass="evalCss" runat="server" Text='<%#  Eval("Age")  %>' /></td>
<td><asp:Label ID="Label_Nation" cssClass="evalCss" runat="server" Text='<%#  Eval("Nation")  %>' /></td>
<td><asp:Label ID="Label_Profile" cssClass="evalCss" runat="server" Text='<%#  Eval("Profile")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Approval" cssClass="evalCss" runat="server" Text='<%#  Eval("Approval")  %>' /></td>
<td><asp:Label ID="Label_Kontur" cssClass="evalCss" runat="server" Text='<%#  Eval("Kontur")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Users_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_FirstName cssClass="evalCss" runat="server" Text='<%#  Eval("FirstName")  %>' />
</td>
<td>
<asp:Label ID="Label_LastName cssClass="evalCss" runat="server" Text='<%#  Eval("LastName")  %>' />
</td>
<td>
<asp:Label ID="Label_Password cssClass="evalCss" runat="server" Text='<%#  Eval("Password")  %>' />
</td>
<td>
<asp:Label ID="Label_Email cssClass="evalCss" runat="server" Text='<%#  Eval("Email")  %>' />
</td>
<td>
<asp:Label ID="Label_Gender cssClass="evalCss" runat="server" Text='<%#  Eval("Gender")  %>' />
</td>
<td>
<asp:Label ID="Label_Role cssClass="evalCss" runat="server" Text='<%#  Eval("Role")  %>' />
</td>
<td>
<asp:Label ID="Label_Age cssClass="evalCss" runat="server" Text='<%#  Eval("Age")  %>' />
</td>
<td>
<asp:Label ID="Label_Nation cssClass="evalCss" runat="server" Text='<%#  Eval("Nation")  %>' />
</td>
<td>
<asp:Label ID="Label_Profile cssClass="evalCss" runat="server" Text='<%#  Eval("Profile")  %>' />
</td>
<td>
<asp:Label ID="Label_ImagePath cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' />
</td>
<td>
<asp:Label ID="Label_ImageState cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' />
</td>
<td>
<asp:Label ID="Label_Approval cssClass="evalCss" runat="server" Text='<%#  Eval("Approval")  %>' />
</td>
<td>
<asp:Label ID="Label_Kontur cssClass="evalCss" runat="server" Text='<%#  Eval("Kontur")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<%#  Eval("Users_ID")  %>
<%#  Eval("FirstName")  %>
<%#  Eval("LastName")  %>
<%#  Eval("Password")  %>
<%#  Eval("Email")  %>
<%#  Eval("Gender")  %>
<%#  Eval("Role")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Age")  %>
<%#  Eval("Nation")  %>
<%#  Eval("Profile")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("ImageState")  %>
<%#  Eval("Approval")  %>
<%#  Eval("Kontur")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%#  Eval("Users_ID")  %>
<%#  Eval("FirstName")  %>
<%#  Eval("LastName")  %>
<%#  Eval("Password")  %>
<%#  Eval("Email")  %>
<%#  Eval("Gender")  %>
<%#  Eval("Role")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Age")  %>
<%#  Eval("Nation")  %>
<%#  Eval("Profile")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("ImageState")  %>
<%#  Eval("Approval")  %>
<%#  Eval("Kontur")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<li class="Users">
<%#  Eval("Users_ID")  %>
<%#  Eval("FirstName")  %>
<%#  Eval("LastName")  %>
<%#  Eval("Password")  %>
<%#  Eval("Email")  %>
<%#  Eval("Gender")  %>
<%#  Eval("Role")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Age")  %>
<%#  Eval("Nation")  %>
<%#  Eval("Profile")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("ImageState")  %>
<%#  Eval("Approval")  %>
<%#  Eval("Kontur")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_Resource_to_XML <----------------




Users  ------------------>  TextBox_List_XML <----------------

<word Keyword="Users_ID" Translate="Users_ID"/>
<word Keyword="FirstName" Translate="FirstName"/>
<word Keyword="LastName" Translate="LastName"/>
<word Keyword="Password" Translate="Password"/>
<word Keyword="Email" Translate="Email"/>
<word Keyword="Gender" Translate="Gender"/>
<word Keyword="Role" Translate="Role"/>
<word Keyword="Created_Date" Translate="Created_Date"/>
<word Keyword="Age" Translate="Age"/>
<word Keyword="Nation" Translate="Nation"/>
<word Keyword="Profile" Translate="Profile"/>
<word Keyword="ImagePath" Translate="ImagePath"/>
<word Keyword="ImageState" Translate="ImageState"/>
<word Keyword="Approval" Translate="Approval"/>
<word Keyword="Kontur" Translate="Kontur"/>



Users  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Users" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Users" runat="server" AllowPaging="True" DataKeyNames="Users_ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Users" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="Users_ID"  InsertVisible="False" Visible="False"  HeaderText="Users_ID" SortExpression="Users_ID" /> 
<asp:BoundField DataField="FirstName" HeaderText="Adı" SortExpression="FirstName" /> 
<asp:BoundField DataField="LastName" HeaderText="Soy adı" SortExpression="LastName" /> 
<asp:BoundField DataField="Password" HeaderText="Şifre" SortExpression="Password" /> 
<asp:BoundField DataField="Email" HeaderText="E-Posta" SortExpression="Email" /> 
<asp:BoundField DataField="Gender" HeaderText="Cinsiyet" SortExpression="Gender" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender FROM Users  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Users  ------------------>  TextBox_Veri <----------------

protected void generateUsersData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Users item = new Users();
item.FirstName=Guid.NewGuid().ToString().Replace("-"," ");
item.LastName=Guid.NewGuid().ToString().Replace("-"," ");
item.Password=Guid.NewGuid().ToString().Replace("-"," ");
item.Email=Guid.NewGuid().ToString().Replace("-"," ");
item.Gender= A;
item.Role=Guid.NewGuid().ToString().Replace("-"," ");
item.Created_Date= DateTime.Now;
item.Age= DateTime.Now;
item.Nation=Guid.NewGuid().ToString().Replace("-"," ");
item.Profile=Guid.NewGuid().ToString().Replace("-"," ");
item.ImagePath=Guid.NewGuid().ToString().Replace("-"," ");
item.ImageState=true;
item.Approval=true;
item.Kontur= rand.Next(1000);
data.Userss.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Users  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE UsersInsert(
@FirstName nvarchar(50),
@LastName nvarchar(50),
@Password nvarchar(50),
@Email nvarchar(50),
@Gender char,
@Role nvarchar(50),
@Created_Date datetime,
@Age datetime,
@Nation nvarchar(50),
@Profile nvarchar(1000),
@ImagePath nvarchar(100),
@ImageState bit,
@Approval bit,
@Kontur int)
AS INSERT INTO Users(
FirstName,LastName,Password,Email,Gender,Role,Created_Date,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur) VALUES (
@FirstName,@LastName,@Password,@Email,@Gender,@Role,@Created_Date,@Age,@Nation,@Profile,@ImagePath,@ImageState,@Approval,@Kontur)
RETURN
----------------------------------------------
CREATE PROCEDURE UsersUpdate(
@Users_ID int,
@FirstName nvarchar(50),
@LastName nvarchar(50),
@Password nvarchar(50),
@Email nvarchar(50),
@Gender char,
@Role nvarchar(50),
@Created_Date datetime,
@Age datetime,
@Nation nvarchar(50),
@Profile nvarchar(1000),
@ImagePath nvarchar(100),
@ImageState bit,
@Approval bit,
@Kontur int)
AS UPDATE Users SET
FirstName = @FirstName,
LastName = @LastName,
Password = @Password,
Email = @Email,
Gender = @Gender,
Role = @Role,
Created_Date = @Created_Date,
Age = @Age,
Nation = @Nation,
Profile = @Profile,
ImagePath = @ImagePath,
ImageState = @ImageState,
Approval = @Approval,
Kontur = @Kontur
WHERE Users_ID=@Users_ID;
RETURN
----------------------------------------------
CREATE PROCEDURE UsersDelete(
@Users_ID int
)
AS DELETE FROM Users WHERE Users_ID = @Users_ID;
RETURN



Users  ------------------>  TextBox_State <----------------

Users_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;15;True;True;False;False;TextBox_Users_ID
FirstName;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;5;False;True;True;True;TextBox_FirstName
LastName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;10;False;True;True;True;TextBox_LastName
Password;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;12;False;True;True;True;TextBox_Password
Email;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;4;False;True;True;True;TextBox_Email
Gender;YES;char;1;char;radioButton_LIST;RadioButtonList_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;RadioButtonList_Gender
Role;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;14;False;False;False;False;TextBox_Role
Created_Date;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;True;3;False;False;False;False;
Age;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;1;False;False;False;False;TextBox_Age
Nation;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;11;False;False;False;False;TextBox_Nation
Profile;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;11;False;13;False;False;False;False;TextBox_Profile
ImagePath;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;7;False;False;False;False;TextBox_ImagePath
ImageState;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;13;False;8;False;False;False;False;CheckBox_ImageState
Approval;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;14;False;2;False;False;False;False;CheckBox_Approval
Kontur;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;9;False;False;False;False;TextBox_Kontur



Users  ------------------>  TextBox_InsertMethod <----------------

public void  insertUsers(UsersItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Users (FirstName, LastName, Password, Email, Gender, Role, Created_Date, Age, Nation, Profile, ImagePath, ImageState, Approval, Kontur) values (@FirstName, @LastName, @Password, @Email, @Gender, @Role, @Created_Date, @Age, @Nation, @Profile, @ImagePath, @ImageState, @Approval, @Kontur)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_UpdateMethod <----------------

public void  updateUsers(UsersItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Users SET  FirstName=@FirstName, LastName=@LastName, Password=@Password, Email=@Email, Gender=@Gender, Role=@Role, Created_Date=@Created_Date, Age=@Age, Nation=@Nation, Profile=@Profile, ImagePath=@ImagePath, ImageState=@ImageState, Approval=@Approval, Kontur=@Kontur  WHERE Users_ID= @Users_ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteUsers(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Users WHERE Users_ID= @Users_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Users  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsersWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Users WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getUsers(sql, list.ToArray());
}
public List<UsersItem> getUsers (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsers (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public UsersItem getUsers (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

UsersItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getUsersCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Users  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsers (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getAllUsersItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsersItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertUsers(UsersItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Users (FirstName, LastName, Password, Email, Gender, Role, Created_Date, Age, Nation, Profile, ImagePath, ImageState, Approval, Kontur) values (@FirstName, @LastName, @Password, @Email, @Gender, @Role, @Created_Date, @Age, @Nation, @Profile, @ImagePath, @ImageState, @Approval, @Kontur)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateUsers(UsersItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Users SET  FirstName=@FirstName, LastName=@LastName, Password=@Password, Email=@Email, Gender=@Gender, Role=@Role, Created_Date=@Created_Date, Age=@Age, Nation=@Nation, Profile=@Profile, ImagePath=@ImagePath, ImageState=@ImageState, Approval=@Approval, Kontur=@Kontur  WHERE Users_ID= @Users_ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Users  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteUsers(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Users WHERE Users_ID= @Users_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Users  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<UsersItem> getUsers (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Users  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<UsersItem> getUsers (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Users  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public UsersItem getUsers (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

UsersItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getUsersCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Users  ------------------>  TextBox_OleDbInsertMethod <----------------

public Boolean  insertUsers(UsersItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Users (FirstName, LastName, Password, Email, Gender, Role, Created_Date, Age, Nation, Profile, ImagePath, ImageState, Approval, Kontur) values (@FirstName, @LastName, @Password, @Email, @Gender, @Role, @Created_Date, @Age, @Nation, @Profile, @ImagePath, @ImageState, @Approval, @Kontur)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_OleDbUpdateMethod <----------------

public Boolean  updateUsers(UsersItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Users SET  FirstName=@FirstName, LastName=@LastName, Password=@Password, Email=@Email, Gender=@Gender, Role=@Role, Created_Date=@Created_Date, Age=@Age, Nation=@Nation, Profile=@Profile, ImagePath=@ImagePath, ImageState=@ImageState, Approval=@Approval, Kontur=@Kontur  WHERE Users_ID= @Users_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@Users_ID", myItem.Users_ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Users  ------------------>  TextBox_OleDbDeleteMethod <----------------

public Boolean  deleteUsers(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Users WHERE Users_ID= @Users_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Users  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<UsersItem> getUsers (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsersWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Users WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getUsers(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsers (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public UsersItem getUsers (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

UsersItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getUsersCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsers (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getAllUsersItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsersItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertUsers(UsersItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Users (FirstName, LastName, Password, Email, Gender, Role, Created_Date, Age, Nation, Profile, ImagePath, ImageState, Approval, Kontur) values (@FirstName, @LastName, @Password, @Email, @Gender, @Role, @Created_Date, @Age, @Nation, @Profile, @ImagePath, @ImageState, @Approval, @Kontur)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateUsers(UsersItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Users SET  FirstName=@FirstName, LastName=@LastName, Password=@Password, Email=@Email, Gender=@Gender, Role=@Role, Created_Date=@Created_Date, Age=@Age, Nation=@Nation, Profile=@Profile, ImagePath=@ImagePath, ImageState=@ImageState, Approval=@Approval, Kontur=@Kontur  WHERE Users_ID= @Users_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Users  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteUsers(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Users WHERE Users_ID= @Users_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Users  ------------------>  TextBox_OracleSelectMethod <----------------

public List<UsersItem> getUsers (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<UsersItem> getUsers (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Users  ------------------>  TextBox_OracleSelectMethod3 <----------------

public UsersItem getUsers (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

UsersItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getUsersCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Users  ------------------>  TextBox_MyTableItem <----------------

public int Users_ID { get; set; }
public string FirstName { get; set; }
public string LastName { get; set; }
public string Password { get; set; }
public string Email { get; set; }
public char Gender { get; set; }
public string Role { get; set; }
public DateTime Created_Date { get; set; }
public DateTime Age { get; set; }
public string Nation { get; set; }
public string Profile { get; set; }
public string ImagePath { get; set; }
public Boolean ImageState { get; set; }
public Boolean Approval { get; set; }
public int Kontur { get; set; }




Users  ------------------>  TextBox2 <----------------




Users  ------------------>  TextBox_IReader <----------------

public UsersItem getUsersCollectionFromReader (IDataRecord  read)
{
UsersItem item = new UsersItem();

item.Users_ID = (read["Users_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Users_ID"].ToString());
item.FirstName = (read["FirstName"] is DBNull) ? "" : read["FirstName"].ToString();
item.LastName = (read["LastName"] is DBNull) ? "" : read["LastName"].ToString();
item.Password = (read["Password"] is DBNull) ? "" : read["Password"].ToString();
item.Email = (read["Email"] is DBNull) ? "" : read["Email"].ToString();
item.Role = (read["Role"] is DBNull) ? "" : read["Role"].ToString();
item.Created_Date = (read["Created_Date"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Created_Date"].ToString());
item.Age = (read["Age"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Age"].ToString());
item.Nation = (read["Nation"] is DBNull) ? "" : read["Nation"].ToString();
item.Profile = (read["Profile"] is DBNull) ? "" : read["Profile"].ToString();
item.ImagePath = (read["ImagePath"] is DBNull) ? "" : read["ImagePath"].ToString();
item.ImageState = (read["ImageState"] is DBNull) ? false : Boolean.Parse(read["ImageState"].ToString());
item.Approval = (read["Approval"] is DBNull) ? false : Boolean.Parse(read["Approval"].ToString());
item.Kontur = (read["Kontur"] is DBNull) ? -1 : Convert.ToInt32(read["Kontur"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Users
TARİH = 10 Aralık 2010 Cuma 16:59:06


Users_ID    ----->    TextBoxMax_
FirstName    ----->    TextBoxMax_
LastName    ----->    TextBoxMax_
Password    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Gender    ----->    RadioButtonList_
Role    ----->    TextBoxMax_
Created_Date    ----->    TextBoxMax_
Age    ----->    TextBoxMax_
Nation    ----->    TextBoxMax_
Profile    ----->    TextBox_MultiLine
ImagePath    ----->    TextBoxMax_
ImageState    ----->    CheckBox_
Approval    ----->    CheckBox_
Kontur    ----->    TextBoxMax_



Users  ------------------>  TextBox_In <----------------

protected bool retrieveData( Users item, Label mesaj){
if(item != null){
try{
TextBox_Users_ID.Text = item.Users_ID.ToString();
TextBox_FirstName.Text = item.FirstName.ToString();
TextBox_LastName.Text = string.IsNullOrEmpty(item.LastName) ? String.Empty : item.LastName;
TextBox_Password.Text = item.Password.ToString();
TextBox_Email.Text = item.Email.ToString();
if (item.Gender.HasValue){
func.selectRadioButtons(RadioButtonList_Gender,item.Gender.Value.ToString());
}
TextBox_Role.Text = string.IsNullOrEmpty(item.Role) ? String.Empty : item.Role;
TextBox_Age.Text = item.Age.HasValue ?  item.Age.Value.ToString() : String.Empty;
TextBox_Nation.Text = string.IsNullOrEmpty(item.Nation) ? String.Empty : item.Nation;
TextBox_Profile.Text = string.IsNullOrEmpty(item.Profile) ? String.Empty : item.Profile;
TextBox_ImagePath.Text = string.IsNullOrEmpty(item.ImagePath) ? String.Empty : item.ImagePath;
CheckBox_ImageState.Checked = item.ImageState.HasValue ?  item.ImageState.Value : false;
CheckBox_Approval.Checked = item.Approval.HasValue ?  item.Approval.Value : false;
TextBox_Kontur.Text = item.Kontur.HasValue ?  item.Kontur.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Users  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Users">
<tr  id="tr_Users_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Users_ID" CssClass="Label_Deger" runat="server" Text="Users_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Users_ID"  CssClass="textBox_NORMAL" ValidationGroup="Users" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_FirstName" runat="server">
<td class="name">
<asp:Label ID="Label_FirstName" CssClass="Label_Deger" runat="server" Text="Adı"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_FirstName" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_LastName" runat="server">
<td class="name">
<asp:Label ID="Label_LastName" CssClass="Label_Deger" runat="server" Text="Soy adı"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_LastName" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Password" runat="server">
<td class="name">
<asp:Label ID="Label_Password" CssClass="Label_Deger" runat="server" Text="Şifre"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Password" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Email" runat="server">
<td class="name">
<asp:Label ID="Label_Email" CssClass="Label_Deger" runat="server" Text="E-Posta"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Email" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Gender" runat="server">
<td class="name">
<asp:Label ID="Label_Gender" CssClass="Label_Deger" runat="server" Text="Cinsiyet"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:RadioButtonList ID="RadioButtonList_Gender"   CssClass="radioButton_LIST" ValidationGroup="Users" runat="server"></asp:RadioButtonList>

</td>
</tr>
<tr  id="tr_Role" runat="server">
<td class="name">
<asp:Label ID="Label_Role" CssClass="Label_Deger" runat="server" Text="Sıfatı"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Role" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Age" runat="server">
<td class="name">
<asp:Label ID="Label_Age" CssClass="Label_Deger" runat="server" Text="Yaş"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Age"  CssClass="textBox_NORMAL" ValidationGroup="Users" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Nation" runat="server">
<td class="name">
<asp:Label ID="Label_Nation" CssClass="Label_Deger" runat="server" Text="Nation"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Nation" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Profile" runat="server">
<td class="name">
<asp:Label ID="Label_Profile" CssClass="Label_Deger" runat="server" Text="Profil"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Profile" TextMode="MultiLine" ValidationGroup="Users" CssClass="textBox_MULTI" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_ImagePath" runat="server">
<td class="name">
<asp:Label ID="Label_ImagePath" CssClass="Label_Deger" runat="server" Text="Resim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_ImagePath" CssClass="textBox_NORMAL" ValidationGroup="Users" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_ImageState" runat="server">
<td class="name">
<asp:Label ID="Label_ImageState" CssClass="Label_Deger" runat="server" Text="Resim Durumu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_ImageState" ValidationGroup="Users" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_Approval" runat="server">
<td class="name">
<asp:Label ID="Label_Approval" CssClass="Label_Deger" runat="server" Text="Onaylı"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_Approval" ValidationGroup="Users" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Kontur" runat="server">
<td class="name">
<asp:Label ID="Label_Kontur" CssClass="Label_Deger" runat="server" Text="Kontur"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Kontur"  CssClass="textBox_NORMAL" ValidationGroup="Users" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Users  ------------------>  TextBox_Insert <----------------

protected bool initialize(Users item,Label mesaj){
if(item != null){
try{
if(func.isInteger(TextBox_Users_ID.Text))
item.Users_ID= Convert.ToInt32(TextBox_Users_ID.Text.Trim());
item.FirstName=TextBox_FirstName.Text.Trim();
item.LastName=TextBox_LastName.Text.Trim();
item.Password=TextBox_Password.Text.Trim();
item.Email=TextBox_Email.Text.Trim();
if (RadioButtonList_Gender.SelectedItem != null){
item.Gender= char.Parse(RadioButtonList_Gender.SelectedValue);}
item.Role=TextBox_Role.Text.Trim();
//item.Created_Date=DateTime.Now;
if(func.isDateTime(TextBox_Age.Text.Trim()))
item.Age= DateTime.Parse(TextBox_Age.Text.Trim());
item.Nation=TextBox_Nation.Text.Trim();
item.Profile=func.stringCut(TextBox_Profile.Text.Trim(),0,998);
item.ImagePath=TextBox_ImagePath.Text.Trim();
item.ImageState=CheckBox_ImageState.Checked;
item.Approval=CheckBox_Approval.Checked;
if(func.isInteger(TextBox_Kontur.Text))
item.Kontur= Convert.ToInt32(TextBox_Kontur.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Users  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Users"  CssClass="Ei_Labels" runat="server">
<table class="Users">
<tr>
<td class="name">
<asp:Label ID="Label_Users_ID_1" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Users_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_FirstName_1" CssClass="db_Name"  Text="Adı" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_FirstName" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_LastName_1" CssClass="db_Name"  Text="Soy adı" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_LastName" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Password_1" CssClass="db_Name"  Text="Şifre" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Password" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Email_1" CssClass="db_Name"  Text="E-Posta" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Email" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Gender_1" CssClass="db_Name"  Text="Cinsiyet" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Gender" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Role_1" CssClass="db_Name"  Text="Sıfatı" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Role" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Created_Date_1" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Created_Date" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Age_1" CssClass="db_Name"  Text="Yaş" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Age" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Nation_1" CssClass="db_Name"  Text="Nation" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Nation" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Profile_1" CssClass="db_Name"  Text="Profil" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Profile" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_ImagePath_1" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImagePath" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_ImageState_1" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImageState" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Approval_1" CssClass="db_Name"  Text="Onaylı" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Approval" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Kontur_1" CssClass="db_Name"  Text="Kontur" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Kontur" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Users  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Users item){
Label_Users_ID.Text = item.Users_ID.ToString();
Label_FirstName.Text = item.FirstName.ToString();
Label_LastName.Text = item.LastName.HasValue ?  item.LastName.Value.ToString() : String.Empty;
Label_Password.Text = item.Password.ToString();
Label_Email.Text = item.Email.ToString();
Label_Gender.Text = item.Gender.HasValue ?  item.Gender.Value.ToString() : String.Empty;
Label_Role.Text = item.Role.HasValue ?  item.Role.Value.ToString() : String.Empty;
Label_Created_Date.Text = item.Created_Date.HasValue ?  item.Created_Date.Value.ToString() : String.Empty;
Label_Age.Text = item.Age.HasValue ?  item.Age.Value.ToString() : String.Empty;
Label_Nation.Text = item.Nation.HasValue ?  item.Nation.Value.ToString() : String.Empty;
Label_Profile.Text = item.Profile.HasValue ?  item.Profile.Value.ToString() : String.Empty;
Label_ImagePath.Text = item.ImagePath.HasValue ?  item.ImagePath.Value.ToString() : String.Empty;
Label_ImageState.Text = item.ImageState.HasValue ?  item.ImageState.Value.ToString() : String.Empty;
Label_Approval.Text = item.Approval.HasValue ?  item.Approval.Value.ToString() : String.Empty;
Label_Kontur.Text = item.Kontur.HasValue ?  item.Kontur.Value.ToString() : String.Empty;
}



Users  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_Users_ID" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
<asp:Label ID="Label_FirstName" CssClass="db_Name"  Text="Adı" runat="server"></asp:Label>
<asp:Label ID="Label_LastName" CssClass="db_Name"  Text="Soy adı" runat="server"></asp:Label>
<asp:Label ID="Label_Password" CssClass="db_Name"  Text="Şifre" runat="server"></asp:Label>
<asp:Label ID="Label_Email" CssClass="db_Name"  Text="E-Posta" runat="server"></asp:Label>
<asp:Label ID="Label_Gender" CssClass="db_Name"  Text="Cinsiyet" runat="server"></asp:Label>
<asp:Label ID="Label_Role" CssClass="db_Name"  Text="Sıfatı" runat="server"></asp:Label>
<asp:Label ID="Label_Created_Date" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
<asp:Label ID="Label_Age" CssClass="db_Name"  Text="Yaş" runat="server"></asp:Label>
<asp:Label ID="Label_Nation" CssClass="db_Name"  Text="Nation" runat="server"></asp:Label>
<asp:Label ID="Label_Profile" CssClass="db_Name"  Text="Profil" runat="server"></asp:Label>
<asp:Label ID="Label_ImagePath" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
<asp:Label ID="Label_ImageState" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
<asp:Label ID="Label_Approval" CssClass="db_Name"  Text="Onaylı" runat="server"></asp:Label>
<asp:Label ID="Label_Kontur" CssClass="db_Name"  Text="Kontur" runat="server"></asp:Label>



Users  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<%#  Eval("Users_ID")  %>
<%#  Eval("FirstName")  %>
<%#  Eval("LastName")  %>
<%#  Eval("Password")  %>
<%#  Eval("Email")  %>
<%#  Eval("Gender")  %>
<%#  Eval("Role")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Age")  %>
<%#  Eval("Nation")  %>
<%#  Eval("Profile")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("ImageState")  %>
<%#  Eval("Approval")  %>
<%#  Eval("Kontur")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Users_ID</th>
<th>FirstName</th>
<th>LastName</th>
<th>Password</th>
<th>Email</th>
<th>Gender</th>
<th>Role</th>
<th>Age</th>
<th>Nation</th>
<th>Profile</th>
<th>ImagePath</th>
<th>ImageState</th>
<th>Approval</th>
<th>Kontur</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_FirstName" cssClass="evalCss" runat="server" Text='<%#  Eval("FirstName")  %>' /></td>
<td><asp:Label ID="Label_LastName" cssClass="evalCss" runat="server" Text='<%#  Eval("LastName")  %>' /></td>
<td><asp:Label ID="Label_Password" cssClass="evalCss" runat="server" Text='<%#  Eval("Password")  %>' /></td>
<td><asp:Label ID="Label_Email" cssClass="evalCss" runat="server" Text='<%#  Eval("Email")  %>' /></td>
<td><asp:Label ID="Label_Gender" cssClass="evalCss" runat="server" Text='<%#  Eval("Gender")  %>' /></td>
<td><asp:Label ID="Label_Role" cssClass="evalCss" runat="server" Text='<%#  Eval("Role")  %>' /></td>
<td><asp:Label ID="Label_Age" cssClass="evalCss" runat="server" Text='<%#  Eval("Age")  %>' /></td>
<td><asp:Label ID="Label_Nation" cssClass="evalCss" runat="server" Text='<%#  Eval("Nation")  %>' /></td>
<td><asp:Label ID="Label_Profile" cssClass="evalCss" runat="server" Text='<%#  Eval("Profile")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Approval" cssClass="evalCss" runat="server" Text='<%#  Eval("Approval")  %>' /></td>
<td><asp:Label ID="Label_Kontur" cssClass="evalCss" runat="server" Text='<%#  Eval("Kontur")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_FirstName" cssClass="evalCss" runat="server" Text='<%#  Eval("FirstName")  %>' /></td>
<td><asp:Label ID="Label_LastName" cssClass="evalCss" runat="server" Text='<%#  Eval("LastName")  %>' /></td>
<td><asp:Label ID="Label_Password" cssClass="evalCss" runat="server" Text='<%#  Eval("Password")  %>' /></td>
<td><asp:Label ID="Label_Email" cssClass="evalCss" runat="server" Text='<%#  Eval("Email")  %>' /></td>
<td><asp:Label ID="Label_Gender" cssClass="evalCss" runat="server" Text='<%#  Eval("Gender")  %>' /></td>
<td><asp:Label ID="Label_Role" cssClass="evalCss" runat="server" Text='<%#  Eval("Role")  %>' /></td>
<td><asp:Label ID="Label_Age" cssClass="evalCss" runat="server" Text='<%#  Eval("Age")  %>' /></td>
<td><asp:Label ID="Label_Nation" cssClass="evalCss" runat="server" Text='<%#  Eval("Nation")  %>' /></td>
<td><asp:Label ID="Label_Profile" cssClass="evalCss" runat="server" Text='<%#  Eval("Profile")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Approval" cssClass="evalCss" runat="server" Text='<%#  Eval("Approval")  %>' /></td>
<td><asp:Label ID="Label_Kontur" cssClass="evalCss" runat="server" Text='<%#  Eval("Kontur")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Users_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_FirstName cssClass="evalCss" runat="server" Text='<%#  Eval("FirstName")  %>' />
</td>
<td>
<asp:Label ID="Label_LastName cssClass="evalCss" runat="server" Text='<%#  Eval("LastName")  %>' />
</td>
<td>
<asp:Label ID="Label_Password cssClass="evalCss" runat="server" Text='<%#  Eval("Password")  %>' />
</td>
<td>
<asp:Label ID="Label_Email cssClass="evalCss" runat="server" Text='<%#  Eval("Email")  %>' />
</td>
<td>
<asp:Label ID="Label_Gender cssClass="evalCss" runat="server" Text='<%#  Eval("Gender")  %>' />
</td>
<td>
<asp:Label ID="Label_Role cssClass="evalCss" runat="server" Text='<%#  Eval("Role")  %>' />
</td>
<td>
<asp:Label ID="Label_Age cssClass="evalCss" runat="server" Text='<%#  Eval("Age")  %>' />
</td>
<td>
<asp:Label ID="Label_Nation cssClass="evalCss" runat="server" Text='<%#  Eval("Nation")  %>' />
</td>
<td>
<asp:Label ID="Label_Profile cssClass="evalCss" runat="server" Text='<%#  Eval("Profile")  %>' />
</td>
<td>
<asp:Label ID="Label_ImagePath cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' />
</td>
<td>
<asp:Label ID="Label_ImageState cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' />
</td>
<td>
<asp:Label ID="Label_Approval cssClass="evalCss" runat="server" Text='<%#  Eval("Approval")  %>' />
</td>
<td>
<asp:Label ID="Label_Kontur cssClass="evalCss" runat="server" Text='<%#  Eval("Kontur")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<%#  Eval("Users_ID")  %>
<%#  Eval("FirstName")  %>
<%#  Eval("LastName")  %>
<%#  Eval("Password")  %>
<%#  Eval("Email")  %>
<%#  Eval("Gender")  %>
<%#  Eval("Role")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Age")  %>
<%#  Eval("Nation")  %>
<%#  Eval("Profile")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("ImageState")  %>
<%#  Eval("Approval")  %>
<%#  Eval("Kontur")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%#  Eval("Users_ID")  %>
<%#  Eval("FirstName")  %>
<%#  Eval("LastName")  %>
<%#  Eval("Password")  %>
<%#  Eval("Email")  %>
<%#  Eval("Gender")  %>
<%#  Eval("Role")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Age")  %>
<%#  Eval("Nation")  %>
<%#  Eval("Profile")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("ImageState")  %>
<%#  Eval("Approval")  %>
<%#  Eval("Kontur")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Users" runat="server" DataKeyNames="Users_ID" DataSourceID="SqlDataSource_Users">
<ItemTemplate>
<li class="Users">
<%#  Eval("Users_ID")  %>
<%#  Eval("FirstName")  %>
<%#  Eval("LastName")  %>
<%#  Eval("Password")  %>
<%#  Eval("Email")  %>
<%#  Eval("Gender")  %>
<%#  Eval("Role")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Age")  %>
<%#  Eval("Nation")  %>
<%#  Eval("Profile")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("ImageState")  %>
<%#  Eval("Approval")  %>
<%#  Eval("Kontur")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender,Role,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur FROM Users WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Users  ------------------>  TextBox_Resource_to_XML <----------------




Users  ------------------>  TextBox_List_XML <----------------

<word Keyword="Users_ID" Translate="Users_ID"/>
<word Keyword="FirstName" Translate="FirstName"/>
<word Keyword="LastName" Translate="LastName"/>
<word Keyword="Password" Translate="Password"/>
<word Keyword="Email" Translate="Email"/>
<word Keyword="Gender" Translate="Gender"/>
<word Keyword="Role" Translate="Role"/>
<word Keyword="Created_Date" Translate="Created_Date"/>
<word Keyword="Age" Translate="Age"/>
<word Keyword="Nation" Translate="Nation"/>
<word Keyword="Profile" Translate="Profile"/>
<word Keyword="ImagePath" Translate="ImagePath"/>
<word Keyword="ImageState" Translate="ImageState"/>
<word Keyword="Approval" Translate="Approval"/>
<word Keyword="Kontur" Translate="Kontur"/>



Users  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Users" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Users" runat="server" AllowPaging="True" DataKeyNames="Users_ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Users" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="Users_ID"  InsertVisible="False" Visible="False"  HeaderText="Users_ID" SortExpression="Users_ID" /> 
<asp:BoundField DataField="FirstName" HeaderText="Adı" SortExpression="FirstName" /> 
<asp:BoundField DataField="LastName" HeaderText="Soy adı" SortExpression="LastName" /> 
<asp:BoundField DataField="Password" HeaderText="Şifre" SortExpression="Password" /> 
<asp:BoundField DataField="Email" HeaderText="E-Posta" SortExpression="Email" /> 
<asp:BoundField DataField="Gender" HeaderText="Cinsiyet" SortExpression="Gender" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Users" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Users_ID,FirstName,LastName,Password,Email,Gender FROM Users  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Users  ------------------>  TextBox_Veri <----------------

protected void generateUsersData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Users item = new Users();
item.FirstName=Guid.NewGuid().ToString().Replace("-"," ");
item.LastName=Guid.NewGuid().ToString().Replace("-"," ");
item.Password=Guid.NewGuid().ToString().Replace("-"," ");
item.Email=Guid.NewGuid().ToString().Replace("-"," ");
item.Gender= A;
item.Role=Guid.NewGuid().ToString().Replace("-"," ");
item.Created_Date= DateTime.Now;
item.Age= DateTime.Now;
item.Nation=Guid.NewGuid().ToString().Replace("-"," ");
item.Profile=Guid.NewGuid().ToString().Replace("-"," ");
item.ImagePath=Guid.NewGuid().ToString().Replace("-"," ");
item.ImageState=true;
item.Approval=true;
item.Kontur= rand.Next(1000);
data.Userss.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Users  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE UsersInsert(
@FirstName nvarchar(50),
@LastName nvarchar(50),
@Password nvarchar(50),
@Email nvarchar(50),
@Gender char,
@Role nvarchar(50),
@Created_Date datetime,
@Age datetime,
@Nation nvarchar(50),
@Profile nvarchar(1000),
@ImagePath nvarchar(100),
@ImageState bit,
@Approval bit,
@Kontur int)
AS INSERT INTO Users(
FirstName,LastName,Password,Email,Gender,Role,Created_Date,Age,Nation,Profile,ImagePath,ImageState,Approval,Kontur) VALUES (
@FirstName,@LastName,@Password,@Email,@Gender,@Role,@Created_Date,@Age,@Nation,@Profile,@ImagePath,@ImageState,@Approval,@Kontur)
RETURN
----------------------------------------------
CREATE PROCEDURE UsersUpdate(
@Users_ID int,
@FirstName nvarchar(50),
@LastName nvarchar(50),
@Password nvarchar(50),
@Email nvarchar(50),
@Gender char,
@Role nvarchar(50),
@Created_Date datetime,
@Age datetime,
@Nation nvarchar(50),
@Profile nvarchar(1000),
@ImagePath nvarchar(100),
@ImageState bit,
@Approval bit,
@Kontur int)
AS UPDATE Users SET
FirstName = @FirstName,
LastName = @LastName,
Password = @Password,
Email = @Email,
Gender = @Gender,
Role = @Role,
Created_Date = @Created_Date,
Age = @Age,
Nation = @Nation,
Profile = @Profile,
ImagePath = @ImagePath,
ImageState = @ImageState,
Approval = @Approval,
Kontur = @Kontur
WHERE Users_ID=@Users_ID;
RETURN
----------------------------------------------
CREATE PROCEDURE UsersDelete(
@Users_ID int
)
AS DELETE FROM Users WHERE Users_ID = @Users_ID;
RETURN



Users  ------------------>  TextBox_State <----------------

Users_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;15;True;True;False;False;TextBox_Users_ID
FirstName;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;5;False;True;True;True;TextBox_FirstName
LastName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;10;False;True;True;True;TextBox_LastName
Password;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;12;False;True;True;True;TextBox_Password
Email;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;4;False;True;True;True;TextBox_Email
Gender;YES;char;1;char;radioButton_LIST;RadioButtonList_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;RadioButtonList_Gender
Role;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;14;False;False;False;False;TextBox_Role
Created_Date;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;True;3;False;False;False;False;
Age;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;1;False;False;False;False;TextBox_Age
Nation;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;11;False;False;False;False;TextBox_Nation
Profile;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;11;False;13;False;False;False;False;TextBox_Profile
ImagePath;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;7;False;False;False;False;TextBox_ImagePath
ImageState;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;13;False;8;False;False;False;False;CheckBox_ImageState
Approval;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;14;False;2;False;False;False;False;CheckBox_Approval
Kontur;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;9;False;False;False;False;TextBox_Kontur



Users  ------------------>  TextBox_InsertMethod <----------------

public void  insertUsers(UsersItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Users (FirstName, LastName, Password, Email, Gender, Role, Created_Date, Age, Nation, Profile, ImagePath, ImageState, Approval, Kontur) values (@FirstName, @LastName, @Password, @Email, @Gender, @Role, @Created_Date, @Age, @Nation, @Profile, @ImagePath, @ImageState, @Approval, @Kontur)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_UpdateMethod <----------------

public void  updateUsers(UsersItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Users SET  FirstName=@FirstName, LastName=@LastName, Password=@Password, Email=@Email, Gender=@Gender, Role=@Role, Created_Date=@Created_Date, Age=@Age, Nation=@Nation, Profile=@Profile, ImagePath=@ImagePath, ImageState=@ImageState, Approval=@Approval, Kontur=@Kontur  WHERE Users_ID= @Users_ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteUsers(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Users WHERE Users_ID= @Users_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Users  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsersWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Users WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getUsers(sql, list.ToArray());
}
public List<UsersItem> getUsers (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsers (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public UsersItem getUsers (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

UsersItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getUsersCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Users  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsers (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getAllUsersItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsersItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertUsers(UsersItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Users (FirstName, LastName, Password, Email, Gender, Role, Created_Date, Age, Nation, Profile, ImagePath, ImageState, Approval, Kontur) values (@FirstName, @LastName, @Password, @Email, @Gender, @Role, @Created_Date, @Age, @Nation, @Profile, @ImagePath, @ImageState, @Approval, @Kontur)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateUsers(UsersItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Users SET  FirstName=@FirstName, LastName=@LastName, Password=@Password, Email=@Email, Gender=@Gender, Role=@Role, Created_Date=@Created_Date, Age=@Age, Nation=@Nation, Profile=@Profile, ImagePath=@ImagePath, ImageState=@ImageState, Approval=@Approval, Kontur=@Kontur  WHERE Users_ID= @Users_ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Users  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteUsers(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Users WHERE Users_ID= @Users_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Users  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<UsersItem> getUsers (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Users  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<UsersItem> getUsers (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Users  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public UsersItem getUsers (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

UsersItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getUsersCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Users  ------------------>  TextBox_OleDbInsertMethod <----------------

public Boolean  insertUsers(UsersItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Users (FirstName, LastName, Password, Email, Gender, Role, Created_Date, Age, Nation, Profile, ImagePath, ImageState, Approval, Kontur) values (@FirstName, @LastName, @Password, @Email, @Gender, @Role, @Created_Date, @Age, @Nation, @Profile, @ImagePath, @ImageState, @Approval, @Kontur)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_OleDbUpdateMethod <----------------

public Boolean  updateUsers(UsersItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Users SET  FirstName=@FirstName, LastName=@LastName, Password=@Password, Email=@Email, Gender=@Gender, Role=@Role, Created_Date=@Created_Date, Age=@Age, Nation=@Nation, Profile=@Profile, ImagePath=@ImagePath, ImageState=@ImageState, Approval=@Approval, Kontur=@Kontur  WHERE Users_ID= @Users_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@Users_ID", myItem.Users_ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Users  ------------------>  TextBox_OleDbDeleteMethod <----------------

public Boolean  deleteUsers(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Users WHERE Users_ID= @Users_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Users  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<UsersItem> getUsers (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsersWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Users WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getUsers(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsers (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public UsersItem getUsers (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

UsersItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getUsersCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsers (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getAllUsersItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<UsersItem> getUsersItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Users  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertUsers(UsersItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Users (FirstName, LastName, Password, Email, Gender, Role, Created_Date, Age, Nation, Profile, ImagePath, ImageState, Approval, Kontur) values (@FirstName, @LastName, @Password, @Email, @Gender, @Role, @Created_Date, @Age, @Nation, @Profile, @ImagePath, @ImageState, @Approval, @Kontur)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,UsersItem item)
 {
command.Parameters.AddWithValue("@FirstName", item.FirstName);
command.Parameters.AddWithValue("@LastName", item.LastName);
command.Parameters.AddWithValue("@Password", item.Password);
command.Parameters.AddWithValue("@Email", item.Email);
command.Parameters.AddWithValue("@Gender", item.Gender);
command.Parameters.AddWithValue("@Role", item.Role);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Age", item.Age);
command.Parameters.AddWithValue("@Nation", item.Nation);
command.Parameters.AddWithValue("@Profile", item.Profile);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Approval", item.Approval);
command.Parameters.AddWithValue("@Kontur", item.Kontur);
 }




Users  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateUsers(UsersItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Users SET  FirstName=@FirstName, LastName=@LastName, Password=@Password, Email=@Email, Gender=@Gender, Role=@Role, Created_Date=@Created_Date, Age=@Age, Nation=@Nation, Profile=@Profile, ImagePath=@ImagePath, ImageState=@ImageState, Approval=@Approval, Kontur=@Kontur  WHERE Users_ID= @Users_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Users  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteUsers(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Users WHERE Users_ID= @Users_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Users  ------------------>  TextBox_OracleSelectMethod <----------------

public List<UsersItem> getUsers (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Users  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<UsersItem> getUsers (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<UsersItem> listItem = new List<UsersItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getUsersCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Users  ------------------>  TextBox_OracleSelectMethod3 <----------------

public UsersItem getUsers (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

UsersItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Users WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getUsersCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Users  ------------------>  TextBox_MyTableItem <----------------

public int Users_ID { get; set; }
public string FirstName { get; set; }
public string LastName { get; set; }
public string Password { get; set; }
public string Email { get; set; }
public char Gender { get; set; }
public string Role { get; set; }
public DateTime Created_Date { get; set; }
public DateTime Age { get; set; }
public string Nation { get; set; }
public string Profile { get; set; }
public string ImagePath { get; set; }
public Boolean ImageState { get; set; }
public Boolean Approval { get; set; }
public int Kontur { get; set; }




Users  ------------------>  TextBox2 <----------------




Users  ------------------>  TextBox_IReader <----------------

public UsersItem getUsersCollectionFromReader (IDataRecord  read)
{
UsersItem item = new UsersItem();

item.Users_ID = (read["Users_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Users_ID"].ToString());
item.FirstName = (read["FirstName"] is DBNull) ? "" : read["FirstName"].ToString();
item.LastName = (read["LastName"] is DBNull) ? "" : read["LastName"].ToString();
item.Password = (read["Password"] is DBNull) ? "" : read["Password"].ToString();
item.Email = (read["Email"] is DBNull) ? "" : read["Email"].ToString();
item.Role = (read["Role"] is DBNull) ? "" : read["Role"].ToString();
item.Created_Date = (read["Created_Date"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Created_Date"].ToString());
item.Age = (read["Age"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Age"].ToString());
item.Nation = (read["Nation"] is DBNull) ? "" : read["Nation"].ToString();
item.Profile = (read["Profile"] is DBNull) ? "" : read["Profile"].ToString();
item.ImagePath = (read["ImagePath"] is DBNull) ? "" : read["ImagePath"].ToString();
item.ImageState = (read["ImageState"] is DBNull) ? false : Boolean.Parse(read["ImageState"].ToString());
item.Approval = (read["Approval"] is DBNull) ? false : Boolean.Parse(read["Approval"].ToString());
item.Kontur = (read["Kontur"] is DBNull) ? -1 : Convert.ToInt32(read["Kontur"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Address
TARİH = 10 Aralık 2010 Cuma 17:05:45


Address_ID    ----->    TextBoxMax_
Users_ID    ----->    TextBoxMax_
City    ----->    TextBoxMax_
Town    ----->    TextBoxMax_
Street    ----->    TextBoxMax_
Kat_No    ----->    TextBoxMax_
Postal_Code    ----->    TextBoxMax_
Type    ----->    TextBoxMax_



Address  ------------------>  TextBox_In <----------------

protected bool retrieveData( Address item, Label mesaj){
if(item != null){
try{
TextBox_Address_ID.Text = item.Address_ID.ToString();
TextBox_Users_ID.Text = item.Users_ID.ToString();
TextBox_City.Text = string.IsNullOrEmpty(item.City) ? String.Empty : item.City;
TextBox_Town.Text = string.IsNullOrEmpty(item.Town) ? String.Empty : item.Town;
TextBox_Street.Text = string.IsNullOrEmpty(item.Street) ? String.Empty : item.Street;
TextBox_Kat_No.Text = item.Kat_No.HasValue ?  item.Kat_No.Value.ToString() : String.Empty;
TextBox_Postal_Code.Text = string.IsNullOrEmpty(item.Postal_Code) ? String.Empty : item.Postal_Code;
TextBox_Type.Text = string.IsNullOrEmpty(item.Type) ? String.Empty : item.Type;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Address  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Address">
<tr  id="tr_Address_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Address_ID" CssClass="Label_Deger" runat="server" Text="Address_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Address_ID"  CssClass="textBox_NORMAL" ValidationGroup="Address" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Users_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Users_ID" CssClass="Label_Deger" runat="server" Text="Users_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Users_ID"  CssClass="textBox_NORMAL" ValidationGroup="Address" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_City" runat="server">
<td class="name">
<asp:Label ID="Label_City" CssClass="Label_Deger" runat="server" Text="Şehir"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_City" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Town" runat="server">
<td class="name">
<asp:Label ID="Label_Town" CssClass="Label_Deger" runat="server" Text="Kasaba"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Town" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Street" runat="server">
<td class="name">
<asp:Label ID="Label_Street" CssClass="Label_Deger" runat="server" Text="Sokak"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Street" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Kat_No" runat="server">
<td class="name">
<asp:Label ID="Label_Kat_No" CssClass="Label_Deger" runat="server" Text="Kat No"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Kat_No"  CssClass="textBox_NORMAL" ValidationGroup="Address" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Postal_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Postal_Code" CssClass="Label_Deger" runat="server" Text="Posta Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Postal_Code" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Type" runat="server">
<td class="name">
<asp:Label ID="Label_Type" CssClass="Label_Deger" runat="server" Text="Tipi"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Type" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Address  ------------------>  TextBox_Insert <----------------

protected bool initialize(Address item,Label mesaj){
if(item != null){
try{
if(func.isInteger(TextBox_Address_ID.Text))
item.Address_ID= Convert.ToInt32(TextBox_Address_ID.Text.Trim());
if(func.isInteger(TextBox_Users_ID.Text))
item.Users_ID= Convert.ToInt32(TextBox_Users_ID.Text.Trim());
item.City=TextBox_City.Text.Trim();
item.Town=TextBox_Town.Text.Trim();
item.Street=TextBox_Street.Text.Trim();
if(func.isInteger(TextBox_Kat_No.Text))
item.Kat_No= Convert.ToInt32(TextBox_Kat_No.Text.Trim());
item.Postal_Code=TextBox_Postal_Code.Text.Trim();
item.Type=TextBox_Type.Text.Trim();
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Address  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Address"  CssClass="Ei_Labels" runat="server">
<table class="Address">
<tr>
<td class="name">
<asp:Label ID="Label_Address_ID_1" CssClass="db_Name"  Text="Address_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Address_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Users_ID_1" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Users_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_City_1" CssClass="db_Name"  Text="Şehir" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_City" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Town_1" CssClass="db_Name"  Text="Kasaba" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Town" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Street_1" CssClass="db_Name"  Text="Sokak" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Street" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Kat_No_1" CssClass="db_Name"  Text="Kat No" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Kat_No" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Postal_Code_1" CssClass="db_Name"  Text="Posta Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Postal_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Type_1" CssClass="db_Name"  Text="Tipi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Type" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Address  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Address item){
Label_Address_ID.Text = item.Address_ID.ToString();
Label_Users_ID.Text = item.Users_ID.ToString();
Label_City.Text = item.City.HasValue ?  item.City.Value.ToString() : String.Empty;
Label_Town.Text = item.Town.HasValue ?  item.Town.Value.ToString() : String.Empty;
Label_Street.Text = item.Street.HasValue ?  item.Street.Value.ToString() : String.Empty;
Label_Kat_No.Text = item.Kat_No.HasValue ?  item.Kat_No.Value.ToString() : String.Empty;
Label_Postal_Code.Text = item.Postal_Code.HasValue ?  item.Postal_Code.Value.ToString() : String.Empty;
Label_Type.Text = item.Type.HasValue ?  item.Type.Value.ToString() : String.Empty;
}



Address  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_Address_ID" CssClass="db_Name"  Text="Address_ID" runat="server"></asp:Label>
<asp:Label ID="Label_Users_ID" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
<asp:Label ID="Label_City" CssClass="db_Name"  Text="Şehir" runat="server"></asp:Label>
<asp:Label ID="Label_Town" CssClass="db_Name"  Text="Kasaba" runat="server"></asp:Label>
<asp:Label ID="Label_Street" CssClass="db_Name"  Text="Sokak" runat="server"></asp:Label>
<asp:Label ID="Label_Kat_No" CssClass="db_Name"  Text="Kat No" runat="server"></asp:Label>
<asp:Label ID="Label_Postal_Code" CssClass="db_Name"  Text="Posta Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_Type" CssClass="db_Name"  Text="Tipi" runat="server"></asp:Label>



Address  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Address_ID</th>
<th>Users_ID</th>
<th>City</th>
<th>Town</th>
<th>Street</th>
<th>Kat_No</th>
<th>Postal_Code</th>
<th>Type</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Address_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Address_ID")  %>' /></td>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_City" cssClass="evalCss" runat="server" Text='<%#  Eval("City")  %>' /></td>
<td><asp:Label ID="Label_Town" cssClass="evalCss" runat="server" Text='<%#  Eval("Town")  %>' /></td>
<td><asp:Label ID="Label_Street" cssClass="evalCss" runat="server" Text='<%#  Eval("Street")  %>' /></td>
<td><asp:Label ID="Label_Kat_No" cssClass="evalCss" runat="server" Text='<%#  Eval("Kat_No")  %>' /></td>
<td><asp:Label ID="Label_Postal_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Postal_Code")  %>' /></td>
<td><asp:Label ID="Label_Type" cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Address_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Address_ID")  %>' /></td>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_City" cssClass="evalCss" runat="server" Text='<%#  Eval("City")  %>' /></td>
<td><asp:Label ID="Label_Town" cssClass="evalCss" runat="server" Text='<%#  Eval("Town")  %>' /></td>
<td><asp:Label ID="Label_Street" cssClass="evalCss" runat="server" Text='<%#  Eval("Street")  %>' /></td>
<td><asp:Label ID="Label_Kat_No" cssClass="evalCss" runat="server" Text='<%#  Eval("Kat_No")  %>' /></td>
<td><asp:Label ID="Label_Postal_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Postal_Code")  %>' /></td>
<td><asp:Label ID="Label_Type" cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Address_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Address_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_Users_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_City cssClass="evalCss" runat="server" Text='<%#  Eval("City")  %>' />
</td>
<td>
<asp:Label ID="Label_Town cssClass="evalCss" runat="server" Text='<%#  Eval("Town")  %>' />
</td>
<td>
<asp:Label ID="Label_Street cssClass="evalCss" runat="server" Text='<%#  Eval("Street")  %>' />
</td>
<td>
<asp:Label ID="Label_Kat_No cssClass="evalCss" runat="server" Text='<%#  Eval("Kat_No")  %>' />
</td>
<td>
<asp:Label ID="Label_Postal_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Postal_Code")  %>' />
</td>
<td>
<asp:Label ID="Label_Type cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<li class="Address">
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_Resource_to_XML <----------------




Address  ------------------>  TextBox_List_XML <----------------

<word Keyword="Address_ID" Translate="Address_ID"/>
<word Keyword="Users_ID" Translate="Users_ID"/>
<word Keyword="City" Translate="City"/>
<word Keyword="Town" Translate="Town"/>
<word Keyword="Street" Translate="Street"/>
<word Keyword="Kat_No" Translate="Kat_No"/>
<word Keyword="Postal_Code" Translate="Postal_Code"/>
<word Keyword="Type" Translate="Type"/>



Address  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Address" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Address" runat="server" AllowPaging="True" DataKeyNames="Address_ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Address" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="Address_ID"  InsertVisible="False" Visible="False"  HeaderText="Address_ID" SortExpression="Address_ID" /> 
<asp:BoundField DataField="Users_ID"  InsertVisible="False" Visible="False"  HeaderText="Users_ID" SortExpression="Users_ID" /> 
<asp:BoundField DataField="City" HeaderText="Şehir" SortExpression="City" /> 
<asp:BoundField DataField="Town" HeaderText="Kasaba" SortExpression="Town" /> 
<asp:BoundField DataField="Street" HeaderText="Sokak" SortExpression="Street" /> 
<asp:BoundField DataField="Kat_No" HeaderText="Kat No" SortExpression="Kat_No" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No FROM Address  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Address  ------------------>  TextBox_Veri <----------------

protected void generateAddressData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Address item = new Address();
//item.Users_ID= 1;
item.City=Guid.NewGuid().ToString().Replace("-"," ");
item.Town=Guid.NewGuid().ToString().Replace("-"," ");
item.Street=Guid.NewGuid().ToString().Replace("-"," ");
item.Kat_No= rand.Next(1000);
item.Postal_Code=Guid.NewGuid().ToString().Replace("-"," ");
item.Type=Guid.NewGuid().ToString().Replace("-"," ");
data.Addresss.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Address  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE AddressInsert(
@Users_ID int,
@City nvarchar(50),
@Town nvarchar(50),
@Street nvarchar(50),
@Kat_No int,
@Postal_Code nvarchar(50),
@Type nvarchar(50))
AS INSERT INTO Address(
Users_ID,City,Town,Street,Kat_No,Postal_Code,Type) VALUES (
@Users_ID,@City,@Town,@Street,@Kat_No,@Postal_Code,@Type)
RETURN
----------------------------------------------
CREATE PROCEDURE AddressUpdate(
@Address_ID int,
@Users_ID int,
@City nvarchar(50),
@Town nvarchar(50),
@Street nvarchar(50),
@Kat_No int,
@Postal_Code nvarchar(50),
@Type nvarchar(50))
AS UPDATE Address SET
Users_ID = @Users_ID,
City = @City,
Town = @Town,
Street = @Street,
Kat_No = @Kat_No,
Postal_Code = @Postal_Code,
Type = @Type
WHERE Address_ID=@Address_ID;
RETURN
----------------------------------------------
CREATE PROCEDURE AddressDelete(
@Address_ID int
)
AS DELETE FROM Address WHERE Address_ID = @Address_ID;
RETURN



Address  ------------------>  TextBox_State <----------------

Address_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;False;False;TextBox_Address_ID
Users_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;8;False;True;False;False;TextBox_Users_ID
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;2;False;True;True;True;TextBox_City
Town;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;6;False;True;True;True;TextBox_Town
Street;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Street
Kat_No;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;3;False;True;True;True;TextBox_Kat_No
Postal_Code;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;4;False;False;False;False;TextBox_Postal_Code
Type;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;7;False;False;False;False;TextBox_Type



Address  ------------------>  TextBox_InsertMethod <----------------

public void  insertAddress(AddressItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_UpdateMethod <----------------

public void  updateAddress(AddressItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteAddress(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Address  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Address WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getAddress(sql, list.ToArray());
}
public List<AddressItem> getAddress (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public AddressItem getAddress (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Address  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAllAddressItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertAddress(AddressItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateAddress(AddressItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteAddress(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<AddressItem> getAddress (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Address  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<AddressItem> getAddress (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Address  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public AddressItem getAddress (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Address  ------------------>  TextBox_OleDbInsertMethod <----------------

public Boolean  insertAddress(AddressItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_OleDbUpdateMethod <----------------

public Boolean  updateAddress(AddressItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@Address_ID", myItem.Address_ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OleDbDeleteMethod <----------------

public Boolean  deleteAddress(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<AddressItem> getAddress (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Address WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getAddress(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public AddressItem getAddress (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAllAddressItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertAddress(AddressItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateAddress(AddressItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Update Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Address  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteAddress(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Address  ------------------>  TextBox_OracleSelectMethod <----------------

public List<AddressItem> getAddress (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<AddressItem> getAddress (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Address  ------------------>  TextBox_OracleSelectMethod3 <----------------

public AddressItem getAddress (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Address  ------------------>  TextBox_MyTableItem <----------------

public int Address_ID { get; set; }
public int Users_ID { get; set; }
public string City { get; set; }
public string Town { get; set; }
public string Street { get; set; }
public int Kat_No { get; set; }
public string Postal_Code { get; set; }
public string Type { get; set; }




Address  ------------------>  TextBox2 <----------------




Address  ------------------>  TextBox_IReader <----------------

public AddressItem getAddressCollectionFromReader (IDataRecord  read)
{
AddressItem item = new AddressItem();

item.Address_ID = (read["Address_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Address_ID"].ToString());
item.Users_ID = (read["Users_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Users_ID"].ToString());
item.City = (read["City"] is DBNull) ? "" : read["City"].ToString();
item.Town = (read["Town"] is DBNull) ? "" : read["Town"].ToString();
item.Street = (read["Street"] is DBNull) ? "" : read["Street"].ToString();
item.Kat_No = (read["Kat_No"] is DBNull) ? -1 : Convert.ToInt32(read["Kat_No"].ToString());
item.Postal_Code = (read["Postal_Code"] is DBNull) ? "" : read["Postal_Code"].ToString();
item.Type = (read["Type"] is DBNull) ? "" : read["Type"].ToString();
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Banner
TARİH = 10 Aralık 2010 Cuma 17:09:18


Banner_ID    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Short_Desc    ----->    TextBoxMax_
Position    ----->    TextBoxMax_
Link    ----->    TextBoxMax_
File_Path    ----->    TextBoxMax_
Model    ----->    TextBoxMax_
Mod    ----->    TextBoxMax_
Width    ----->    TextBoxMax_
Height    ----->    TextBoxMax_
State    ----->    CheckBox_
Ordering    ----->    TextBoxMax_
Created_Date    ----->    TextBoxMax_
ImageState    ----->    CheckBox_
Lang    ----->    TextBoxMax_
Mod_ID    ----->    TextBoxMax_



Banner  ------------------>  TextBox_In <----------------

protected bool retrieveData( Banner item, Label mesaj){
if(item != null){
try{
TextBox_Banner_ID.Text = item.Banner_ID.ToString();
TextBox_Name.Text = string.IsNullOrEmpty(item.Name) ? String.Empty : item.Name;
TextBox_Short_Desc.Text = string.IsNullOrEmpty(item.Short_Desc) ? String.Empty : item.Short_Desc;
TextBox_Position.Text = string.IsNullOrEmpty(item.Position) ? String.Empty : item.Position;
TextBox_Link.Text = string.IsNullOrEmpty(item.Link) ? String.Empty : item.Link;
TextBox_File_Path.Text = string.IsNullOrEmpty(item.File_Path) ? String.Empty : item.File_Path;
TextBox_Model.Text = item.Model.HasValue ?  item.Model.Value.ToString() : String.Empty;
TextBox_Mod.Text = string.IsNullOrEmpty(item.Mod) ? String.Empty : item.Mod;
TextBox_Width.Text = item.Width.HasValue ?  item.Width.Value.ToString() : String.Empty;
TextBox_Height.Text = item.Height.HasValue ?  item.Height.Value.ToString() : String.Empty;
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
TextBox_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
CheckBox_ImageState.Checked = item.ImageState.HasValue ?  item.ImageState.Value : false;
TextBox_Lang.Text = string.IsNullOrEmpty(item.Lang) ? String.Empty : item.Lang;
TextBox_Mod_ID.Text = item.Mod_ID.HasValue ?  item.Mod_ID.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Banner  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Banner">
<tr  id="tr_Banner_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Banner_ID" CssClass="Label_Deger" runat="server" Text="Banner_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Banner_ID"  CssClass="textBox_NORMAL" ValidationGroup="Banner" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="Banner" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Short_Desc" runat="server">
<td class="name">
<asp:Label ID="Label_Short_Desc" CssClass="Label_Deger" runat="server" Text="Kısa Açıklama"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Short_Desc" CssClass="textBox_NORMAL" ValidationGroup="Banner" MaxLength="500" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Position" runat="server">
<td class="name">
<asp:Label ID="Label_Position" CssClass="Label_Deger" runat="server" Text="Position"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Position" CssClass="textBox_NORMAL" ValidationGroup="Banner" MaxLength="10" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Link" runat="server">
<td class="name">
<asp:Label ID="Label_Link" CssClass="Label_Deger" runat="server" Text="Link"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Link" CssClass="textBox_NORMAL" ValidationGroup="Banner" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_File_Path" runat="server">
<td class="name">
<asp:Label ID="Label_File_Path" CssClass="Label_Deger" runat="server" Text="File_Path"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_File_Path" CssClass="textBox_NORMAL" ValidationGroup="Banner" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Model" runat="server">
<td class="name">
<asp:Label ID="Label_Model" CssClass="Label_Deger" runat="server" Text="Model"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Model"  CssClass="textBox_NORMAL" ValidationGroup="Banner" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Mod" runat="server">
<td class="name">
<asp:Label ID="Label_Mod" CssClass="Label_Deger" runat="server" Text="Mod"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Mod" CssClass="textBox_NORMAL" ValidationGroup="Banner" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Width" runat="server">
<td class="name">
<asp:Label ID="Label_Width" CssClass="Label_Deger" runat="server" Text="Genişlik"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Width"  CssClass="textBox_NORMAL" ValidationGroup="Banner" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Height" runat="server">
<td class="name">
<asp:Label ID="Label_Height" CssClass="Label_Deger" runat="server" Text="Yükseklik"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Height"  CssClass="textBox_NORMAL" ValidationGroup="Banner" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Banner" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Banner" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_ImageState" runat="server">
<td class="name">
<asp:Label ID="Label_ImageState" CssClass="Label_Deger" runat="server" Text="Resim Durumu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_ImageState" ValidationGroup="Banner" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Lang" runat="server">
<td class="name">
<asp:Label ID="Label_Lang" CssClass="Label_Deger" runat="server" Text="Dil"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Lang" CssClass="textBox_NORMAL" ValidationGroup="Banner" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Mod_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Mod_ID" CssClass="Label_Deger" runat="server" Text="Mod_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Mod_ID"  CssClass="textBox_NORMAL" ValidationGroup="Banner" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Banner  ------------------>  TextBox_Insert <----------------

protected bool initialize(Banner item,Label mesaj){
if(item != null){
try{
if(func.isInteger(TextBox_Banner_ID.Text))
item.Banner_ID= Convert.ToInt32(TextBox_Banner_ID.Text.Trim());
item.Name=TextBox_Name.Text.Trim();
item.Short_Desc=TextBox_Short_Desc.Text.Trim();
item.Position=TextBox_Position.Text.Trim();
item.Link=TextBox_Link.Text.Trim();
item.File_Path=TextBox_File_Path.Text.Trim();
if(func.isInteger(TextBox_Model.Text))
item.Model= Convert.ToInt32(TextBox_Model.Text.Trim());
item.Mod=TextBox_Mod.Text.Trim();
if(func.isInteger(TextBox_Width.Text))
item.Width= Convert.ToInt32(TextBox_Width.Text.Trim());
if(func.isInteger(TextBox_Height.Text))
item.Height= Convert.ToInt32(TextBox_Height.Text.Trim());
item.State=CheckBox_State.Checked;
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
//item.Created_Date=DateTime.Now;
item.ImageState=CheckBox_ImageState.Checked;
item.Lang=TextBox_Lang.Text.Trim();
if(func.isInteger(TextBox_Mod_ID.Text))
item.Mod_ID= Convert.ToInt32(TextBox_Mod_ID.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Banner  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Banner"  CssClass="Ei_Labels" runat="server">
<table class="Banner">
<tr>
<td class="name">
<asp:Label ID="Label_Banner_ID_1" CssClass="db_Name"  Text="Banner_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Banner_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Short_Desc_1" CssClass="db_Name"  Text="Kısa Açıklama" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Short_Desc" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Position_1" CssClass="db_Name"  Text="Position" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Position" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Link_1" CssClass="db_Name"  Text="Link" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Link" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_File_Path_1" CssClass="db_Name"  Text="File_Path" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_File_Path" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Model_1" CssClass="db_Name"  Text="Model" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Model" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Mod_1" CssClass="db_Name"  Text="Mod" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Mod" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Width_1" CssClass="db_Name"  Text="Genişlik" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Width" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Height_1" CssClass="db_Name"  Text="Yükseklik" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Height" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Created_Date_1" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Created_Date" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_ImageState_1" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImageState" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Lang_1" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Lang" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Mod_ID_1" CssClass="db_Name"  Text="Mod_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Mod_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Banner  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Banner item){
Label_Banner_ID.Text = item.Banner_ID.ToString();
Label_Name.Text = item.Name.HasValue ?  item.Name.Value.ToString() : String.Empty;
Label_Short_Desc.Text = item.Short_Desc.HasValue ?  item.Short_Desc.Value.ToString() : String.Empty;
Label_Position.Text = item.Position.HasValue ?  item.Position.Value.ToString() : String.Empty;
Label_Link.Text = item.Link.HasValue ?  item.Link.Value.ToString() : String.Empty;
Label_File_Path.Text = item.File_Path.HasValue ?  item.File_Path.Value.ToString() : String.Empty;
Label_Model.Text = item.Model.HasValue ?  item.Model.Value.ToString() : String.Empty;
Label_Mod.Text = item.Mod.HasValue ?  item.Mod.Value.ToString() : String.Empty;
Label_Width.Text = item.Width.HasValue ?  item.Width.Value.ToString() : String.Empty;
Label_Height.Text = item.Height.HasValue ?  item.Height.Value.ToString() : String.Empty;
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
Label_Created_Date.Text = item.Created_Date.HasValue ?  item.Created_Date.Value.ToString() : String.Empty;
Label_ImageState.Text = item.ImageState.HasValue ?  item.ImageState.Value.ToString() : String.Empty;
Label_Lang.Text = item.Lang.HasValue ?  item.Lang.Value.ToString() : String.Empty;
Label_Mod_ID.Text = item.Mod_ID.HasValue ?  item.Mod_ID.Value.ToString() : String.Empty;
}



Banner  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_Banner_ID" CssClass="db_Name"  Text="Banner_ID" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_Short_Desc" CssClass="db_Name"  Text="Kısa Açıklama" runat="server"></asp:Label>
<asp:Label ID="Label_Position" CssClass="db_Name"  Text="Position" runat="server"></asp:Label>
<asp:Label ID="Label_Link" CssClass="db_Name"  Text="Link" runat="server"></asp:Label>
<asp:Label ID="Label_File_Path" CssClass="db_Name"  Text="File_Path" runat="server"></asp:Label>
<asp:Label ID="Label_Model" CssClass="db_Name"  Text="Model" runat="server"></asp:Label>
<asp:Label ID="Label_Mod" CssClass="db_Name"  Text="Mod" runat="server"></asp:Label>
<asp:Label ID="Label_Width" CssClass="db_Name"  Text="Genişlik" runat="server"></asp:Label>
<asp:Label ID="Label_Height" CssClass="db_Name"  Text="Yükseklik" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
<asp:Label ID="Label_Created_Date" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
<asp:Label ID="Label_ImageState" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
<asp:Label ID="Label_Lang" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>
<asp:Label ID="Label_Mod_ID" CssClass="db_Name"  Text="Mod_ID" runat="server"></asp:Label>



Banner  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Banner" runat="server" DataKeyNames="Banner_ID" DataSourceID="SqlDataSource_Banner">
<ItemTemplate>
<%#  Eval("Banner_ID")  %>
<%#  Eval("Name")  %>
<%#  Eval("Short_Desc")  %>
<%#  Eval("Position")  %>
<%#  Eval("Link")  %>
<%#  Eval("File_Path")  %>
<%#  Eval("Model")  %>
<%#  Eval("Mod")  %>
<%#  Eval("Width")  %>
<%#  Eval("Height")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Mod_ID")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Banner" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Banner_ID,Name,Short_Desc,Position,Link,File_Path,Model,Mod,Width,Height,State,Ordering,ImageState,Lang,Mod_ID FROM Banner WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Banner  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Banner" runat="server" DataKeyNames="Banner_ID" DataSourceID="SqlDataSource_Banner">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Banner_ID</th>
<th>Name</th>
<th>Short_Desc</th>
<th>Position</th>
<th>Link</th>
<th>File_Path</th>
<th>Model</th>
<th>Mod</th>
<th>Width</th>
<th>Height</th>
<th>State</th>
<th>Ordering</th>
<th>ImageState</th>
<th>Lang</th>
<th>Mod_ID</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Banner_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Banner_ID")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_Short_Desc" cssClass="evalCss" runat="server" Text='<%#  Eval("Short_Desc")  %>' /></td>
<td><asp:Label ID="Label_Position" cssClass="evalCss" runat="server" Text='<%#  Eval("Position")  %>' /></td>
<td><asp:Label ID="Label_Link" cssClass="evalCss" runat="server" Text='<%#  Eval("Link")  %>' /></td>
<td><asp:Label ID="Label_File_Path" cssClass="evalCss" runat="server" Text='<%#  Eval("File_Path")  %>' /></td>
<td><asp:Label ID="Label_Model" cssClass="evalCss" runat="server" Text='<%#  Eval("Model")  %>' /></td>
<td><asp:Label ID="Label_Mod" cssClass="evalCss" runat="server" Text='<%#  Eval("Mod")  %>' /></td>
<td><asp:Label ID="Label_Width" cssClass="evalCss" runat="server" Text='<%#  Eval("Width")  %>' /></td>
<td><asp:Label ID="Label_Height" cssClass="evalCss" runat="server" Text='<%#  Eval("Height")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
<td><asp:Label ID="Label_Mod_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Mod_ID")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Banner_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Banner_ID")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_Short_Desc" cssClass="evalCss" runat="server" Text='<%#  Eval("Short_Desc")  %>' /></td>
<td><asp:Label ID="Label_Position" cssClass="evalCss" runat="server" Text='<%#  Eval("Position")  %>' /></td>
<td><asp:Label ID="Label_Link" cssClass="evalCss" runat="server" Text='<%#  Eval("Link")  %>' /></td>
<td><asp:Label ID="Label_File_Path" cssClass="evalCss" runat="server" Text='<%#  Eval("File_Path")  %>' /></td>
<td><asp:Label ID="Label_Model" cssClass="evalCss" runat="server" Text='<%#  Eval("Model")  %>' /></td>
<td><asp:Label ID="Label_Mod" cssClass="evalCss" runat="server" Text='<%#  Eval("Mod")  %>' /></td>
<td><asp:Label ID="Label_Width" cssClass="evalCss" runat="server" Text='<%#  Eval("Width")  %>' /></td>
<td><asp:Label ID="Label_Height" cssClass="evalCss" runat="server" Text='<%#  Eval("Height")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
<td><asp:Label ID="Label_Mod_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Mod_ID")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Banner" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Banner_ID,Name,Short_Desc,Position,Link,File_Path,Model,Mod,Width,Height,State,Ordering,ImageState,Lang,Mod_ID FROM Banner WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Banner  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Banner" runat="server" DataKeyNames="Banner_ID" DataSourceID="SqlDataSource_Banner">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Banner_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Banner_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_Short_Desc cssClass="evalCss" runat="server" Text='<%#  Eval("Short_Desc")  %>' />
</td>
<td>
<asp:Label ID="Label_Position cssClass="evalCss" runat="server" Text='<%#  Eval("Position")  %>' />
</td>
<td>
<asp:Label ID="Label_Link cssClass="evalCss" runat="server" Text='<%#  Eval("Link")  %>' />
</td>
<td>
<asp:Label ID="Label_File_Path cssClass="evalCss" runat="server" Text='<%#  Eval("File_Path")  %>' />
</td>
<td>
<asp:Label ID="Label_Model cssClass="evalCss" runat="server" Text='<%#  Eval("Model")  %>' />
</td>
<td>
<asp:Label ID="Label_Mod cssClass="evalCss" runat="server" Text='<%#  Eval("Mod")  %>' />
</td>
<td>
<asp:Label ID="Label_Width cssClass="evalCss" runat="server" Text='<%#  Eval("Width")  %>' />
</td>
<td>
<asp:Label ID="Label_Height cssClass="evalCss" runat="server" Text='<%#  Eval("Height")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
<td>
<asp:Label ID="Label_ImageState cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' />
</td>
<td>
<asp:Label ID="Label_Lang cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' />
</td>
<td>
<asp:Label ID="Label_Mod_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Mod_ID")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Banner" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Banner_ID,Name,Short_Desc,Position,Link,File_Path,Model,Mod,Width,Height,State,Ordering,ImageState,Lang,Mod_ID FROM Banner WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Banner  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Banner" runat="server" DataKeyNames="Banner_ID" DataSourceID="SqlDataSource_Banner">
<ItemTemplate>
<%#  Eval("Banner_ID")  %>
<%#  Eval("Name")  %>
<%#  Eval("Short_Desc")  %>
<%#  Eval("Position")  %>
<%#  Eval("Link")  %>
<%#  Eval("File_Path")  %>
<%#  Eval("Model")  %>
<%#  Eval("Mod")  %>
<%#  Eval("Width")  %>
<%#  Eval("Height")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Mod_ID")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Banner" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Banner_ID,Name,Short_Desc,Position,Link,File_Path,Model,Mod,Width,Height,State,Ordering,ImageState,Lang,Mod_ID FROM Banner WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Banner  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Banner" runat="server" DataKeyNames="Banner_ID" DataSourceID="SqlDataSource_Banner">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%#  Eval("Banner_ID")  %>
<%#  Eval("Name")  %>
<%#  Eval("Short_Desc")  %>
<%#  Eval("Position")  %>
<%#  Eval("Link")  %>
<%#  Eval("File_Path")  %>
<%#  Eval("Model")  %>
<%#  Eval("Mod")  %>
<%#  Eval("Width")  %>
<%#  Eval("Height")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Mod_ID")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Banner" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Banner_ID,Name,Short_Desc,Position,Link,File_Path,Model,Mod,Width,Height,State,Ordering,ImageState,Lang,Mod_ID FROM Banner WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Banner  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Banner" runat="server" DataKeyNames="Banner_ID" DataSourceID="SqlDataSource_Banner">
<ItemTemplate>
<li class="Banner">
<%#  Eval("Banner_ID")  %>
<%#  Eval("Name")  %>
<%#  Eval("Short_Desc")  %>
<%#  Eval("Position")  %>
<%#  Eval("Link")  %>
<%#  Eval("File_Path")  %>
<%#  Eval("Model")  %>
<%#  Eval("Mod")  %>
<%#  Eval("Width")  %>
<%#  Eval("Height")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Mod_ID")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Banner" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Banner_ID,Name,Short_Desc,Position,Link,File_Path,Model,Mod,Width,Height,State,Ordering,ImageState,Lang,Mod_ID FROM Banner WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Banner  ------------------>  TextBox_Resource_to_XML <----------------




Banner  ------------------>  TextBox_List_XML <----------------

<word Keyword="Banner_ID" Translate="Banner_ID"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="Short_Desc" Translate="Short_Desc"/>
<word Keyword="Position" Translate="Position"/>
<word Keyword="Link" Translate="Link"/>
<word Keyword="File_Path" Translate="File_Path"/>
<word Keyword="Model" Translate="Model"/>
<word Keyword="Mod" Translate="Mod"/>
<word Keyword="Width" Translate="Width"/>
<word Keyword="Height" Translate="Height"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Ordering" Translate="Ordering"/>
<word Keyword="Created_Date" Translate="Created_Date"/>
<word Keyword="ImageState" Translate="ImageState"/>
<word Keyword="Lang" Translate="Lang"/>
<word Keyword="Mod_ID" Translate="Mod_ID"/>



Banner  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Banner" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Banner" runat="server" AllowPaging="True" DataKeyNames="Banner_ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Banner" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="Banner_ID"  InsertVisible="False" Visible="False"  HeaderText="Banner_ID" SortExpression="Banner_ID" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:BoundField DataField="Short_Desc" HeaderText="Kısa Açıklama" SortExpression="Short_Desc" /> 
<asp:BoundField DataField="Position" HeaderText="Position" SortExpression="Position" /> 
<asp:BoundField DataField="Link" HeaderText="Link" SortExpression="Link" /> 
<asp:BoundField DataField="File_Path" HeaderText="File_Path" SortExpression="File_Path" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Banner" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Banner_ID,Name,Short_Desc,Position,Link,File_Path FROM Banner  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Banner  ------------------>  TextBox_Veri <----------------

protected void generateBannerData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Banner item = new Banner();
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.Short_Desc=Guid.NewGuid().ToString().Replace("-"," ");
item.Position=Guid.NewGuid().ToString().Replace("-"," ");
item.Link=Guid.NewGuid().ToString().Replace("-"," ");
item.File_Path=Guid.NewGuid().ToString().Replace("-"," ");
item.Model= rand.Next(1000);
item.Mod=Guid.NewGuid().ToString().Replace("-"," ");
item.Width= rand.Next(1000);
item.Height= rand.Next(1000);
item.State=true;
item.Ordering= rand.Next(1000);
item.Created_Date= DateTime.Now;
item.ImageState=true;
item.Lang=Guid.NewGuid().ToString().Replace("-"," ");
//item.Mod_ID= 1;
data.Banners.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Banner  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE BannerInsert(
@Name nvarchar(100),
@Short_Desc nvarchar(500),
@Position nvarchar(10),
@Link nvarchar(100),
@File_Path nvarchar(100),
@Model int,
@Mod nvarchar(50),
@Width int,
@Height int,
@State bit,
@Ordering int,
@Created_Date datetime,
@ImageState bit,
@Lang nvarchar(50),
@Mod_ID int)
AS INSERT INTO Banner(
Name,Short_Desc,Position,Link,File_Path,Model,Mod,Width,Height,State,Ordering,Created_Date,ImageState,Lang,Mod_ID) VALUES (
@Name,@Short_Desc,@Position,@Link,@File_Path,@Model,@Mod,@Width,@Height,@State,@Ordering,@Created_Date,@ImageState,@Lang,@Mod_ID)
RETURN
----------------------------------------------
CREATE PROCEDURE BannerUPDATE(
@Banner_ID int,
@Name nvarchar(100),
@Short_Desc nvarchar(500),
@Position nvarchar(10),
@Link nvarchar(100),
@File_Path nvarchar(100),
@Model int,
@Mod nvarchar(50),
@Width int,
@Height int,
@State bit,
@Ordering int,
@Created_Date datetime,
@ImageState bit,
@Lang nvarchar(50),
@Mod_ID int)
AS UPDATE Banner SET
Name = @Name,
Short_Desc = @Short_Desc,
Position = @Position,
Link = @Link,
File_Path = @File_Path,
Model = @Model,
Mod = @Mod,
Width = @Width,
Height = @Height,
State = @State,
Ordering = @Ordering,
Created_Date = @Created_Date,
ImageState = @ImageState,
Lang = @Lang,
Mod_ID = @Mod_ID
WHERE Banner_ID=@Banner_ID;
RETURN
----------------------------------------------
CREATE PROCEDURE BannerDelete(
@Banner_ID int
)
AS DELETE FROM Banner WHERE Banner_ID = @Banner_ID;
RETURN



Banner  ------------------>  TextBox_State <----------------

Banner_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;False;False;TextBox_Banner_ID
Name;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;11;False;True;True;True;TextBox_Name
Short_Desc;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;14;False;True;True;True;TextBox_Short_Desc
Position;YES;nvarchar;10;nvarchar(10);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;13;False;True;True;True;TextBox_Position
Link;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;7;False;True;True;True;TextBox_Link
File_Path;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;3;False;True;True;True;TextBox_File_Path
Model;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;10;False;False;False;False;TextBox_Model
Mod;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_Mod
Width;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;16;False;False;False;False;TextBox_Width
Height;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;4;False;False;False;False;TextBox_Height
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;11;False;15;False;False;False;False;CheckBox_State
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Ordering
Created_Date;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;True;2;False;False;False;False;
ImageState;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;14;False;5;False;False;False;False;CheckBox_ImageState
Lang;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;6;False;False;False;False;TextBox_Lang
Mod_ID;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;9;False;False;False;False;TextBox_Mod_ID



Banner  ------------------>  TextBox_InsertMethod <----------------

public void  insertBanner(BannerItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Banner (Name, Short_Desc, Position, Link, File_Path, Model, Mod, Width, Height, State, Ordering, Created_Date, ImageState, Lang, Mod_ID) values (@Name, @Short_Desc, @Position, @Link, @File_Path, @Model, @Mod, @Width, @Height, @State, @Ordering, @Created_Date, @ImageState, @Lang, @Mod_ID)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,BannerItem item)
 {
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Short_Desc", item.Short_Desc);
command.Parameters.AddWithValue("@Position", item.Position);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@File_Path", item.File_Path);
command.Parameters.AddWithValue("@Model", item.Model);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@Width", item.Width);
command.Parameters.AddWithValue("@Height", item.Height);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Mod_ID", item.Mod_ID);
 }




Banner  ------------------>  TextBox_UpdateMethod <----------------

public void  updateBanner(BannerItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Banner SET  Name=@Name, Short_Desc=@Short_Desc, Position=@Position, Link=@Link, File_Path=@File_Path, Model=@Model, Mod=@Mod, Width=@Width, Height=@Height, State=@State, Ordering=@Ordering, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Mod_ID=@Mod_ID  WHERE Banner_ID= @Banner_ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,BannerItem item)
 {
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Short_Desc", item.Short_Desc);
command.Parameters.AddWithValue("@Position", item.Position);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@File_Path", item.File_Path);
command.Parameters.AddWithValue("@Model", item.Model);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@Width", item.Width);
command.Parameters.AddWithValue("@Height", item.Height);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Mod_ID", item.Mod_ID);
 }




Banner  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteBanner(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Banner WHERE Banner_ID= @Banner_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Banner  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getBannerWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Banner WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getBanner(sql, list.ToArray());
}
public List<BannerItem> getBanner (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Banner  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getBanner (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Banner  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public BannerItem getBanner (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

BannerItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Banner WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getBannerCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Banner  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getBanner (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Banner  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getAllBannerItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Banner";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Banner  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getBannerItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Banner WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Banner  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertBanner(BannerItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Banner (Name, Short_Desc, Position, Link, File_Path, Model, Mod, Width, Height, State, Ordering, Created_Date, ImageState, Lang, Mod_ID) values (@Name, @Short_Desc, @Position, @Link, @File_Path, @Model, @Mod, @Width, @Height, @State, @Ordering, @Created_Date, @ImageState, @Lang, @Mod_ID)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,BannerItem item)
 {
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Short_Desc", item.Short_Desc);
command.Parameters.AddWithValue("@Position", item.Position);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@File_Path", item.File_Path);
command.Parameters.AddWithValue("@Model", item.Model);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@Width", item.Width);
command.Parameters.AddWithValue("@Height", item.Height);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Mod_ID", item.Mod_ID);
 }




Banner  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateBanner(BannerItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Banner SET  Name=@Name, Short_Desc=@Short_Desc, Position=@Position, Link=@Link, File_Path=@File_Path, Model=@Model, Mod=@Mod, Width=@Width, Height=@Height, State=@State, Ordering=@Ordering, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Mod_ID=@Mod_ID  WHERE Banner_ID= @Banner_ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Banner  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteBanner(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Banner WHERE Banner_ID= @Banner_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Banner  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<BannerItem> getBanner (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Banner  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<BannerItem> getBanner (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Banner  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public BannerItem getBanner (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

BannerItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Banner WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getBannerCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Banner  ------------------>  TextBox_OleDbInsertMethod <----------------

public Boolean  insertBanner(BannerItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"Insert into Banner (Name, Short_Desc, Position, Link, File_Path, Model, Mod, Width, Height, State, Ordering, Created_Date, ImageState, Lang, Mod_ID) values (@Name, @Short_Desc, @Position, @Link, @File_Path, @Model, @Mod, @Width, @Height, @State, @Ordering, @Created_Date, @ImageState, @Lang, @Mod_ID)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,BannerItem item)
 {
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Short_Desc", item.Short_Desc);
command.Parameters.AddWithValue("@Position", item.Position);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@File_Path", item.File_Path);
command.Parameters.AddWithValue("@Model", item.Model);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@Width", item.Width);
command.Parameters.AddWithValue("@Height", item.Height);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Mod_ID", item.Mod_ID);
 }




Banner  ------------------>  TextBox_OleDbUpdateMethod <----------------

public Boolean  updateBanner(BannerItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Banner SET  Name=@Name, Short_Desc=@Short_Desc, Position=@Position, Link=@Link, File_Path=@File_Path, Model=@Model, Mod=@Mod, Width=@Width, Height=@Height, State=@State, Ordering=@Ordering, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Mod_ID=@Mod_ID  WHERE Banner_ID= @Banner_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@Banner_ID", myItem.Banner_ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Banner  ------------------>  TextBox_OleDbDeleteMethod <----------------

public Boolean  deleteBanner(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Banner WHERE Banner_ID= @Banner_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Banner  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<BannerItem> getBanner (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Banner  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getBannerWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Banner WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getBanner(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getBanner (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Banner  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public BannerItem getBanner (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

BannerItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Banner WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getBannerCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}
}



Banner  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getBanner (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Banner  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getAllBannerItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Banner";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Banner  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<BannerItem> getBannerItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Banner WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Banner  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertBanner(BannerItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Banner (Name, Short_Desc, Position, Link, File_Path, Model, Mod, Width, Height, State, Ordering, Created_Date, ImageState, Lang, Mod_ID) values (@Name, @Short_Desc, @Position, @Link, @File_Path, @Model, @Mod, @Width, @Height, @State, @Ordering, @Created_Date, @ImageState, @Lang, @Mod_ID)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,BannerItem item)
 {
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Short_Desc", item.Short_Desc);
command.Parameters.AddWithValue("@Position", item.Position);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@File_Path", item.File_Path);
command.Parameters.AddWithValue("@Model", item.Model);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@Width", item.Width);
command.Parameters.AddWithValue("@Height", item.Height);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Mod_ID", item.Mod_ID);
 }




Banner  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateBanner(BannerItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Banner SET  Name=@Name, Short_Desc=@Short_Desc, Position=@Position, Link=@Link, File_Path=@File_Path, Model=@Model, Mod=@Mod, Width=@Width, Height=@Height, State=@State, Ordering=@Ordering, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Mod_ID=@Mod_ID  WHERE Banner_ID= @Banner_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Banner  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteBanner(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Banner WHERE Banner_ID= @Banner_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Banner  ------------------>  TextBox_OracleSelectMethod <----------------

public List<BannerItem> getBanner (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Banner  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<BannerItem> getBanner (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<BannerItem> listItem = new List<BannerItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getBannerCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Banner  ------------------>  TextBox_OracleSelectMethod3 <----------------

public BannerItem getBanner (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

BannerItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Banner WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getBannerCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Banner  ------------------>  TextBox_MyTableItem <----------------

public int Banner_ID { get; set; }
public string Name { get; set; }
public string Short_Desc { get; set; }
public string Position { get; set; }
public string Link { get; set; }
public string File_Path { get; set; }
public int Model { get; set; }
public string Mod { get; set; }
public int Width { get; set; }
public int Height { get; set; }
public Boolean State { get; set; }
public int Ordering { get; set; }
public DateTime Created_Date { get; set; }
public Boolean ImageState { get; set; }
public string Lang { get; set; }
public int Mod_ID { get; set; }




Banner  ------------------>  TextBox2 <----------------




Banner  ------------------>  TextBox_IReader <----------------

public BannerItem getBannerCollectionFromReader (IDataRecord  read)
{
BannerItem item = new BannerItem();

item.Banner_ID = (read["Banner_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Banner_ID"].ToString());
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.Short_Desc = (read["Short_Desc"] is DBNull) ? "" : read["Short_Desc"].ToString();
item.Position = (read["Position"] is DBNull) ? "" : read["Position"].ToString();
item.Link = (read["Link"] is DBNull) ? "" : read["Link"].ToString();
item.File_Path = (read["File_Path"] is DBNull) ? "" : read["File_Path"].ToString();
item.Model = (read["Model"] is DBNull) ? -1 : Convert.ToInt32(read["Model"].ToString());
item.Mod = (read["Mod"] is DBNull) ? "" : read["Mod"].ToString();
item.Width = (read["Width"] is DBNull) ? -1 : Convert.ToInt32(read["Width"].ToString());
item.Height = (read["Height"] is DBNull) ? -1 : Convert.ToInt32(read["Height"].ToString());
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
item.Created_Date = (read["Created_Date"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Created_Date"].ToString());
item.ImageState = (read["ImageState"] is DBNull) ? false : Boolean.Parse(read["ImageState"].ToString());
item.Lang = (read["Lang"] is DBNull) ? "" : read["Lang"].ToString();
item.Mod_ID = (read["Mod_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Mod_ID"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Address
TARİH = 10 Aralık 2010 Cuma 17:10:57


Address_ID    ----->    TextBoxMax_
Users_ID    ----->    TextBoxMax_
City    ----->    TextBoxMax_
Town    ----->    TextBoxMax_
Street    ----->    TextBoxMax_
Kat_No    ----->    TextBoxMax_
Postal_Code    ----->    TextBoxMax_
Type    ----->    TextBoxMax_



Address  ------------------>  TextBox_In <----------------

protected bool retrieveData( Address item, Label mesaj){
if(item != null){
try{
TextBox_Address_ID.Text = item.Address_ID.ToString();
TextBox_Users_ID.Text = item.Users_ID.ToString();
TextBox_City.Text = string.IsNullOrEmpty(item.City) ? String.Empty : item.City;
TextBox_Town.Text = string.IsNullOrEmpty(item.Town) ? String.Empty : item.Town;
TextBox_Street.Text = string.IsNullOrEmpty(item.Street) ? String.Empty : item.Street;
TextBox_Kat_No.Text = item.Kat_No.HasValue ?  item.Kat_No.Value.ToString() : String.Empty;
TextBox_Postal_Code.Text = string.IsNullOrEmpty(item.Postal_Code) ? String.Empty : item.Postal_Code;
TextBox_Type.Text = string.IsNullOrEmpty(item.Type) ? String.Empty : item.Type;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Address  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Address">
<tr  id="tr_Address_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Address_ID" CssClass="Label_Deger" runat="server" Text="Address_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Address_ID"  CssClass="textBox_NORMAL" ValidationGroup="Address" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Users_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Users_ID" CssClass="Label_Deger" runat="server" Text="Users_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Users_ID"  CssClass="textBox_NORMAL" ValidationGroup="Address" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_City" runat="server">
<td class="name">
<asp:Label ID="Label_City" CssClass="Label_Deger" runat="server" Text="Şehir"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_City" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Town" runat="server">
<td class="name">
<asp:Label ID="Label_Town" CssClass="Label_Deger" runat="server" Text="Kasaba"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Town" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Street" runat="server">
<td class="name">
<asp:Label ID="Label_Street" CssClass="Label_Deger" runat="server" Text="Sokak"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Street" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Kat_No" runat="server">
<td class="name">
<asp:Label ID="Label_Kat_No" CssClass="Label_Deger" runat="server" Text="Kat No"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Kat_No"  CssClass="textBox_NORMAL" ValidationGroup="Address" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Postal_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Postal_Code" CssClass="Label_Deger" runat="server" Text="Posta Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Postal_Code" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Type" runat="server">
<td class="name">
<asp:Label ID="Label_Type" CssClass="Label_Deger" runat="server" Text="Tipi"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Type" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Address  ------------------>  TextBox_Insert <----------------

protected bool initialize(Address item,Label mesaj){
if(item != null){
try{
if(func.isInteger(TextBox_Address_ID.Text))
item.Address_ID= Convert.ToInt32(TextBox_Address_ID.Text.Trim());
if(func.isInteger(TextBox_Users_ID.Text))
item.Users_ID= Convert.ToInt32(TextBox_Users_ID.Text.Trim());
item.City=TextBox_City.Text.Trim();
item.Town=TextBox_Town.Text.Trim();
item.Street=TextBox_Street.Text.Trim();
if(func.isInteger(TextBox_Kat_No.Text))
item.Kat_No= Convert.ToInt32(TextBox_Kat_No.Text.Trim());
item.Postal_Code=TextBox_Postal_Code.Text.Trim();
item.Type=TextBox_Type.Text.Trim();
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Address  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Address"  CssClass="Ei_Labels" runat="server">
<table class="Address">
<tr>
<td class="name">
<asp:Label ID="Label_Address_ID_1" CssClass="db_Name"  Text="Address_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Address_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Users_ID_1" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Users_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_City_1" CssClass="db_Name"  Text="Şehir" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_City" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Town_1" CssClass="db_Name"  Text="Kasaba" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Town" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Street_1" CssClass="db_Name"  Text="Sokak" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Street" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Kat_No_1" CssClass="db_Name"  Text="Kat No" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Kat_No" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Postal_Code_1" CssClass="db_Name"  Text="Posta Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Postal_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Type_1" CssClass="db_Name"  Text="Tipi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Type" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Address  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Address item){
Label_Address_ID.Text = item.Address_ID.ToString();
Label_Users_ID.Text = item.Users_ID.ToString();
Label_City.Text = item.City.HasValue ?  item.City.Value.ToString() : String.Empty;
Label_Town.Text = item.Town.HasValue ?  item.Town.Value.ToString() : String.Empty;
Label_Street.Text = item.Street.HasValue ?  item.Street.Value.ToString() : String.Empty;
Label_Kat_No.Text = item.Kat_No.HasValue ?  item.Kat_No.Value.ToString() : String.Empty;
Label_Postal_Code.Text = item.Postal_Code.HasValue ?  item.Postal_Code.Value.ToString() : String.Empty;
Label_Type.Text = item.Type.HasValue ?  item.Type.Value.ToString() : String.Empty;
}



Address  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_Address_ID" CssClass="db_Name"  Text="Address_ID" runat="server"></asp:Label>
<asp:Label ID="Label_Users_ID" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
<asp:Label ID="Label_City" CssClass="db_Name"  Text="Şehir" runat="server"></asp:Label>
<asp:Label ID="Label_Town" CssClass="db_Name"  Text="Kasaba" runat="server"></asp:Label>
<asp:Label ID="Label_Street" CssClass="db_Name"  Text="Sokak" runat="server"></asp:Label>
<asp:Label ID="Label_Kat_No" CssClass="db_Name"  Text="Kat No" runat="server"></asp:Label>
<asp:Label ID="Label_Postal_Code" CssClass="db_Name"  Text="Posta Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_Type" CssClass="db_Name"  Text="Tipi" runat="server"></asp:Label>



Address  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Address_ID</th>
<th>Users_ID</th>
<th>City</th>
<th>Town</th>
<th>Street</th>
<th>Kat_No</th>
<th>Postal_Code</th>
<th>Type</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Address_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Address_ID")  %>' /></td>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_City" cssClass="evalCss" runat="server" Text='<%#  Eval("City")  %>' /></td>
<td><asp:Label ID="Label_Town" cssClass="evalCss" runat="server" Text='<%#  Eval("Town")  %>' /></td>
<td><asp:Label ID="Label_Street" cssClass="evalCss" runat="server" Text='<%#  Eval("Street")  %>' /></td>
<td><asp:Label ID="Label_Kat_No" cssClass="evalCss" runat="server" Text='<%#  Eval("Kat_No")  %>' /></td>
<td><asp:Label ID="Label_Postal_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Postal_Code")  %>' /></td>
<td><asp:Label ID="Label_Type" cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Address_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Address_ID")  %>' /></td>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_City" cssClass="evalCss" runat="server" Text='<%#  Eval("City")  %>' /></td>
<td><asp:Label ID="Label_Town" cssClass="evalCss" runat="server" Text='<%#  Eval("Town")  %>' /></td>
<td><asp:Label ID="Label_Street" cssClass="evalCss" runat="server" Text='<%#  Eval("Street")  %>' /></td>
<td><asp:Label ID="Label_Kat_No" cssClass="evalCss" runat="server" Text='<%#  Eval("Kat_No")  %>' /></td>
<td><asp:Label ID="Label_Postal_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Postal_Code")  %>' /></td>
<td><asp:Label ID="Label_Type" cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Address_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Address_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_Users_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_City cssClass="evalCss" runat="server" Text='<%#  Eval("City")  %>' />
</td>
<td>
<asp:Label ID="Label_Town cssClass="evalCss" runat="server" Text='<%#  Eval("Town")  %>' />
</td>
<td>
<asp:Label ID="Label_Street cssClass="evalCss" runat="server" Text='<%#  Eval("Street")  %>' />
</td>
<td>
<asp:Label ID="Label_Kat_No cssClass="evalCss" runat="server" Text='<%#  Eval("Kat_No")  %>' />
</td>
<td>
<asp:Label ID="Label_Postal_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Postal_Code")  %>' />
</td>
<td>
<asp:Label ID="Label_Type cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<li class="Address">
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_Resource_to_XML <----------------




Address  ------------------>  TextBox_List_XML <----------------

<word Keyword="Address_ID" Translate="Address_ID"/>
<word Keyword="Users_ID" Translate="Users_ID"/>
<word Keyword="City" Translate="City"/>
<word Keyword="Town" Translate="Town"/>
<word Keyword="Street" Translate="Street"/>
<word Keyword="Kat_No" Translate="Kat_No"/>
<word Keyword="Postal_Code" Translate="Postal_Code"/>
<word Keyword="Type" Translate="Type"/>



Address  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Address" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Address" runat="server" AllowPaging="True" DataKeyNames="Address_ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Address" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="Address_ID"  InsertVisible="False" Visible="False"  HeaderText="Address_ID" SortExpression="Address_ID" /> 
<asp:BoundField DataField="Users_ID"  InsertVisible="False" Visible="False"  HeaderText="Users_ID" SortExpression="Users_ID" /> 
<asp:BoundField DataField="City" HeaderText="Şehir" SortExpression="City" /> 
<asp:BoundField DataField="Town" HeaderText="Kasaba" SortExpression="Town" /> 
<asp:BoundField DataField="Street" HeaderText="Sokak" SortExpression="Street" /> 
<asp:BoundField DataField="Kat_No" HeaderText="Kat No" SortExpression="Kat_No" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No FROM Address  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Address  ------------------>  TextBox_Veri <----------------

protected void generateAddressData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Address item = new Address();
//item.Users_ID= 1;
item.City=Guid.NewGuid().ToString().Replace("-"," ");
item.Town=Guid.NewGuid().ToString().Replace("-"," ");
item.Street=Guid.NewGuid().ToString().Replace("-"," ");
item.Kat_No= rand.Next(1000);
item.Postal_Code=Guid.NewGuid().ToString().Replace("-"," ");
item.Type=Guid.NewGuid().ToString().Replace("-"," ");
data.Addresss.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Address  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE AddressInsert(
@Users_ID int,
@City nvarchar(50),
@Town nvarchar(50),
@Street nvarchar(50),
@Kat_No int,
@Postal_Code nvarchar(50),
@Type nvarchar(50))
AS INSERT INTO Address(
Users_ID,City,Town,Street,Kat_No,Postal_Code,Type) VALUES (
@Users_ID,@City,@Town,@Street,@Kat_No,@Postal_Code,@Type)
RETURN
----------------------------------------------
CREATE PROCEDURE AddressUPDATE(
@Address_ID int,
@Users_ID int,
@City nvarchar(50),
@Town nvarchar(50),
@Street nvarchar(50),
@Kat_No int,
@Postal_Code nvarchar(50),
@Type nvarchar(50))
AS UPDATE Address SET
Users_ID = @Users_ID,
City = @City,
Town = @Town,
Street = @Street,
Kat_No = @Kat_No,
Postal_Code = @Postal_Code,
Type = @Type
WHERE Address_ID=@Address_ID;
RETURN
----------------------------------------------
CREATE PROCEDURE AddressDelete(
@Address_ID int
)
AS DELETE FROM Address WHERE Address_ID = @Address_ID;
RETURN



Address  ------------------>  TextBox_State <----------------

Address_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;False;False;TextBox_Address_ID
Users_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;8;False;True;False;False;TextBox_Users_ID
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;2;False;True;True;True;TextBox_City
Town;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;6;False;True;True;True;TextBox_Town
Street;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Street
Kat_No;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;3;False;True;True;True;TextBox_Kat_No
Postal_Code;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;4;False;False;False;False;TextBox_Postal_Code
Type;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;7;False;False;False;False;TextBox_Type



Address  ------------------>  TextBox_InsertMethod <----------------

public void  insertAddress(AddressItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_UpdateMethod <----------------

public void  updateAddress(AddressItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteAddress(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Address  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Address WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getAddress(sql, list.ToArray());
}
public List<AddressItem> getAddress (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public AddressItem getAddress (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Address  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAllAddressItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertAddress(AddressItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateAddress(AddressItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteAddress(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<AddressItem> getAddress (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Address  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<AddressItem> getAddress (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Address  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public AddressItem getAddress (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Address  ------------------>  TextBox_OleDbInsertMethod <----------------

public Boolean  insertAddress(AddressItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_OleDbUpdateMethod <----------------

public Boolean  updateAddress(AddressItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@Address_ID", myItem.Address_ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OleDbDeleteMethod <----------------

public Boolean  deleteAddress(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<AddressItem> getAddress (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Address WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getAddress(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public AddressItem getAddress (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAllAddressItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertAddress(AddressItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateAddress(AddressItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Address  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteAddress(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Address  ------------------>  TextBox_OracleSelectMethod <----------------

public List<AddressItem> getAddress (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<AddressItem> getAddress (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Address  ------------------>  TextBox_OracleSelectMethod3 <----------------

public AddressItem getAddress (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Address  ------------------>  TextBox_MyTableItem <----------------

public int Address_ID { get; set; }
public int Users_ID { get; set; }
public string City { get; set; }
public string Town { get; set; }
public string Street { get; set; }
public int Kat_No { get; set; }
public string Postal_Code { get; set; }
public string Type { get; set; }




Address  ------------------>  TextBox2 <----------------




Address  ------------------>  TextBox_IReader <----------------

public AddressItem getAddressCollectionFromReader (IDataRecord  read)
{
AddressItem item = new AddressItem();

item.Address_ID = (read["Address_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Address_ID"].ToString());
item.Users_ID = (read["Users_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Users_ID"].ToString());
item.City = (read["City"] is DBNull) ? "" : read["City"].ToString();
item.Town = (read["Town"] is DBNull) ? "" : read["Town"].ToString();
item.Street = (read["Street"] is DBNull) ? "" : read["Street"].ToString();
item.Kat_No = (read["Kat_No"] is DBNull) ? -1 : Convert.ToInt32(read["Kat_No"].ToString());
item.Postal_Code = (read["Postal_Code"] is DBNull) ? "" : read["Postal_Code"].ToString();
item.Type = (read["Type"] is DBNull) ? "" : read["Type"].ToString();
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Navigation
TARİH = 10 Aralık 2010 Cuma 17:11:03


ID    ----->    TextBoxMax_
ParentID    ----->    TextBoxMax_
Static    ----->    CheckBox_
PageName    ----->    TextBoxMax_
PageTitle    ----->    TextBoxMax_
PageShortDesc    ----->    TextBoxMax_
PageDescription    ----->    TextBox_MultiLine
PageLayout    ----->    TextBoxMax_
ImagePath    ----->    TextBoxMax_
Form    ----->    TextBoxMax_
MainPage    ----->    CheckBox_
Modul    ----->    TextBoxMax_
Mod    ----->    TextBoxMax_
NavigationOrdering    ----->    TextBoxMax_
State    ----->    CheckBox_
Created_Date    ----->    TextBoxMax_
ImageState    ----->    CheckBox_
Lang    ----->    TextBoxMax_
Link    ----->    TextBoxMax_
LinkState    ----->    CheckBox_



Navigation  ------------------>  TextBox_In <----------------

protected bool retrieveData( Navigation item, Label mesaj){
if(item != null){
try{
TextBox_ParentID.Text = item.ParentID.ToString();
CheckBox_Static.Checked = item.Static.HasValue ?  item.Static.Value : false;
TextBox_PageName.Text = string.IsNullOrEmpty(item.PageName) ? String.Empty : item.PageName;
TextBox_PageTitle.Text = string.IsNullOrEmpty(item.PageTitle) ? String.Empty : item.PageTitle;
TextBox_PageShortDesc.Text = string.IsNullOrEmpty(item.PageShortDesc) ? String.Empty : item.PageShortDesc;
TextBox_PageDescription.Text = string.IsNullOrEmpty(item.PageDescription) ? String.Empty : item.PageDescription;
TextBox_PageLayout.Text = string.IsNullOrEmpty(item.PageLayout) ? String.Empty : item.PageLayout;
TextBox_ImagePath.Text = string.IsNullOrEmpty(item.ImagePath) ? String.Empty : item.ImagePath;
TextBox_Form.Text = string.IsNullOrEmpty(item.Form) ? String.Empty : item.Form;
CheckBox_MainPage.Checked = item.MainPage.HasValue ?  item.MainPage.Value : false;
TextBox_Modul.Text = string.IsNullOrEmpty(item.Modul) ? String.Empty : item.Modul;
TextBox_Mod.Text = string.IsNullOrEmpty(item.Mod) ? String.Empty : item.Mod;
TextBox_NavigationOrdering.Text = item.NavigationOrdering.HasValue ?  item.NavigationOrdering.Value.ToString() : String.Empty;
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
CheckBox_ImageState.Checked = item.ImageState.HasValue ?  item.ImageState.Value : false;
TextBox_Lang.Text = string.IsNullOrEmpty(item.Lang) ? String.Empty : item.Lang;
TextBox_Link.Text = string.IsNullOrEmpty(item.Link) ? String.Empty : item.Link;
CheckBox_LinkState.Checked = item.LinkState.HasValue ?  item.LinkState.Value : false;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Navigation  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Navigation">
<tr  id="tr_ParentID" runat="server">
<td class="name">
<asp:Label ID="Label_ParentID" CssClass="Label_Deger" runat="server" Text="ParentID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_ParentID"  CssClass="textBox_NORMAL" ValidationGroup="Navigation" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Static" runat="server">
<td class="name">
<asp:Label ID="Label_Static" CssClass="Label_Deger" runat="server" Text="Static"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_Static" ValidationGroup="Navigation" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_PageName" runat="server">
<td class="name">
<asp:Label ID="Label_PageName" CssClass="Label_Deger" runat="server" Text="PageName"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_PageName" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_PageTitle" runat="server">
<td class="name">
<asp:Label ID="Label_PageTitle" CssClass="Label_Deger" runat="server" Text="PageTitle"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_PageTitle" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_PageShortDesc" runat="server">
<td class="name">
<asp:Label ID="Label_PageShortDesc" CssClass="Label_Deger" runat="server" Text="PageShortDesc"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_PageShortDesc" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="500" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_PageDescription" runat="server">
<td class="name">
<asp:Label ID="Label_PageDescription" CssClass="Label_Deger" runat="server" Text="PageDescription"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_PageDescription" TextMode="MultiLine" ValidationGroup="Navigation" CssClass="textBox_MULTI" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_PageLayout" runat="server">
<td class="name">
<asp:Label ID="Label_PageLayout" CssClass="Label_Deger" runat="server" Text="PageLayout"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_PageLayout" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="20" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_ImagePath" runat="server">
<td class="name">
<asp:Label ID="Label_ImagePath" CssClass="Label_Deger" runat="server" Text="Resim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_ImagePath" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Form" runat="server">
<td class="name">
<asp:Label ID="Label_Form" CssClass="Label_Deger" runat="server" Text="Form"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Form" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_MainPage" runat="server">
<td class="name">
<asp:Label ID="Label_MainPage" CssClass="Label_Deger" runat="server" Text="Ana Sayfa"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_MainPage" ValidationGroup="Navigation" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_Modul" runat="server">
<td class="name">
<asp:Label ID="Label_Modul" CssClass="Label_Deger" runat="server" Text="Modul"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Modul" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Mod" runat="server">
<td class="name">
<asp:Label ID="Label_Mod" CssClass="Label_Deger" runat="server" Text="Mod"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Mod" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_NavigationOrdering" runat="server">
<td class="name">
<asp:Label ID="Label_NavigationOrdering" CssClass="Label_Deger" runat="server" Text="NavigationOrdering"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_NavigationOrdering"  CssClass="textBox_NORMAL" ValidationGroup="Navigation" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Navigation" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_ImageState" runat="server">
<td class="name">
<asp:Label ID="Label_ImageState" CssClass="Label_Deger" runat="server" Text="Resim Durumu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_ImageState" ValidationGroup="Navigation" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Lang" runat="server">
<td class="name">
<asp:Label ID="Label_Lang" CssClass="Label_Deger" runat="server" Text="Dil"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Lang" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Link" runat="server">
<td class="name">
<asp:Label ID="Label_Link" CssClass="Label_Deger" runat="server" Text="Link"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Link" CssClass="textBox_NORMAL" ValidationGroup="Navigation" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_LinkState" runat="server">
<td class="name">
<asp:Label ID="Label_LinkState" CssClass="Label_Deger" runat="server" Text="LinkState"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_LinkState" ValidationGroup="Navigation" runat="server" CssClass="check_BOX"/>

</td>
</tr>
</table>
</asp:Panel>



Navigation  ------------------>  TextBox_Insert <----------------

protected bool initialize(Navigation item,Label mesaj){
if(item != null){
try{
//item.ID=-1;
if(func.isInteger(TextBox_ParentID.Text))
item.ParentID= Convert.ToInt32(TextBox_ParentID.Text.Trim());
item.Static=CheckBox_Static.Checked;
item.PageName=TextBox_PageName.Text.Trim();
item.PageTitle=TextBox_PageTitle.Text.Trim();
item.PageShortDesc=TextBox_PageShortDesc.Text.Trim();
item.PageDescription=TextBox_PageDescription.Text.Trim();
item.PageLayout=TextBox_PageLayout.Text.Trim();
item.ImagePath=TextBox_ImagePath.Text.Trim();
item.Form=TextBox_Form.Text.Trim();
item.MainPage=CheckBox_MainPage.Checked;
item.Modul=TextBox_Modul.Text.Trim();
item.Mod=TextBox_Mod.Text.Trim();
if(func.isInteger(TextBox_NavigationOrdering.Text))
item.NavigationOrdering= Convert.ToInt32(TextBox_NavigationOrdering.Text.Trim());
item.State=CheckBox_State.Checked;
//item.Created_Date=DateTime.Now;
item.ImageState=CheckBox_ImageState.Checked;
item.Lang=TextBox_Lang.Text.Trim();
item.Link=TextBox_Link.Text.Trim();
item.LinkState=CheckBox_LinkState.Checked;
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Navigation  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Navigation"  CssClass="Ei_Labels" runat="server">
<table class="Navigation">
<tr>
<td class="name">
<asp:Label ID="Label_ID_1" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_ParentID_1" CssClass="db_Name"  Text="ParentID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ParentID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Static_1" CssClass="db_Name"  Text="Static" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Static" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_PageName_1" CssClass="db_Name"  Text="PageName" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PageName" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_PageTitle_1" CssClass="db_Name"  Text="PageTitle" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PageTitle" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_PageShortDesc_1" CssClass="db_Name"  Text="PageShortDesc" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PageShortDesc" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_PageDescription_1" CssClass="db_Name"  Text="PageDescription" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PageDescription" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_PageLayout_1" CssClass="db_Name"  Text="PageLayout" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PageLayout" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_ImagePath_1" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImagePath" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Form_1" CssClass="db_Name"  Text="Form" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Form" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_MainPage_1" CssClass="db_Name"  Text="Ana Sayfa" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_MainPage" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Modul_1" CssClass="db_Name"  Text="Modul" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Modul" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Mod_1" CssClass="db_Name"  Text="Mod" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Mod" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_NavigationOrdering_1" CssClass="db_Name"  Text="NavigationOrdering" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_NavigationOrdering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Created_Date_1" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Created_Date" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_ImageState_1" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImageState" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Lang_1" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Lang" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Link_1" CssClass="db_Name"  Text="Link" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Link" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_LinkState_1" CssClass="db_Name"  Text="LinkState" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_LinkState" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Navigation  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Navigation item){
Label_ID.Text = item.ID.ToString();
Label_ParentID.Text = item.ParentID.ToString();
Label_Static.Text = item.Static.HasValue ?  item.Static.Value.ToString() : String.Empty;
Label_PageName.Text = item.PageName.HasValue ?  item.PageName.Value.ToString() : String.Empty;
Label_PageTitle.Text = item.PageTitle.HasValue ?  item.PageTitle.Value.ToString() : String.Empty;
Label_PageShortDesc.Text = item.PageShortDesc.HasValue ?  item.PageShortDesc.Value.ToString() : String.Empty;
Label_PageDescription.Text = item.PageDescription.HasValue ?  item.PageDescription.Value.ToString() : String.Empty;
Label_PageLayout.Text = item.PageLayout.HasValue ?  item.PageLayout.Value.ToString() : String.Empty;
Label_ImagePath.Text = item.ImagePath.HasValue ?  item.ImagePath.Value.ToString() : String.Empty;
Label_Form.Text = item.Form.HasValue ?  item.Form.Value.ToString() : String.Empty;
Label_MainPage.Text = item.MainPage.HasValue ?  item.MainPage.Value.ToString() : String.Empty;
Label_Modul.Text = item.Modul.HasValue ?  item.Modul.Value.ToString() : String.Empty;
Label_Mod.Text = item.Mod.HasValue ?  item.Mod.Value.ToString() : String.Empty;
Label_NavigationOrdering.Text = item.NavigationOrdering.HasValue ?  item.NavigationOrdering.Value.ToString() : String.Empty;
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Created_Date.Text = item.Created_Date.HasValue ?  item.Created_Date.Value.ToString() : String.Empty;
Label_ImageState.Text = item.ImageState.HasValue ?  item.ImageState.Value.ToString() : String.Empty;
Label_Lang.Text = item.Lang.HasValue ?  item.Lang.Value.ToString() : String.Empty;
Label_Link.Text = item.Link.HasValue ?  item.Link.Value.ToString() : String.Empty;
Label_LinkState.Text = item.LinkState.HasValue ?  item.LinkState.Value.ToString() : String.Empty;
}



Navigation  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_ID" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
<asp:Label ID="Label_ParentID" CssClass="db_Name"  Text="ParentID" runat="server"></asp:Label>
<asp:Label ID="Label_Static" CssClass="db_Name"  Text="Static" runat="server"></asp:Label>
<asp:Label ID="Label_PageName" CssClass="db_Name"  Text="PageName" runat="server"></asp:Label>
<asp:Label ID="Label_PageTitle" CssClass="db_Name"  Text="PageTitle" runat="server"></asp:Label>
<asp:Label ID="Label_PageShortDesc" CssClass="db_Name"  Text="PageShortDesc" runat="server"></asp:Label>
<asp:Label ID="Label_PageDescription" CssClass="db_Name"  Text="PageDescription" runat="server"></asp:Label>
<asp:Label ID="Label_PageLayout" CssClass="db_Name"  Text="PageLayout" runat="server"></asp:Label>
<asp:Label ID="Label_ImagePath" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
<asp:Label ID="Label_Form" CssClass="db_Name"  Text="Form" runat="server"></asp:Label>
<asp:Label ID="Label_MainPage" CssClass="db_Name"  Text="Ana Sayfa" runat="server"></asp:Label>
<asp:Label ID="Label_Modul" CssClass="db_Name"  Text="Modul" runat="server"></asp:Label>
<asp:Label ID="Label_Mod" CssClass="db_Name"  Text="Mod" runat="server"></asp:Label>
<asp:Label ID="Label_NavigationOrdering" CssClass="db_Name"  Text="NavigationOrdering" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Created_Date" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
<asp:Label ID="Label_ImageState" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
<asp:Label ID="Label_Lang" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>
<asp:Label ID="Label_Link" CssClass="db_Name"  Text="Link" runat="server"></asp:Label>
<asp:Label ID="Label_LinkState" CssClass="db_Name"  Text="LinkState" runat="server"></asp:Label>



Navigation  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Navigation" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Navigation">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("ParentID")  %>
<%#  Eval("Static")  %>
<%#  Eval("PageName")  %>
<%#  Eval("PageTitle")  %>
<%#  Eval("PageShortDesc")  %>
<%#  Eval("PageDescription")  %>
<%#  Eval("PageLayout")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("Form")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Modul")  %>
<%#  Eval("Mod")  %>
<%#  Eval("NavigationOrdering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Link")  %>
<%#  Eval("LinkState")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Navigation" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ParentID,Static,PageName,PageTitle,PageShortDesc,PageDescription,PageLayout,ImagePath,Form,MainPage,Modul,Mod,NavigationOrdering,State,ImageState,Lang,Link,LinkState FROM Navigation WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Navigation  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Navigation" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Navigation">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>ParentID</th>
<th>Static</th>
<th>PageName</th>
<th>PageTitle</th>
<th>PageShortDesc</th>
<th>PageDescription</th>
<th>PageLayout</th>
<th>ImagePath</th>
<th>Form</th>
<th>MainPage</th>
<th>Modul</th>
<th>Mod</th>
<th>NavigationOrdering</th>
<th>State</th>
<th>ImageState</th>
<th>Lang</th>
<th>Link</th>
<th>LinkState</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_ParentID" cssClass="evalCss" runat="server" Text='<%#  Eval("ParentID")  %>' /></td>
<td><asp:Label ID="Label_Static" cssClass="evalCss" runat="server" Text='<%#  Eval("Static")  %>' /></td>
<td><asp:Label ID="Label_PageName" cssClass="evalCss" runat="server" Text='<%#  Eval("PageName")  %>' /></td>
<td><asp:Label ID="Label_PageTitle" cssClass="evalCss" runat="server" Text='<%#  Eval("PageTitle")  %>' /></td>
<td><asp:Label ID="Label_PageShortDesc" cssClass="evalCss" runat="server" Text='<%#  Eval("PageShortDesc")  %>' /></td>
<td><asp:Label ID="Label_PageDescription" cssClass="evalCss" runat="server" Text='<%#  Eval("PageDescription")  %>' /></td>
<td><asp:Label ID="Label_PageLayout" cssClass="evalCss" runat="server" Text='<%#  Eval("PageLayout")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_Form" cssClass="evalCss" runat="server" Text='<%#  Eval("Form")  %>' /></td>
<td><asp:Label ID="Label_MainPage" cssClass="evalCss" runat="server" Text='<%#  Eval("MainPage")  %>' /></td>
<td><asp:Label ID="Label_Modul" cssClass="evalCss" runat="server" Text='<%#  Eval("Modul")  %>' /></td>
<td><asp:Label ID="Label_Mod" cssClass="evalCss" runat="server" Text='<%#  Eval("Mod")  %>' /></td>
<td><asp:Label ID="Label_NavigationOrdering" cssClass="evalCss" runat="server" Text='<%#  Eval("NavigationOrdering")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
<td><asp:Label ID="Label_Link" cssClass="evalCss" runat="server" Text='<%#  Eval("Link")  %>' /></td>
<td><asp:Label ID="Label_LinkState" cssClass="evalCss" runat="server" Text='<%#  Eval("LinkState")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_ParentID" cssClass="evalCss" runat="server" Text='<%#  Eval("ParentID")  %>' /></td>
<td><asp:Label ID="Label_Static" cssClass="evalCss" runat="server" Text='<%#  Eval("Static")  %>' /></td>
<td><asp:Label ID="Label_PageName" cssClass="evalCss" runat="server" Text='<%#  Eval("PageName")  %>' /></td>
<td><asp:Label ID="Label_PageTitle" cssClass="evalCss" runat="server" Text='<%#  Eval("PageTitle")  %>' /></td>
<td><asp:Label ID="Label_PageShortDesc" cssClass="evalCss" runat="server" Text='<%#  Eval("PageShortDesc")  %>' /></td>
<td><asp:Label ID="Label_PageDescription" cssClass="evalCss" runat="server" Text='<%#  Eval("PageDescription")  %>' /></td>
<td><asp:Label ID="Label_PageLayout" cssClass="evalCss" runat="server" Text='<%#  Eval("PageLayout")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_Form" cssClass="evalCss" runat="server" Text='<%#  Eval("Form")  %>' /></td>
<td><asp:Label ID="Label_MainPage" cssClass="evalCss" runat="server" Text='<%#  Eval("MainPage")  %>' /></td>
<td><asp:Label ID="Label_Modul" cssClass="evalCss" runat="server" Text='<%#  Eval("Modul")  %>' /></td>
<td><asp:Label ID="Label_Mod" cssClass="evalCss" runat="server" Text='<%#  Eval("Mod")  %>' /></td>
<td><asp:Label ID="Label_NavigationOrdering" cssClass="evalCss" runat="server" Text='<%#  Eval("NavigationOrdering")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
<td><asp:Label ID="Label_Link" cssClass="evalCss" runat="server" Text='<%#  Eval("Link")  %>' /></td>
<td><asp:Label ID="Label_LinkState" cssClass="evalCss" runat="server" Text='<%#  Eval("LinkState")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Navigation" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ParentID,Static,PageName,PageTitle,PageShortDesc,PageDescription,PageLayout,ImagePath,Form,MainPage,Modul,Mod,NavigationOrdering,State,ImageState,Lang,Link,LinkState FROM Navigation WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Navigation  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Navigation" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Navigation">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_ParentID cssClass="evalCss" runat="server" Text='<%#  Eval("ParentID")  %>' />
</td>
<td>
<asp:Label ID="Label_Static cssClass="evalCss" runat="server" Text='<%#  Eval("Static")  %>' />
</td>
<td>
<asp:Label ID="Label_PageName cssClass="evalCss" runat="server" Text='<%#  Eval("PageName")  %>' />
</td>
<td>
<asp:Label ID="Label_PageTitle cssClass="evalCss" runat="server" Text='<%#  Eval("PageTitle")  %>' />
</td>
<td>
<asp:Label ID="Label_PageShortDesc cssClass="evalCss" runat="server" Text='<%#  Eval("PageShortDesc")  %>' />
</td>
<td>
<asp:Label ID="Label_PageDescription cssClass="evalCss" runat="server" Text='<%#  Eval("PageDescription")  %>' />
</td>
<td>
<asp:Label ID="Label_PageLayout cssClass="evalCss" runat="server" Text='<%#  Eval("PageLayout")  %>' />
</td>
<td>
<asp:Label ID="Label_ImagePath cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' />
</td>
<td>
<asp:Label ID="Label_Form cssClass="evalCss" runat="server" Text='<%#  Eval("Form")  %>' />
</td>
<td>
<asp:Label ID="Label_MainPage cssClass="evalCss" runat="server" Text='<%#  Eval("MainPage")  %>' />
</td>
<td>
<asp:Label ID="Label_Modul cssClass="evalCss" runat="server" Text='<%#  Eval("Modul")  %>' />
</td>
<td>
<asp:Label ID="Label_Mod cssClass="evalCss" runat="server" Text='<%#  Eval("Mod")  %>' />
</td>
<td>
<asp:Label ID="Label_NavigationOrdering cssClass="evalCss" runat="server" Text='<%#  Eval("NavigationOrdering")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_ImageState cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' />
</td>
<td>
<asp:Label ID="Label_Lang cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' />
</td>
<td>
<asp:Label ID="Label_Link cssClass="evalCss" runat="server" Text='<%#  Eval("Link")  %>' />
</td>
<td>
<asp:Label ID="Label_LinkState cssClass="evalCss" runat="server" Text='<%#  Eval("LinkState")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Navigation" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ParentID,Static,PageName,PageTitle,PageShortDesc,PageDescription,PageLayout,ImagePath,Form,MainPage,Modul,Mod,NavigationOrdering,State,ImageState,Lang,Link,LinkState FROM Navigation WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Navigation  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Navigation" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Navigation">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("ParentID")  %>
<%#  Eval("Static")  %>
<%#  Eval("PageName")  %>
<%#  Eval("PageTitle")  %>
<%#  Eval("PageShortDesc")  %>
<%#  Eval("PageDescription")  %>
<%#  Eval("PageLayout")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("Form")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Modul")  %>
<%#  Eval("Mod")  %>
<%#  Eval("NavigationOrdering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Link")  %>
<%#  Eval("LinkState")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Navigation" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ParentID,Static,PageName,PageTitle,PageShortDesc,PageDescription,PageLayout,ImagePath,Form,MainPage,Modul,Mod,NavigationOrdering,State,ImageState,Lang,Link,LinkState FROM Navigation WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Navigation  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Navigation" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Navigation">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("ParentID")  %>
<%#  Eval("Static")  %>
<%#  Eval("PageName")  %>
<%#  Eval("PageTitle")  %>
<%#  Eval("PageShortDesc")  %>
<%#  Eval("PageDescription")  %>
<%#  Eval("PageLayout")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("Form")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Modul")  %>
<%#  Eval("Mod")  %>
<%#  Eval("NavigationOrdering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Link")  %>
<%#  Eval("LinkState")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Navigation" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ParentID,Static,PageName,PageTitle,PageShortDesc,PageDescription,PageLayout,ImagePath,Form,MainPage,Modul,Mod,NavigationOrdering,State,ImageState,Lang,Link,LinkState FROM Navigation WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Navigation  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Navigation" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Navigation">
<ItemTemplate>
<li class="Navigation">
<%-- <%# Eval("ID") %> --%>
<%#  Eval("ParentID")  %>
<%#  Eval("Static")  %>
<%#  Eval("PageName")  %>
<%#  Eval("PageTitle")  %>
<%#  Eval("PageShortDesc")  %>
<%#  Eval("PageDescription")  %>
<%#  Eval("PageLayout")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("Form")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Modul")  %>
<%#  Eval("Mod")  %>
<%#  Eval("NavigationOrdering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Link")  %>
<%#  Eval("LinkState")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Navigation" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ParentID,Static,PageName,PageTitle,PageShortDesc,PageDescription,PageLayout,ImagePath,Form,MainPage,Modul,Mod,NavigationOrdering,State,ImageState,Lang,Link,LinkState FROM Navigation WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Navigation  ------------------>  TextBox_Resource_to_XML <----------------




Navigation  ------------------>  TextBox_List_XML <----------------

<word Keyword="ParentID" Translate="ParentID"/>
<word Keyword="Static" Translate="Static"/>
<word Keyword="PageName" Translate="PageName"/>
<word Keyword="PageTitle" Translate="PageTitle"/>
<word Keyword="PageShortDesc" Translate="PageShortDesc"/>
<word Keyword="PageDescription" Translate="PageDescription"/>
<word Keyword="PageLayout" Translate="PageLayout"/>
<word Keyword="ImagePath" Translate="ImagePath"/>
<word Keyword="Form" Translate="Form"/>
<word Keyword="MainPage" Translate="MainPage"/>
<word Keyword="Modul" Translate="Modul"/>
<word Keyword="Mod" Translate="Mod"/>
<word Keyword="NavigationOrdering" Translate="NavigationOrdering"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Created_Date" Translate="Created_Date"/>
<word Keyword="ImageState" Translate="ImageState"/>
<word Keyword="Lang" Translate="Lang"/>
<word Keyword="Link" Translate="Link"/>
<word Keyword="LinkState" Translate="LinkState"/>



Navigation  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Navigation" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Navigation" runat="server" AllowPaging="True" DataKeyNames="ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Navigation" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="ID"  InsertVisible="False" Visible="False"  HeaderText="ID" SortExpression="ID" /> 
<asp:BoundField DataField="ParentID"  InsertVisible="False" Visible="False"  HeaderText="ParentID" SortExpression="ParentID" /> 
<asp:CheckBoxField DataField="Static" HeaderText="Static" SortExpression="Static" /> 
<asp:BoundField DataField="PageName" HeaderText="PageName" SortExpression="PageName" /> 
<asp:BoundField DataField="PageTitle" HeaderText="PageTitle" SortExpression="PageTitle" /> 
<asp:BoundField DataField="PageShortDesc" HeaderText="PageShortDesc" SortExpression="PageShortDesc" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Navigation" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ID,ParentID,Static,PageName,PageTitle,PageShortDesc FROM Navigation  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Navigation  ------------------>  TextBox_Veri <----------------

protected void generateNavigationData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Navigation item = new Navigation();
//item.ParentID= 1;
item.Static=true;
item.PageName=Guid.NewGuid().ToString().Replace("-"," ");
item.PageTitle=Guid.NewGuid().ToString().Replace("-"," ");
item.PageShortDesc=Guid.NewGuid().ToString().Replace("-"," ");
item.PageDescription="PageDescription";
item.PageLayout=Guid.NewGuid().ToString().Replace("-"," ");
item.ImagePath=Guid.NewGuid().ToString().Replace("-"," ");
item.Form=Guid.NewGuid().ToString().Replace("-"," ");
item.MainPage=true;
item.Modul=Guid.NewGuid().ToString().Replace("-"," ");
item.Mod=Guid.NewGuid().ToString().Replace("-"," ");
item.NavigationOrdering= rand.Next(1000);
item.State=true;
item.Created_Date= DateTime.Now;
item.ImageState=true;
item.Lang=Guid.NewGuid().ToString().Replace("-"," ");
item.Link=Guid.NewGuid().ToString().Replace("-"," ");
item.LinkState=true;
data.Navigations.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Navigation  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE NavigationInsert(
@ParentID int,
@Static bit,
@PageName nvarchar(50),
@PageTitle nvarchar(50),
@PageShortDesc nvarchar(500),
@PageDescription text,
@PageLayout nvarchar(20),
@ImagePath nvarchar(100),
@Form nvarchar(50),
@MainPage bit,
@Modul nvarchar(100),
@Mod nvarchar(50),
@NavigationOrdering int,
@State bit,
@Created_Date datetime,
@ImageState bit,
@Lang nvarchar(50),
@Link nvarchar(100),
@LinkState bit)
AS INSERT INTO Navigation(
ParentID,Static,PageName,PageTitle,PageShortDesc,PageDescription,PageLayout,ImagePath,Form,MainPage,Modul,Mod,NavigationOrdering,State,Created_Date,ImageState,Lang,Link,LinkState) VALUES (
@ParentID,@Static,@PageName,@PageTitle,@PageShortDesc,@PageDescription,@PageLayout,@ImagePath,@Form,@MainPage,@Modul,@Mod,@NavigationOrdering,@State,@Created_Date,@ImageState,@Lang,@Link,@LinkState)
RETURN
----------------------------------------------
CREATE PROCEDURE NavigationUPDATE(
@ID int,
@ParentID int,
@Static bit,
@PageName nvarchar(50),
@PageTitle nvarchar(50),
@PageShortDesc nvarchar(500),
@PageDescription text,
@PageLayout nvarchar(20),
@ImagePath nvarchar(100),
@Form nvarchar(50),
@MainPage bit,
@Modul nvarchar(100),
@Mod nvarchar(50),
@NavigationOrdering int,
@State bit,
@Created_Date datetime,
@ImageState bit,
@Lang nvarchar(50),
@Link nvarchar(100),
@LinkState bit)
AS UPDATE Navigation SET
ParentID = @ParentID,
Static = @Static,
PageName = @PageName,
PageTitle = @PageTitle,
PageShortDesc = @PageShortDesc,
PageDescription = @PageDescription,
PageLayout = @PageLayout,
ImagePath = @ImagePath,
Form = @Form,
MainPage = @MainPage,
Modul = @Modul,
Mod = @Mod,
NavigationOrdering = @NavigationOrdering,
State = @State,
Created_Date = @Created_Date,
ImageState = @ImageState,
Lang = @Lang,
Link = @Link,
LinkState = @LinkState
WHERE ID=@ID;
RETURN
----------------------------------------------
CREATE PROCEDURE NavigationDelete(
@ID int
)
AS DELETE FROM Navigation WHERE ID = @ID;
RETURN



Navigation  ------------------>  TextBox_State <----------------

ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;3;True;True;False;False;
ParentID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;18;False;True;False;False;TextBox_ParentID
Static;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;20;False;True;True;True;CheckBox_Static
PageName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;15;False;True;True;True;TextBox_PageName
PageTitle;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;17;False;True;True;True;TextBox_PageTitle
PageShortDesc;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;16;False;True;True;True;TextBox_PageShortDesc
PageDescription;YES;text;2147483647;text;textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;7;False;13;False;False;False;False;TextBox_PageDescription
PageLayout;YES;nvarchar;20;nvarchar(20);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;14;False;False;False;False;TextBox_PageLayout
ImagePath;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;4;False;False;False;False;TextBox_ImagePath
Form;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;2;False;False;False;False;TextBox_Form
MainPage;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;11;False;9;False;False;False;False;CheckBox_MainPage
Modul;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;11;False;False;False;False;TextBox_Modul
Mod;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;10;False;False;False;False;TextBox_Mod
NavigationOrdering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;12;False;False;False;False;TextBox_NavigationOrdering
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;15;False;19;False;False;False;False;CheckBox_State
Created_Date;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;True;1;False;False;False;False;
ImageState;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;17;False;5;False;False;False;False;CheckBox_ImageState
Lang;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;6;False;False;False;False;TextBox_Lang
Link;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;7;False;False;False;False;TextBox_Link
LinkState;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;20;False;8;False;False;False;False;CheckBox_LinkState



Navigation  ------------------>  TextBox_InsertMethod <----------------

public void  insertNavigation(NavigationItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Navigation (ParentID, Static, PageName, PageTitle, PageShortDesc, PageDescription, PageLayout, ImagePath, Form, MainPage, Modul, Mod, NavigationOrdering, State, Created_Date, ImageState, Lang, Link, LinkState) values (@ParentID, @Static, @PageName, @PageTitle, @PageShortDesc, @PageDescription, @PageLayout, @ImagePath, @Form, @MainPage, @Modul, @Mod, @NavigationOrdering, @State, @Created_Date, @ImageState, @Lang, @Link, @LinkState)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,NavigationItem item)
 {
command.Parameters.AddWithValue("@ParentID", item.ParentID);
command.Parameters.AddWithValue("@Static", item.Static);
command.Parameters.AddWithValue("@PageName", item.PageName);
command.Parameters.AddWithValue("@PageTitle", item.PageTitle);
command.Parameters.AddWithValue("@PageShortDesc", item.PageShortDesc);
command.Parameters.AddWithValue("@PageDescription", item.PageDescription);
command.Parameters.AddWithValue("@PageLayout", item.PageLayout);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@Form", item.Form);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Modul", item.Modul);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@NavigationOrdering", item.NavigationOrdering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@LinkState", item.LinkState);
 }




Navigation  ------------------>  TextBox_UpdateMethod <----------------

public void  updateNavigation(NavigationItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Navigation SET  ParentID=@ParentID, Static=@Static, PageName=@PageName, PageTitle=@PageTitle, PageShortDesc=@PageShortDesc, PageDescription=@PageDescription, PageLayout=@PageLayout, ImagePath=@ImagePath, Form=@Form, MainPage=@MainPage, Modul=@Modul, Mod=@Mod, NavigationOrdering=@NavigationOrdering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Link=@Link, LinkState=@LinkState  WHERE ID= @ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,NavigationItem item)
 {
command.Parameters.AddWithValue("@ParentID", item.ParentID);
command.Parameters.AddWithValue("@Static", item.Static);
command.Parameters.AddWithValue("@PageName", item.PageName);
command.Parameters.AddWithValue("@PageTitle", item.PageTitle);
command.Parameters.AddWithValue("@PageShortDesc", item.PageShortDesc);
command.Parameters.AddWithValue("@PageDescription", item.PageDescription);
command.Parameters.AddWithValue("@PageLayout", item.PageLayout);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@Form", item.Form);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Modul", item.Modul);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@NavigationOrdering", item.NavigationOrdering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@LinkState", item.LinkState);
 }




Navigation  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteNavigation(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Navigation WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Navigation  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getNavigationWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Navigation WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getNavigation(sql, list.ToArray());
}
public List<NavigationItem> getNavigation (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Navigation  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getNavigation (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Navigation  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public NavigationItem getNavigation (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

NavigationItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Navigation WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getNavigationCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Navigation  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getNavigation (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Navigation  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getAllNavigationItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Navigation";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Navigation  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getNavigationItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Navigation WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Navigation  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertNavigation(NavigationItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Navigation (ParentID, Static, PageName, PageTitle, PageShortDesc, PageDescription, PageLayout, ImagePath, Form, MainPage, Modul, Mod, NavigationOrdering, State, Created_Date, ImageState, Lang, Link, LinkState) values (@ParentID, @Static, @PageName, @PageTitle, @PageShortDesc, @PageDescription, @PageLayout, @ImagePath, @Form, @MainPage, @Modul, @Mod, @NavigationOrdering, @State, @Created_Date, @ImageState, @Lang, @Link, @LinkState)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,NavigationItem item)
 {
command.Parameters.AddWithValue("@ParentID", item.ParentID);
command.Parameters.AddWithValue("@Static", item.Static);
command.Parameters.AddWithValue("@PageName", item.PageName);
command.Parameters.AddWithValue("@PageTitle", item.PageTitle);
command.Parameters.AddWithValue("@PageShortDesc", item.PageShortDesc);
command.Parameters.AddWithValue("@PageDescription", item.PageDescription);
command.Parameters.AddWithValue("@PageLayout", item.PageLayout);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@Form", item.Form);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Modul", item.Modul);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@NavigationOrdering", item.NavigationOrdering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@LinkState", item.LinkState);
 }




Navigation  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateNavigation(NavigationItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Navigation SET  ParentID=@ParentID, Static=@Static, PageName=@PageName, PageTitle=@PageTitle, PageShortDesc=@PageShortDesc, PageDescription=@PageDescription, PageLayout=@PageLayout, ImagePath=@ImagePath, Form=@Form, MainPage=@MainPage, Modul=@Modul, Mod=@Mod, NavigationOrdering=@NavigationOrdering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Link=@Link, LinkState=@LinkState  WHERE ID= @ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Navigation  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteNavigation(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Navigation WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Navigation  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<NavigationItem> getNavigation (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Navigation  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<NavigationItem> getNavigation (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Navigation  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public NavigationItem getNavigation (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

NavigationItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Navigation WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getNavigationCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Navigation  ------------------>  TextBox_OleDbInsertMethod <----------------

public Boolean  insertNavigation(NavigationItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Navigation (ParentID, Static, PageName, PageTitle, PageShortDesc, PageDescription, PageLayout, ImagePath, Form, MainPage, Modul, Mod, NavigationOrdering, State, Created_Date, ImageState, Lang, Link, LinkState) values (@ParentID, @Static, @PageName, @PageTitle, @PageShortDesc, @PageDescription, @PageLayout, @ImagePath, @Form, @MainPage, @Modul, @Mod, @NavigationOrdering, @State, @Created_Date, @ImageState, @Lang, @Link, @LinkState)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,NavigationItem item)
 {
command.Parameters.AddWithValue("@ParentID", item.ParentID);
command.Parameters.AddWithValue("@Static", item.Static);
command.Parameters.AddWithValue("@PageName", item.PageName);
command.Parameters.AddWithValue("@PageTitle", item.PageTitle);
command.Parameters.AddWithValue("@PageShortDesc", item.PageShortDesc);
command.Parameters.AddWithValue("@PageDescription", item.PageDescription);
command.Parameters.AddWithValue("@PageLayout", item.PageLayout);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@Form", item.Form);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Modul", item.Modul);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@NavigationOrdering", item.NavigationOrdering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@LinkState", item.LinkState);
 }




Navigation  ------------------>  TextBox_OleDbUpdateMethod <----------------

public Boolean  updateNavigation(NavigationItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Navigation SET  ParentID=@ParentID, Static=@Static, PageName=@PageName, PageTitle=@PageTitle, PageShortDesc=@PageShortDesc, PageDescription=@PageDescription, PageLayout=@PageLayout, ImagePath=@ImagePath, Form=@Form, MainPage=@MainPage, Modul=@Modul, Mod=@Mod, NavigationOrdering=@NavigationOrdering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Link=@Link, LinkState=@LinkState  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@ID", myItem.ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Navigation  ------------------>  TextBox_OleDbDeleteMethod <----------------

public Boolean  deleteNavigation(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Navigation WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Navigation  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<NavigationItem> getNavigation (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Navigation  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getNavigationWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Navigation WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getNavigation(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getNavigation (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Navigation  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public NavigationItem getNavigation (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

NavigationItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Navigation WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getNavigationCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}
}



Navigation  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getNavigation (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Navigation  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getAllNavigationItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Navigation";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Navigation  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<NavigationItem> getNavigationItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Navigation WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Navigation  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertNavigation(NavigationItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Navigation (ParentID, Static, PageName, PageTitle, PageShortDesc, PageDescription, PageLayout, ImagePath, Form, MainPage, Modul, Mod, NavigationOrdering, State, Created_Date, ImageState, Lang, Link, LinkState) values (@ParentID, @Static, @PageName, @PageTitle, @PageShortDesc, @PageDescription, @PageLayout, @ImagePath, @Form, @MainPage, @Modul, @Mod, @NavigationOrdering, @State, @Created_Date, @ImageState, @Lang, @Link, @LinkState)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,NavigationItem item)
 {
command.Parameters.AddWithValue("@ParentID", item.ParentID);
command.Parameters.AddWithValue("@Static", item.Static);
command.Parameters.AddWithValue("@PageName", item.PageName);
command.Parameters.AddWithValue("@PageTitle", item.PageTitle);
command.Parameters.AddWithValue("@PageShortDesc", item.PageShortDesc);
command.Parameters.AddWithValue("@PageDescription", item.PageDescription);
command.Parameters.AddWithValue("@PageLayout", item.PageLayout);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@Form", item.Form);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Modul", item.Modul);
command.Parameters.AddWithValue("@Mod", item.Mod);
command.Parameters.AddWithValue("@NavigationOrdering", item.NavigationOrdering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Link", item.Link);
command.Parameters.AddWithValue("@LinkState", item.LinkState);
 }




Navigation  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateNavigation(NavigationItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Navigation SET  ParentID=@ParentID, Static=@Static, PageName=@PageName, PageTitle=@PageTitle, PageShortDesc=@PageShortDesc, PageDescription=@PageDescription, PageLayout=@PageLayout, ImagePath=@ImagePath, Form=@Form, MainPage=@MainPage, Modul=@Modul, Mod=@Mod, NavigationOrdering=@NavigationOrdering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Link=@Link, LinkState=@LinkState  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Navigation  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteNavigation(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Navigation WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Navigation  ------------------>  TextBox_OracleSelectMethod <----------------

public List<NavigationItem> getNavigation (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Navigation  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<NavigationItem> getNavigation (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<NavigationItem> listItem = new List<NavigationItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getNavigationCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Navigation  ------------------>  TextBox_OracleSelectMethod3 <----------------

public NavigationItem getNavigation (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

NavigationItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Navigation WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getNavigationCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Navigation  ------------------>  TextBox_MyTableItem <----------------

public int ID { get; set; }
public int ParentID { get; set; }
public Boolean Static { get; set; }
public string PageName { get; set; }
public string PageTitle { get; set; }
public string PageShortDesc { get; set; }
public string PageDescription { get; set; }
public string PageLayout { get; set; }
public string ImagePath { get; set; }
public string Form { get; set; }
public Boolean MainPage { get; set; }
public string Modul { get; set; }
public string Mod { get; set; }
public int NavigationOrdering { get; set; }
public Boolean State { get; set; }
public DateTime Created_Date { get; set; }
public Boolean ImageState { get; set; }
public string Lang { get; set; }
public string Link { get; set; }
public Boolean LinkState { get; set; }




Navigation  ------------------>  TextBox2 <----------------




Navigation  ------------------>  TextBox_IReader <----------------

public NavigationItem getNavigationCollectionFromReader (IDataRecord  read)
{
NavigationItem item = new NavigationItem();

item.ID = (read["ID"] is DBNull) ? -1 : Convert.ToInt32(read["ID"].ToString());
item.ParentID = (read["ParentID"] is DBNull) ? -1 : Convert.ToInt32(read["ParentID"].ToString());
item.Static = (read["Static"] is DBNull) ? false : Boolean.Parse(read["Static"].ToString());
item.PageName = (read["PageName"] is DBNull) ? "" : read["PageName"].ToString();
item.PageTitle = (read["PageTitle"] is DBNull) ? "" : read["PageTitle"].ToString();
item.PageShortDesc = (read["PageShortDesc"] is DBNull) ? "" : read["PageShortDesc"].ToString();
item.PageLayout = (read["PageLayout"] is DBNull) ? "" : read["PageLayout"].ToString();
item.ImagePath = (read["ImagePath"] is DBNull) ? "" : read["ImagePath"].ToString();
item.Form = (read["Form"] is DBNull) ? "" : read["Form"].ToString();
item.MainPage = (read["MainPage"] is DBNull) ? false : Boolean.Parse(read["MainPage"].ToString());
item.Modul = (read["Modul"] is DBNull) ? "" : read["Modul"].ToString();
item.Mod = (read["Mod"] is DBNull) ? "" : read["Mod"].ToString();
item.NavigationOrdering = (read["NavigationOrdering"] is DBNull) ? -1 : Convert.ToInt32(read["NavigationOrdering"].ToString());
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Created_Date = (read["Created_Date"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Created_Date"].ToString());
item.ImageState = (read["ImageState"] is DBNull) ? false : Boolean.Parse(read["ImageState"].ToString());
item.Lang = (read["Lang"] is DBNull) ? "" : read["Lang"].ToString();
item.Link = (read["Link"] is DBNull) ? "" : read["Link"].ToString();
item.LinkState = (read["LinkState"] is DBNull) ? false : Boolean.Parse(read["LinkState"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Address
TARİH = 10 Aralık 2010 Cuma 19:38:42


Address_ID    ----->    TextBoxMax_
Users_ID    ----->    TextBoxMax_
City    ----->    TextBoxMax_
Town    ----->    TextBoxMax_
Street    ----->    TextBoxMax_
Kat_No    ----->    TextBoxMax_
Postal_Code    ----->    TextBoxMax_
Type    ----->    TextBoxMax_



Address  ------------------>  TextBox_In <----------------

protected bool retrieveData( Address item, Label mesaj){
if(item != null){
try{
TextBox_Address_ID.Text = item.Address_ID.ToString();
TextBox_Users_ID.Text = item.Users_ID.ToString();
TextBox_City.Text = string.IsNullOrEmpty(item.City) ? String.Empty : item.City;
TextBox_Town.Text = string.IsNullOrEmpty(item.Town) ? String.Empty : item.Town;
TextBox_Street.Text = string.IsNullOrEmpty(item.Street) ? String.Empty : item.Street;
TextBox_Kat_No.Text = item.Kat_No.HasValue ?  item.Kat_No.Value.ToString() : String.Empty;
TextBox_Postal_Code.Text = string.IsNullOrEmpty(item.Postal_Code) ? String.Empty : item.Postal_Code;
TextBox_Type.Text = string.IsNullOrEmpty(item.Type) ? String.Empty : item.Type;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Address  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Address">
<tr  id="tr_Address_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Address_ID" CssClass="Label_Deger" runat="server" Text="Address_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Address_ID"  CssClass="textBox_NORMAL" ValidationGroup="Address" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Users_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Users_ID" CssClass="Label_Deger" runat="server" Text="Users_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Users_ID"  CssClass="textBox_NORMAL" ValidationGroup="Address" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_City" runat="server">
<td class="name">
<asp:Label ID="Label_City" CssClass="Label_Deger" runat="server" Text="Şehir"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_City" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Town" runat="server">
<td class="name">
<asp:Label ID="Label_Town" CssClass="Label_Deger" runat="server" Text="Kasaba"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Town" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Street" runat="server">
<td class="name">
<asp:Label ID="Label_Street" CssClass="Label_Deger" runat="server" Text="Sokak"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Street" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Kat_No" runat="server">
<td class="name">
<asp:Label ID="Label_Kat_No" CssClass="Label_Deger" runat="server" Text="Kat No"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Kat_No"  CssClass="textBox_NORMAL" ValidationGroup="Address" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Postal_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Postal_Code" CssClass="Label_Deger" runat="server" Text="Posta Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Postal_Code" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Type" runat="server">
<td class="name">
<asp:Label ID="Label_Type" CssClass="Label_Deger" runat="server" Text="Tipi"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Type" CssClass="textBox_NORMAL" ValidationGroup="Address" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Address  ------------------>  TextBox_Insert <----------------

protected bool initialize(Address item,Label mesaj){
if(item != null){
try{
if(func.isInteger(TextBox_Address_ID.Text))
item.Address_ID= Convert.ToInt32(TextBox_Address_ID.Text.Trim());
if(func.isInteger(TextBox_Users_ID.Text))
item.Users_ID= Convert.ToInt32(TextBox_Users_ID.Text.Trim());
item.City=TextBox_City.Text.Trim();
item.Town=TextBox_Town.Text.Trim();
item.Street=TextBox_Street.Text.Trim();
if(func.isInteger(TextBox_Kat_No.Text))
item.Kat_No= Convert.ToInt32(TextBox_Kat_No.Text.Trim());
item.Postal_Code=TextBox_Postal_Code.Text.Trim();
item.Type=TextBox_Type.Text.Trim();
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Address  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Address"  CssClass="Ei_Labels" runat="server">
<table class="Address">
<tr>
<td class="name">
<asp:Label ID="Label_Address_ID_1" CssClass="db_Name"  Text="Address_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Address_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Users_ID_1" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Users_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_City_1" CssClass="db_Name"  Text="Şehir" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_City" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Town_1" CssClass="db_Name"  Text="Kasaba" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Town" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Street_1" CssClass="db_Name"  Text="Sokak" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Street" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Kat_No_1" CssClass="db_Name"  Text="Kat No" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Kat_No" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Postal_Code_1" CssClass="db_Name"  Text="Posta Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Postal_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Type_1" CssClass="db_Name"  Text="Tipi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Type" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Address  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Address item){
Label_Address_ID.Text = item.Address_ID.ToString();
Label_Users_ID.Text = item.Users_ID.ToString();
Label_City.Text = item.City.HasValue ?  item.City.Value.ToString() : String.Empty;
Label_Town.Text = item.Town.HasValue ?  item.Town.Value.ToString() : String.Empty;
Label_Street.Text = item.Street.HasValue ?  item.Street.Value.ToString() : String.Empty;
Label_Kat_No.Text = item.Kat_No.HasValue ?  item.Kat_No.Value.ToString() : String.Empty;
Label_Postal_Code.Text = item.Postal_Code.HasValue ?  item.Postal_Code.Value.ToString() : String.Empty;
Label_Type.Text = item.Type.HasValue ?  item.Type.Value.ToString() : String.Empty;
}



Address  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_Address_ID" CssClass="db_Name"  Text="Address_ID" runat="server"></asp:Label>
<asp:Label ID="Label_Users_ID" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
<asp:Label ID="Label_City" CssClass="db_Name"  Text="Şehir" runat="server"></asp:Label>
<asp:Label ID="Label_Town" CssClass="db_Name"  Text="Kasaba" runat="server"></asp:Label>
<asp:Label ID="Label_Street" CssClass="db_Name"  Text="Sokak" runat="server"></asp:Label>
<asp:Label ID="Label_Kat_No" CssClass="db_Name"  Text="Kat No" runat="server"></asp:Label>
<asp:Label ID="Label_Postal_Code" CssClass="db_Name"  Text="Posta Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_Type" CssClass="db_Name"  Text="Tipi" runat="server"></asp:Label>



Address  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Address_ID</th>
<th>Users_ID</th>
<th>City</th>
<th>Town</th>
<th>Street</th>
<th>Kat_No</th>
<th>Postal_Code</th>
<th>Type</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Address_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Address_ID")  %>' /></td>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_City" cssClass="evalCss" runat="server" Text='<%#  Eval("City")  %>' /></td>
<td><asp:Label ID="Label_Town" cssClass="evalCss" runat="server" Text='<%#  Eval("Town")  %>' /></td>
<td><asp:Label ID="Label_Street" cssClass="evalCss" runat="server" Text='<%#  Eval("Street")  %>' /></td>
<td><asp:Label ID="Label_Kat_No" cssClass="evalCss" runat="server" Text='<%#  Eval("Kat_No")  %>' /></td>
<td><asp:Label ID="Label_Postal_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Postal_Code")  %>' /></td>
<td><asp:Label ID="Label_Type" cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Address_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Address_ID")  %>' /></td>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_City" cssClass="evalCss" runat="server" Text='<%#  Eval("City")  %>' /></td>
<td><asp:Label ID="Label_Town" cssClass="evalCss" runat="server" Text='<%#  Eval("Town")  %>' /></td>
<td><asp:Label ID="Label_Street" cssClass="evalCss" runat="server" Text='<%#  Eval("Street")  %>' /></td>
<td><asp:Label ID="Label_Kat_No" cssClass="evalCss" runat="server" Text='<%#  Eval("Kat_No")  %>' /></td>
<td><asp:Label ID="Label_Postal_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Postal_Code")  %>' /></td>
<td><asp:Label ID="Label_Type" cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Address_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Address_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_Users_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_City cssClass="evalCss" runat="server" Text='<%#  Eval("City")  %>' />
</td>
<td>
<asp:Label ID="Label_Town cssClass="evalCss" runat="server" Text='<%#  Eval("Town")  %>' />
</td>
<td>
<asp:Label ID="Label_Street cssClass="evalCss" runat="server" Text='<%#  Eval("Street")  %>' />
</td>
<td>
<asp:Label ID="Label_Kat_No cssClass="evalCss" runat="server" Text='<%#  Eval("Kat_No")  %>' />
</td>
<td>
<asp:Label ID="Label_Postal_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Postal_Code")  %>' />
</td>
<td>
<asp:Label ID="Label_Type cssClass="evalCss" runat="server" Text='<%#  Eval("Type")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Address" runat="server" DataKeyNames="Address_ID" DataSourceID="SqlDataSource_Address">
<ItemTemplate>
<li class="Address">
<%#  Eval("Address_ID")  %>
<%#  Eval("Users_ID")  %>
<%#  Eval("City")  %>
<%#  Eval("Town")  %>
<%#  Eval("Street")  %>
<%#  Eval("Kat_No")  %>
<%#  Eval("Postal_Code")  %>
<%#  Eval("Type")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No,Postal_Code,Type FROM Address WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Address  ------------------>  TextBox_Resource_to_XML <----------------




Address  ------------------>  TextBox_List_XML <----------------

<word Keyword="Address_ID" Translate="Address_ID"/>
<word Keyword="Users_ID" Translate="Users_ID"/>
<word Keyword="City" Translate="City"/>
<word Keyword="Town" Translate="Town"/>
<word Keyword="Street" Translate="Street"/>
<word Keyword="Kat_No" Translate="Kat_No"/>
<word Keyword="Postal_Code" Translate="Postal_Code"/>
<word Keyword="Type" Translate="Type"/>



Address  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Address" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Address" runat="server" AllowPaging="True" DataKeyNames="Address_ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Address" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="Address_ID"  InsertVisible="False" Visible="False"  HeaderText="Address_ID" SortExpression="Address_ID" /> 
<asp:BoundField DataField="Users_ID"  InsertVisible="False" Visible="False"  HeaderText="Users_ID" SortExpression="Users_ID" /> 
<asp:BoundField DataField="City" HeaderText="Şehir" SortExpression="City" /> 
<asp:BoundField DataField="Town" HeaderText="Kasaba" SortExpression="Town" /> 
<asp:BoundField DataField="Street" HeaderText="Sokak" SortExpression="Street" /> 
<asp:BoundField DataField="Kat_No" HeaderText="Kat No" SortExpression="Kat_No" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Address" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Address_ID,Users_ID,City,Town,Street,Kat_No FROM Address  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Address  ------------------>  TextBox_Veri <----------------

protected void generateAddressData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Address item = new Address();
//item.Users_ID= 1;
item.City=Guid.NewGuid().ToString().Replace("-"," ");
item.Town=Guid.NewGuid().ToString().Replace("-"," ");
item.Street=Guid.NewGuid().ToString().Replace("-"," ");
item.Kat_No= rand.Next(1000);
item.Postal_Code=Guid.NewGuid().ToString().Replace("-"," ");
item.Type=Guid.NewGuid().ToString().Replace("-"," ");
data.Addresss.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Address  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE AddressInsert(
@Users_ID int,
@City nvarchar(50),
@Town nvarchar(50),
@Street nvarchar(50),
@Kat_No int,
@Postal_Code nvarchar(50),
@Type nvarchar(50))
AS INSERT INTO Address(
Users_ID,City,Town,Street,Kat_No,Postal_Code,Type) VALUES (
@Users_ID,@City,@Town,@Street,@Kat_No,@Postal_Code,@Type)
RETURN
----------------------------------------------
CREATE PROCEDURE AddressUPDATE(
@Address_ID int,
@Users_ID int,
@City nvarchar(50),
@Town nvarchar(50),
@Street nvarchar(50),
@Kat_No int,
@Postal_Code nvarchar(50),
@Type nvarchar(50))
AS UPDATE Address SET
Users_ID = @Users_ID,
City = @City,
Town = @Town,
Street = @Street,
Kat_No = @Kat_No,
Postal_Code = @Postal_Code,
Type = @Type
WHERE Address_ID=@Address_ID;
RETURN
----------------------------------------------
CREATE PROCEDURE AddressDelete(
@Address_ID int
)
AS DELETE FROM Address WHERE Address_ID = @Address_ID;
RETURN



Address  ------------------>  TextBox_State <----------------

Address_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;False;False;TextBox_Address_ID
Users_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;8;False;True;False;False;TextBox_Users_ID
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;2;False;True;True;True;TextBox_City
Town;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;6;False;True;True;True;TextBox_Town
Street;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Street
Kat_No;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;3;False;True;True;True;TextBox_Kat_No
Postal_Code;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;4;False;False;False;False;TextBox_Postal_Code
Type;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;7;False;False;False;False;TextBox_Type



Address  ------------------>  TextBox_InsertMethod <----------------

public void  insertAddress(AddressItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_UpdateMethod <----------------

public void  updateAddress(AddressItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteAddress(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Address  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Address WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getAddress(sql, list.ToArray());
}
public List<AddressItem> getAddress (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public AddressItem getAddress (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Address  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAllAddressItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertAddress(AddressItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateAddress(AddressItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteAddress(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Address  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<AddressItem> getAddress (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Address  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<AddressItem> getAddress (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Address  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public AddressItem getAddress (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Address  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertAddress(AddressItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertAddressALL(List<Address> list)
{
foreach (Address i in list)
{
this.insertAddress(i);
}
}



Address  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateAddress(AddressItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@Address_ID", myItem.Address_ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateAddressALL(List<Address> list)
{
foreach (Address i in list)
{
this.updateAddress(i);
}
}



Address  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteAddress(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@Address_ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteAddressALL(List<Address> list)
{
foreach (Address i in list)
{
this.deleteAddress(i.Address_ID);
}
}



Address  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<AddressItem> getAddress (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Address WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getAddress(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public AddressItem getAddress (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddress (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAllAddressItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<AddressItem> getAddressItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Address  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertAddress(AddressItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Address (Users_ID, City, Town, Street, Kat_No, Postal_Code, Type) values (@Users_ID, @City, @Town, @Street, @Kat_No, @Postal_Code, @Type)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,AddressItem item)
 {
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@City", item.City);
command.Parameters.AddWithValue("@Town", item.Town);
command.Parameters.AddWithValue("@Street", item.Street);
command.Parameters.AddWithValue("@Kat_No", item.Kat_No);
command.Parameters.AddWithValue("@Postal_Code", item.Postal_Code);
command.Parameters.AddWithValue("@Type", item.Type);
 }




Address  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateAddress(AddressItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Address SET  Users_ID=@Users_ID, City=@City, Town=@Town, Street=@Street, Kat_No=@Kat_No, Postal_Code=@Postal_Code, Type=@Type  WHERE Address_ID= @Address_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Address  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteAddress(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Address WHERE Address_ID= @Address_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@Address_ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Address  ------------------>  TextBox_OracleSelectMethod <----------------

public List<AddressItem> getAddress (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Address  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<AddressItem> getAddress (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<AddressItem> listItem = new List<AddressItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getAddressCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Address  ------------------>  TextBox_OracleSelectMethod3 <----------------

public AddressItem getAddress (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

AddressItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Address WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getAddressCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Address  ------------------>  TextBox_MyTableItem <----------------

public int Address_ID { get; set; }
public int Users_ID { get; set; }
public string City { get; set; }
public string Town { get; set; }
public string Street { get; set; }
public int Kat_No { get; set; }
public string Postal_Code { get; set; }
public string Type { get; set; }




Address  ------------------>  TextBox2 <----------------




Address  ------------------>  TextBox_IReader <----------------

public AddressItem getAddressCollectionFromReader (IDataRecord  read)
{
AddressItem item = new AddressItem();

item.Address_ID = (read["Address_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Address_ID"].ToString());
item.Users_ID = (read["Users_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Users_ID"].ToString());
item.City = (read["City"] is DBNull) ? "" : read["City"].ToString();
item.Town = (read["Town"] is DBNull) ? "" : read["Town"].ToString();
item.Street = (read["Street"] is DBNull) ? "" : read["Street"].ToString();
item.Kat_No = (read["Kat_No"] is DBNull) ? -1 : Convert.ToInt32(read["Kat_No"].ToString());
item.Postal_Code = (read["Postal_Code"] is DBNull) ? "" : read["Postal_Code"].ToString();
item.Type = (read["Type"] is DBNull) ? "" : read["Type"].ToString();
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Products
TARİH = 10 Aralık 2010 Cuma 19:40:19


Products_ID    ----->    TextBoxMax_
Catalog_ID    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
ShortExplanation    ----->    TextBoxMax_
Detail    ----->    TextBox_MultiLine
MainPage    ----->    CheckBox_
Campaign    ----->    CheckBox_
Price    ----->    TextBoxMax_
ImagePath    ----->    TextBoxMax_
CampaignPrice    ----->    TextBoxMax_
Ordering    ----->    TextBoxMax_
State    ----->    CheckBox_
Created_Date    ----->    TextBoxMax_
ImageState    ----->    CheckBox_
Lang    ----->    TextBoxMax_
Code    ----->    TextBoxMax_
KDV    ----->    TextBoxMax_
Mark_ID    ----->    TextBoxMax_
PriceType    ----->    TextBoxMax_
Hit    ----->    TextBoxMax_
Average_Rate    ----->    TextBoxMax_



Products  ------------------>  TextBox_In <----------------

protected bool retrieveData( Products item, Label mesaj){
if(item != null){
try{
TextBox_Products_ID.Text = item.Products_ID.ToString();
TextBox_Catalog_ID.Text = item.Catalog_ID.ToString();
TextBox_Name.Text = item.Name.ToString();
TextBox_ShortExplanation.Text = item.ShortExplanation.ToString();
TextBox_Detail.Text = string.IsNullOrEmpty(item.Detail) ? String.Empty : item.Detail;
CheckBox_MainPage.Checked = item.MainPage.HasValue ?  item.MainPage.Value : false;
CheckBox_Campaign.Checked = item.Campaign.HasValue ?  item.Campaign.Value : false;
TextBox_Price.Text = item.Price.HasValue ?  item.Price.Value.ToString() : String.Empty;
TextBox_ImagePath.Text = string.IsNullOrEmpty(item.ImagePath) ? String.Empty : item.ImagePath;
TextBox_CampaignPrice.Text = item.CampaignPrice.HasValue ?  item.CampaignPrice.Value.ToString() : String.Empty;
TextBox_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
CheckBox_State.Checked = item.State;
CheckBox_ImageState.Checked = item.ImageState.HasValue ?  item.ImageState.Value : false;
TextBox_Lang.Text = string.IsNullOrEmpty(item.Lang) ? String.Empty : item.Lang;
TextBox_Code.Text = string.IsNullOrEmpty(item.Code) ? String.Empty : item.Code;
TextBox_KDV.Text = item.KDV.HasValue ?  item.KDV.Value.ToString() : String.Empty;
TextBox_Mark_ID.Text = item.Mark_ID.HasValue ?  item.Mark_ID.Value.ToString() : String.Empty;
TextBox_PriceType.Text = string.IsNullOrEmpty(item.PriceType) ? String.Empty : item.PriceType;
TextBox_Hit.Text = item.Hit.HasValue ?  item.Hit.Value.ToString() : String.Empty;
TextBox_Average_Rate.Text = item.Average_Rate.HasValue ?  item.Average_Rate.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Products  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Products">
<tr  id="tr_Products_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Products_ID" CssClass="Label_Deger" runat="server" Text="Products_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Products_ID"  CssClass="textBox_NORMAL" ValidationGroup="Products" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Catalog_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Catalog_ID" CssClass="Label_Deger" runat="server" Text="Catalog_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Catalog_ID"  CssClass="textBox_NORMAL" ValidationGroup="Products" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="Products" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_ShortExplanation" runat="server">
<td class="name">
<asp:Label ID="Label_ShortExplanation" CssClass="Label_Deger" runat="server" Text="Kısa Açıklama"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_ShortExplanation" CssClass="textBox_NORMAL" ValidationGroup="Products" MaxLength="500" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Detail" runat="server">
<td class="name">
<asp:Label ID="Label_Detail" CssClass="Label_Deger" runat="server" Text="Detay"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Detail" TextMode="MultiLine" ValidationGroup="Products" CssClass="textBox_MULTI" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_MainPage" runat="server">
<td class="name">
<asp:Label ID="Label_MainPage" CssClass="Label_Deger" runat="server" Text="Ana Sayfa"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_MainPage" ValidationGroup="Products" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_Campaign" runat="server">
<td class="name">
<asp:Label ID="Label_Campaign" CssClass="Label_Deger" runat="server" Text="Kampanya"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_Campaign" ValidationGroup="Products" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Price" runat="server">
<td class="name">
<asp:Label ID="Label_Price" CssClass="Label_Deger" runat="server" Text="Fiyat"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Price"  CssClass="textBox_NORMAL" ValidationGroup="Products" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_ImagePath" runat="server">
<td class="name">
<asp:Label ID="Label_ImagePath" CssClass="Label_Deger" runat="server" Text="Resim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_ImagePath" CssClass="textBox_NORMAL" ValidationGroup="Products" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_CampaignPrice" runat="server">
<td class="name">
<asp:Label ID="Label_CampaignPrice" CssClass="Label_Deger" runat="server" Text="Kampanya Fiyatı"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_CampaignPrice"  CssClass="textBox_NORMAL" ValidationGroup="Products" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Products" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Products" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_ImageState" runat="server">
<td class="name">
<asp:Label ID="Label_ImageState" CssClass="Label_Deger" runat="server" Text="Resim Durumu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_ImageState" ValidationGroup="Products" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Lang" runat="server">
<td class="name">
<asp:Label ID="Label_Lang" CssClass="Label_Deger" runat="server" Text="Dil"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Lang" CssClass="textBox_NORMAL" ValidationGroup="Products" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Code" CssClass="Label_Deger" runat="server" Text="Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Code" CssClass="textBox_NORMAL" ValidationGroup="Products" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_KDV" runat="server">
<td class="name">
<asp:Label ID="Label_KDV" CssClass="Label_Deger" runat="server" Text="KDV"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_KDV"  CssClass="textBox_NORMAL" ValidationGroup="Products" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Mark_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Mark_ID" CssClass="Label_Deger" runat="server" Text="Mark_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Mark_ID"  CssClass="textBox_NORMAL" ValidationGroup="Products" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_PriceType" runat="server">
<td class="name">
<asp:Label ID="Label_PriceType" CssClass="Label_Deger" runat="server" Text="Fiyat Tipi"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_PriceType" CssClass="textBox_NORMAL" ValidationGroup="Products" MaxLength="10" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Hit" runat="server">
<td class="name">
<asp:Label ID="Label_Hit" CssClass="Label_Deger" runat="server" Text="Hit"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Hit"  CssClass="textBox_NORMAL" ValidationGroup="Products" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Average_Rate" runat="server">
<td class="name">
<asp:Label ID="Label_Average_Rate" CssClass="Label_Deger" runat="server" Text="Average_Rate"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Average_Rate"  CssClass="textBox_NORMAL" ValidationGroup="Products" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Products  ------------------>  TextBox_Insert <----------------

protected bool initialize(Products item,Label mesaj){
if(item != null){
try{
if(func.isInteger(TextBox_Products_ID.Text))
item.Products_ID= Convert.ToInt32(TextBox_Products_ID.Text.Trim());
if(func.isInteger(TextBox_Catalog_ID.Text))
item.Catalog_ID= Convert.ToInt32(TextBox_Catalog_ID.Text.Trim());
item.Name=TextBox_Name.Text.Trim();
item.ShortExplanation=TextBox_ShortExplanation.Text.Trim();
item.Detail=TextBox_Detail.Text.Trim();
item.MainPage=CheckBox_MainPage.Checked;
item.Campaign=CheckBox_Campaign.Checked;
item.ImagePath=TextBox_ImagePath.Text.Trim();
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
item.State=CheckBox_State.Checked;
//item.Created_Date=DateTime.Now;
item.ImageState=CheckBox_ImageState.Checked;
item.Lang=TextBox_Lang.Text.Trim();
item.Code=TextBox_Code.Text.Trim();
if(func.isInteger(TextBox_KDV.Text))
item.KDV= Convert.ToInt32(TextBox_KDV.Text.Trim());
if(func.isInteger(TextBox_Mark_ID.Text))
item.Mark_ID= Convert.ToInt32(TextBox_Mark_ID.Text.Trim());
item.PriceType=TextBox_PriceType.Text.Trim();
if(func.isInteger(TextBox_Hit.Text))
item.Hit= Convert.ToInt32(TextBox_Hit.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Products  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Products"  CssClass="Ei_Labels" runat="server">
<table class="Products">
<tr>
<td class="name">
<asp:Label ID="Label_Products_ID_1" CssClass="db_Name"  Text="Products_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Products_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Catalog_ID_1" CssClass="db_Name"  Text="Catalog_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Catalog_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_ShortExplanation_1" CssClass="db_Name"  Text="Kısa Açıklama" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ShortExplanation" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Detail_1" CssClass="db_Name"  Text="Detay" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Detail" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_MainPage_1" CssClass="db_Name"  Text="Ana Sayfa" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_MainPage" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Campaign_1" CssClass="db_Name"  Text="Kampanya" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Campaign" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Price_1" CssClass="db_Name"  Text="Fiyat" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Price" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_ImagePath_1" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImagePath" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_CampaignPrice_1" CssClass="db_Name"  Text="Kampanya Fiyatı" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_CampaignPrice" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Created_Date_1" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Created_Date" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_ImageState_1" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ImageState" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Lang_1" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Lang" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Code_1" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_KDV_1" CssClass="db_Name"  Text="KDV" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_KDV" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Mark_ID_1" CssClass="db_Name"  Text="Mark_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Mark_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_PriceType_1" CssClass="db_Name"  Text="Fiyat Tipi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PriceType" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Hit_1" CssClass="db_Name"  Text="Hit" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Hit" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Average_Rate_1" CssClass="db_Name"  Text="Average_Rate" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Average_Rate" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Products  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Products item){
Label_Products_ID.Text = item.Products_ID.ToString();
Label_Catalog_ID.Text = item.Catalog_ID.ToString();
Label_Name.Text = item.Name.ToString();
Label_ShortExplanation.Text = item.ShortExplanation.ToString();
Label_Detail.Text = item.Detail.HasValue ?  item.Detail.Value.ToString() : String.Empty;
Label_MainPage.Text = item.MainPage.HasValue ?  item.MainPage.Value.ToString() : String.Empty;
Label_Campaign.Text = item.Campaign.HasValue ?  item.Campaign.Value.ToString() : String.Empty;
Label_Price.Text = item.Price.HasValue ?  item.Price.Value.ToString() : String.Empty;
Label_ImagePath.Text = item.ImagePath.HasValue ?  item.ImagePath.Value.ToString() : String.Empty;
Label_CampaignPrice.Text = item.CampaignPrice.HasValue ?  item.CampaignPrice.Value.ToString() : String.Empty;
Label_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
Label_State.Text = item.State.ToString();
Label_Created_Date.Text = item.Created_Date.HasValue ?  item.Created_Date.Value.ToString() : String.Empty;
Label_ImageState.Text = item.ImageState.HasValue ?  item.ImageState.Value.ToString() : String.Empty;
Label_Lang.Text = item.Lang.HasValue ?  item.Lang.Value.ToString() : String.Empty;
Label_Code.Text = item.Code.HasValue ?  item.Code.Value.ToString() : String.Empty;
Label_KDV.Text = item.KDV.HasValue ?  item.KDV.Value.ToString() : String.Empty;
Label_Mark_ID.Text = item.Mark_ID.HasValue ?  item.Mark_ID.Value.ToString() : String.Empty;
Label_PriceType.Text = item.PriceType.HasValue ?  item.PriceType.Value.ToString() : String.Empty;
Label_Hit.Text = item.Hit.HasValue ?  item.Hit.Value.ToString() : String.Empty;
Label_Average_Rate.Text = item.Average_Rate.HasValue ?  item.Average_Rate.Value.ToString() : String.Empty;
}



Products  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_Products_ID" CssClass="db_Name"  Text="Products_ID" runat="server"></asp:Label>
<asp:Label ID="Label_Catalog_ID" CssClass="db_Name"  Text="Catalog_ID" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_ShortExplanation" CssClass="db_Name"  Text="Kısa Açıklama" runat="server"></asp:Label>
<asp:Label ID="Label_Detail" CssClass="db_Name"  Text="Detay" runat="server"></asp:Label>
<asp:Label ID="Label_MainPage" CssClass="db_Name"  Text="Ana Sayfa" runat="server"></asp:Label>
<asp:Label ID="Label_Campaign" CssClass="db_Name"  Text="Kampanya" runat="server"></asp:Label>
<asp:Label ID="Label_Price" CssClass="db_Name"  Text="Fiyat" runat="server"></asp:Label>
<asp:Label ID="Label_ImagePath" CssClass="db_Name"  Text="Resim" runat="server"></asp:Label>
<asp:Label ID="Label_CampaignPrice" CssClass="db_Name"  Text="Kampanya Fiyatı" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Created_Date" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
<asp:Label ID="Label_ImageState" CssClass="db_Name"  Text="Resim Durumu" runat="server"></asp:Label>
<asp:Label ID="Label_Lang" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>
<asp:Label ID="Label_Code" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_KDV" CssClass="db_Name"  Text="KDV" runat="server"></asp:Label>
<asp:Label ID="Label_Mark_ID" CssClass="db_Name"  Text="Mark_ID" runat="server"></asp:Label>
<asp:Label ID="Label_PriceType" CssClass="db_Name"  Text="Fiyat Tipi" runat="server"></asp:Label>
<asp:Label ID="Label_Hit" CssClass="db_Name"  Text="Hit" runat="server"></asp:Label>
<asp:Label ID="Label_Average_Rate" CssClass="db_Name"  Text="Average_Rate" runat="server"></asp:Label>



Products  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Products" runat="server" DataKeyNames="Products_ID" DataSourceID="SqlDataSource_Products">
<ItemTemplate>
<%#  Eval("Products_ID")  %>
<%#  Eval("Catalog_ID")  %>
<%#  Eval("Name")  %>
<%#  Eval("ShortExplanation")  %>
<%#  Eval("Detail")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Campaign")  %>
<%#  Eval("Price")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("CampaignPrice")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Code")  %>
<%#  Eval("KDV")  %>
<%#  Eval("Mark_ID")  %>
<%#  Eval("PriceType")  %>
<%#  Eval("Hit")  %>
<%#  Eval("Average_Rate")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Products" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Products_ID,Catalog_ID,Name,ShortExplanation,Detail,MainPage,Campaign,Price,ImagePath,CampaignPrice,Ordering,State,ImageState,Lang,Code,KDV,Mark_ID,PriceType,Hit,Average_Rate FROM Products WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Products  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Products" runat="server" DataKeyNames="Products_ID" DataSourceID="SqlDataSource_Products">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Products_ID</th>
<th>Catalog_ID</th>
<th>Name</th>
<th>ShortExplanation</th>
<th>Detail</th>
<th>MainPage</th>
<th>Campaign</th>
<th>Price</th>
<th>ImagePath</th>
<th>CampaignPrice</th>
<th>Ordering</th>
<th>State</th>
<th>ImageState</th>
<th>Lang</th>
<th>Code</th>
<th>KDV</th>
<th>Mark_ID</th>
<th>PriceType</th>
<th>Hit</th>
<th>Average_Rate</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Products_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Products_ID")  %>' /></td>
<td><asp:Label ID="Label_Catalog_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Catalog_ID")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_ShortExplanation" cssClass="evalCss" runat="server" Text='<%#  Eval("ShortExplanation")  %>' /></td>
<td><asp:Label ID="Label_Detail" cssClass="evalCss" runat="server" Text='<%#  Eval("Detail")  %>' /></td>
<td><asp:Label ID="Label_MainPage" cssClass="evalCss" runat="server" Text='<%#  Eval("MainPage")  %>' /></td>
<td><asp:Label ID="Label_Campaign" cssClass="evalCss" runat="server" Text='<%#  Eval("Campaign")  %>' /></td>
<td><asp:Label ID="Label_Price" cssClass="evalCss" runat="server" Text='<%#  Eval("Price")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_CampaignPrice" cssClass="evalCss" runat="server" Text='<%#  Eval("CampaignPrice")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_KDV" cssClass="evalCss" runat="server" Text='<%#  Eval("KDV")  %>' /></td>
<td><asp:Label ID="Label_Mark_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Mark_ID")  %>' /></td>
<td><asp:Label ID="Label_PriceType" cssClass="evalCss" runat="server" Text='<%#  Eval("PriceType")  %>' /></td>
<td><asp:Label ID="Label_Hit" cssClass="evalCss" runat="server" Text='<%#  Eval("Hit")  %>' /></td>
<td><asp:Label ID="Label_Average_Rate" cssClass="evalCss" runat="server" Text='<%#  Eval("Average_Rate")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Products_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Products_ID")  %>' /></td>
<td><asp:Label ID="Label_Catalog_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Catalog_ID")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_ShortExplanation" cssClass="evalCss" runat="server" Text='<%#  Eval("ShortExplanation")  %>' /></td>
<td><asp:Label ID="Label_Detail" cssClass="evalCss" runat="server" Text='<%#  Eval("Detail")  %>' /></td>
<td><asp:Label ID="Label_MainPage" cssClass="evalCss" runat="server" Text='<%#  Eval("MainPage")  %>' /></td>
<td><asp:Label ID="Label_Campaign" cssClass="evalCss" runat="server" Text='<%#  Eval("Campaign")  %>' /></td>
<td><asp:Label ID="Label_Price" cssClass="evalCss" runat="server" Text='<%#  Eval("Price")  %>' /></td>
<td><asp:Label ID="Label_ImagePath" cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' /></td>
<td><asp:Label ID="Label_CampaignPrice" cssClass="evalCss" runat="server" Text='<%#  Eval("CampaignPrice")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_ImageState" cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_KDV" cssClass="evalCss" runat="server" Text='<%#  Eval("KDV")  %>' /></td>
<td><asp:Label ID="Label_Mark_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Mark_ID")  %>' /></td>
<td><asp:Label ID="Label_PriceType" cssClass="evalCss" runat="server" Text='<%#  Eval("PriceType")  %>' /></td>
<td><asp:Label ID="Label_Hit" cssClass="evalCss" runat="server" Text='<%#  Eval("Hit")  %>' /></td>
<td><asp:Label ID="Label_Average_Rate" cssClass="evalCss" runat="server" Text='<%#  Eval("Average_Rate")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Products" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Products_ID,Catalog_ID,Name,ShortExplanation,Detail,MainPage,Campaign,Price,ImagePath,CampaignPrice,Ordering,State,ImageState,Lang,Code,KDV,Mark_ID,PriceType,Hit,Average_Rate FROM Products WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Products  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Products" runat="server" DataKeyNames="Products_ID" DataSourceID="SqlDataSource_Products">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Products_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Products_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_Catalog_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Catalog_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_ShortExplanation cssClass="evalCss" runat="server" Text='<%#  Eval("ShortExplanation")  %>' />
</td>
<td>
<asp:Label ID="Label_Detail cssClass="evalCss" runat="server" Text='<%#  Eval("Detail")  %>' />
</td>
<td>
<asp:Label ID="Label_MainPage cssClass="evalCss" runat="server" Text='<%#  Eval("MainPage")  %>' />
</td>
<td>
<asp:Label ID="Label_Campaign cssClass="evalCss" runat="server" Text='<%#  Eval("Campaign")  %>' />
</td>
<td>
<asp:Label ID="Label_Price cssClass="evalCss" runat="server" Text='<%#  Eval("Price")  %>' />
</td>
<td>
<asp:Label ID="Label_ImagePath cssClass="evalCss" runat="server" Text='<%#  Eval("ImagePath")  %>' />
</td>
<td>
<asp:Label ID="Label_CampaignPrice cssClass="evalCss" runat="server" Text='<%#  Eval("CampaignPrice")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_ImageState cssClass="evalCss" runat="server" Text='<%#  Eval("ImageState")  %>' />
</td>
<td>
<asp:Label ID="Label_Lang cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' />
</td>
<td>
<asp:Label ID="Label_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' />
</td>
<td>
<asp:Label ID="Label_KDV cssClass="evalCss" runat="server" Text='<%#  Eval("KDV")  %>' />
</td>
<td>
<asp:Label ID="Label_Mark_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Mark_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_PriceType cssClass="evalCss" runat="server" Text='<%#  Eval("PriceType")  %>' />
</td>
<td>
<asp:Label ID="Label_Hit cssClass="evalCss" runat="server" Text='<%#  Eval("Hit")  %>' />
</td>
<td>
<asp:Label ID="Label_Average_Rate cssClass="evalCss" runat="server" Text='<%#  Eval("Average_Rate")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Products" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Products_ID,Catalog_ID,Name,ShortExplanation,Detail,MainPage,Campaign,Price,ImagePath,CampaignPrice,Ordering,State,ImageState,Lang,Code,KDV,Mark_ID,PriceType,Hit,Average_Rate FROM Products WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Products  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Products" runat="server" DataKeyNames="Products_ID" DataSourceID="SqlDataSource_Products">
<ItemTemplate>
<%#  Eval("Products_ID")  %>
<%#  Eval("Catalog_ID")  %>
<%#  Eval("Name")  %>
<%#  Eval("ShortExplanation")  %>
<%#  Eval("Detail")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Campaign")  %>
<%#  Eval("Price")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("CampaignPrice")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Code")  %>
<%#  Eval("KDV")  %>
<%#  Eval("Mark_ID")  %>
<%#  Eval("PriceType")  %>
<%#  Eval("Hit")  %>
<%#  Eval("Average_Rate")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Products" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Products_ID,Catalog_ID,Name,ShortExplanation,Detail,MainPage,Campaign,Price,ImagePath,CampaignPrice,Ordering,State,ImageState,Lang,Code,KDV,Mark_ID,PriceType,Hit,Average_Rate FROM Products WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Products  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Products" runat="server" DataKeyNames="Products_ID" DataSourceID="SqlDataSource_Products">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%#  Eval("Products_ID")  %>
<%#  Eval("Catalog_ID")  %>
<%#  Eval("Name")  %>
<%#  Eval("ShortExplanation")  %>
<%#  Eval("Detail")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Campaign")  %>
<%#  Eval("Price")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("CampaignPrice")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Code")  %>
<%#  Eval("KDV")  %>
<%#  Eval("Mark_ID")  %>
<%#  Eval("PriceType")  %>
<%#  Eval("Hit")  %>
<%#  Eval("Average_Rate")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Products" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Products_ID,Catalog_ID,Name,ShortExplanation,Detail,MainPage,Campaign,Price,ImagePath,CampaignPrice,Ordering,State,ImageState,Lang,Code,KDV,Mark_ID,PriceType,Hit,Average_Rate FROM Products WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Products  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Products" runat="server" DataKeyNames="Products_ID" DataSourceID="SqlDataSource_Products">
<ItemTemplate>
<li class="Products">
<%#  Eval("Products_ID")  %>
<%#  Eval("Catalog_ID")  %>
<%#  Eval("Name")  %>
<%#  Eval("ShortExplanation")  %>
<%#  Eval("Detail")  %>
<%#  Eval("MainPage")  %>
<%#  Eval("Campaign")  %>
<%#  Eval("Price")  %>
<%#  Eval("ImagePath")  %>
<%#  Eval("CampaignPrice")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("ImageState")  %>
<%#  Eval("Lang")  %>
<%#  Eval("Code")  %>
<%#  Eval("KDV")  %>
<%#  Eval("Mark_ID")  %>
<%#  Eval("PriceType")  %>
<%#  Eval("Hit")  %>
<%#  Eval("Average_Rate")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Products" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Products_ID,Catalog_ID,Name,ShortExplanation,Detail,MainPage,Campaign,Price,ImagePath,CampaignPrice,Ordering,State,ImageState,Lang,Code,KDV,Mark_ID,PriceType,Hit,Average_Rate FROM Products WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Products  ------------------>  TextBox_Resource_to_XML <----------------




Products  ------------------>  TextBox_List_XML <----------------

<word Keyword="Products_ID" Translate="Products_ID"/>
<word Keyword="Catalog_ID" Translate="Catalog_ID"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="ShortExplanation" Translate="ShortExplanation"/>
<word Keyword="Detail" Translate="Detail"/>
<word Keyword="MainPage" Translate="MainPage"/>
<word Keyword="Campaign" Translate="Campaign"/>
<word Keyword="Price" Translate="Price"/>
<word Keyword="ImagePath" Translate="ImagePath"/>
<word Keyword="CampaignPrice" Translate="CampaignPrice"/>
<word Keyword="Ordering" Translate="Ordering"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Created_Date" Translate="Created_Date"/>
<word Keyword="ImageState" Translate="ImageState"/>
<word Keyword="Lang" Translate="Lang"/>
<word Keyword="Code" Translate="Code"/>
<word Keyword="KDV" Translate="KDV"/>
<word Keyword="Mark_ID" Translate="Mark_ID"/>
<word Keyword="PriceType" Translate="PriceType"/>
<word Keyword="Hit" Translate="Hit"/>
<word Keyword="Average_Rate" Translate="Average_Rate"/>



Products  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Products" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Products" runat="server" AllowPaging="True" DataKeyNames="Products_ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Products" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="Products_ID"  InsertVisible="False" Visible="False"  HeaderText="Products_ID" SortExpression="Products_ID" /> 
<asp:BoundField DataField="Catalog_ID"  InsertVisible="False" Visible="False"  HeaderText="Catalog_ID" SortExpression="Catalog_ID" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:BoundField DataField="ShortExplanation" HeaderText="Kısa Açıklama" SortExpression="ShortExplanation" /> 
<asp:BoundField DataField="Detail" HeaderText="Detay" SortExpression="Detail" /> 
<asp:CheckBoxField DataField="MainPage" HeaderText="Ana Sayfa" SortExpression="MainPage" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Products" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Products_ID,Catalog_ID,Name,ShortExplanation,Detail,MainPage FROM Products  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Products  ------------------>  TextBox_Veri <----------------

protected void generateProductsData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Products item = new Products();
//item.Catalog_ID= 1;
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.ShortExplanation=Guid.NewGuid().ToString().Replace("-"," ");
item.Detail="Detail";
item.MainPage=true;
item.Campaign=true;
item.Price= rand.Next(100);
item.ImagePath=Guid.NewGuid().ToString().Replace("-"," ");
item.CampaignPrice= rand.Next(100);
item.Ordering= rand.Next(1000);
item.State=true;
item.Created_Date= DateTime.Now;
item.ImageState=true;
item.Lang=Guid.NewGuid().ToString().Replace("-"," ");
item.Code=Guid.NewGuid().ToString().Replace("-"," ");
item.KDV= rand.Next(1000);
//item.Mark_ID= 1;
item.PriceType="PriceType";
item.Hit= rand.Next(1000);
item.Average_Rate= rand.Next(100);
data.Productss.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Products  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE ProductsInsert(
@Catalog_ID int,
@Name nvarchar(100),
@ShortExplanation nvarchar(500),
@Detail text,
@MainPage bit,
@Campaign bit,
@Price float,
@ImagePath nvarchar(100),
@CampaignPrice float,
@Ordering int,
@State bit,
@Created_Date datetime,
@ImageState bit,
@Lang nvarchar(50),
@Code nvarchar(50),
@KDV int,
@Mark_ID int,
@PriceType varchar(10),
@Hit int,
@Average_Rate float)
AS INSERT INTO Products(
Catalog_ID,Name,ShortExplanation,Detail,MainPage,Campaign,Price,ImagePath,CampaignPrice,Ordering,State,Created_Date,ImageState,Lang,Code,KDV,Mark_ID,PriceType,Hit,Average_Rate) VALUES (
@Catalog_ID,@Name,@ShortExplanation,@Detail,@MainPage,@Campaign,@Price,@ImagePath,@CampaignPrice,@Ordering,@State,@Created_Date,@ImageState,@Lang,@Code,@KDV,@Mark_ID,@PriceType,@Hit,@Average_Rate)
RETURN
----------------------------------------------
CREATE PROCEDURE ProductsUPDATE(
@Products_ID int,
@Catalog_ID int,
@Name nvarchar(100),
@ShortExplanation nvarchar(500),
@Detail text,
@MainPage bit,
@Campaign bit,
@Price float,
@ImagePath nvarchar(100),
@CampaignPrice float,
@Ordering int,
@State bit,
@Created_Date datetime,
@ImageState bit,
@Lang nvarchar(50),
@Code nvarchar(50),
@KDV int,
@Mark_ID int,
@PriceType varchar(10),
@Hit int,
@Average_Rate float)
AS UPDATE Products SET
Catalog_ID = @Catalog_ID,
Name = @Name,
ShortExplanation = @ShortExplanation,
Detail = @Detail,
MainPage = @MainPage,
Campaign = @Campaign,
Price = @Price,
ImagePath = @ImagePath,
CampaignPrice = @CampaignPrice,
Ordering = @Ordering,
State = @State,
Created_Date = @Created_Date,
ImageState = @ImageState,
Lang = @Lang,
Code = @Code,
KDV = @KDV,
Mark_ID = @Mark_ID,
PriceType = @PriceType,
Hit = @Hit,
Average_Rate = @Average_Rate
WHERE Products_ID=@Products_ID;
RETURN
----------------------------------------------
CREATE PROCEDURE ProductsDelete(
@Products_ID int
)
AS DELETE FROM Products WHERE Products_ID = @Products_ID;
RETURN



Products  ------------------>  TextBox_State <----------------

Products_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;19;True;True;False;False;TextBox_Products_ID
Catalog_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;4;False;True;False;False;TextBox_Catalog_ID
Name;NO;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;15;False;True;True;True;TextBox_Name
ShortExplanation;NO;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;20;False;True;True;True;TextBox_ShortExplanation
Detail;YES;text;2147483647;text;textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;5;False;7;False;True;True;True;TextBox_Detail
MainPage;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;6;False;13;False;True;True;True;CheckBox_MainPage
Campaign;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;7;False;2;False;False;False;False;CheckBox_Campaign
Price;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;17;False;False;False;False;TextBox_Price
ImagePath;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_ImagePath
CampaignPrice;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;3;False;False;False;False;TextBox_CampaignPrice
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;16;False;False;False;False;TextBox_Ordering
State;NO;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;12;False;21;False;False;False;False;CheckBox_State
Created_Date;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;True;6;False;False;False;False;
ImageState;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;14;False;10;False;False;False;False;CheckBox_ImageState
Lang;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;12;False;False;False;False;TextBox_Lang
Code;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;5;False;False;False;False;TextBox_Code
KDV;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;17;False;11;False;False;False;False;TextBox_KDV
Mark_ID;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;14;False;False;False;False;TextBox_Mark_ID
PriceType;YES;varchar;10;varchar(10);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;18;False;False;False;False;TextBox_PriceType
Hit;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;20;False;8;False;False;False;False;TextBox_Hit
Average_Rate;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;21;False;1;False;False;False;False;TextBox_Average_Rate



Products  ------------------>  TextBox_InsertMethod <----------------

public void  insertProducts(Products myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Products (Catalog_ID, Name, ShortExplanation, Detail, MainPage, Campaign, Price, ImagePath, CampaignPrice, Ordering, State, Created_Date, ImageState, Lang, Code, KDV, Mark_ID, PriceType, Hit, Average_Rate) values (@Catalog_ID, @Name, @ShortExplanation, @Detail, @MainPage, @Campaign, @Price, @ImagePath, @CampaignPrice, @Ordering, @State, @Created_Date, @ImageState, @Lang, @Code, @KDV, @Mark_ID, @PriceType, @Hit, @Average_Rate)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,Products item)
 {
command.Parameters.AddWithValue("@Catalog_ID", item.Catalog_ID);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Detail", item.Detail);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Campaign", item.Campaign);
command.Parameters.AddWithValue("@Price", item.Price);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@CampaignPrice", item.CampaignPrice);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@KDV", item.KDV);
command.Parameters.AddWithValue("@Mark_ID", item.Mark_ID);
command.Parameters.AddWithValue("@PriceType", item.PriceType);
command.Parameters.AddWithValue("@Hit", item.Hit);
command.Parameters.AddWithValue("@Average_Rate", item.Average_Rate);
 }




Products  ------------------>  TextBox_UpdateMethod <----------------

public void  updateProducts(Products myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Products SET  Catalog_ID=@Catalog_ID, Name=@Name, ShortExplanation=@ShortExplanation, Detail=@Detail, MainPage=@MainPage, Campaign=@Campaign, Price=@Price, ImagePath=@ImagePath, CampaignPrice=@CampaignPrice, Ordering=@Ordering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Code=@Code, KDV=@KDV, Mark_ID=@Mark_ID, PriceType=@PriceType, Hit=@Hit, Average_Rate=@Average_Rate  WHERE Products_ID= @Products_ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,Products item)
 {
command.Parameters.AddWithValue("@Catalog_ID", item.Catalog_ID);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Detail", item.Detail);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Campaign", item.Campaign);
command.Parameters.AddWithValue("@Price", item.Price);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@CampaignPrice", item.CampaignPrice);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@KDV", item.KDV);
command.Parameters.AddWithValue("@Mark_ID", item.Mark_ID);
command.Parameters.AddWithValue("@PriceType", item.PriceType);
command.Parameters.AddWithValue("@Hit", item.Hit);
command.Parameters.AddWithValue("@Average_Rate", item.Average_Rate);
 }




Products  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteProducts(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Products WHERE Products_ID= @Products_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Products  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getProductsWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Products WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getProducts(sql, list.ToArray());
}
public List<Products> getProducts (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Products  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getProducts (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Products  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public Products getProducts (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

Products item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Products WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getProductsCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Products  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getProducts (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Products  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getAllProductsItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Products";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Products  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getProductsItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Products WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Products  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertProducts(Products myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Products (Catalog_ID, Name, ShortExplanation, Detail, MainPage, Campaign, Price, ImagePath, CampaignPrice, Ordering, State, Created_Date, ImageState, Lang, Code, KDV, Mark_ID, PriceType, Hit, Average_Rate) values (@Catalog_ID, @Name, @ShortExplanation, @Detail, @MainPage, @Campaign, @Price, @ImagePath, @CampaignPrice, @Ordering, @State, @Created_Date, @ImageState, @Lang, @Code, @KDV, @Mark_ID, @PriceType, @Hit, @Average_Rate)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,Products item)
 {
command.Parameters.AddWithValue("@Catalog_ID", item.Catalog_ID);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Detail", item.Detail);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Campaign", item.Campaign);
command.Parameters.AddWithValue("@Price", item.Price);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@CampaignPrice", item.CampaignPrice);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@KDV", item.KDV);
command.Parameters.AddWithValue("@Mark_ID", item.Mark_ID);
command.Parameters.AddWithValue("@PriceType", item.PriceType);
command.Parameters.AddWithValue("@Hit", item.Hit);
command.Parameters.AddWithValue("@Average_Rate", item.Average_Rate);
 }




Products  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateProducts(Products myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Products SET  Catalog_ID=@Catalog_ID, Name=@Name, ShortExplanation=@ShortExplanation, Detail=@Detail, MainPage=@MainPage, Campaign=@Campaign, Price=@Price, ImagePath=@ImagePath, CampaignPrice=@CampaignPrice, Ordering=@Ordering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Code=@Code, KDV=@KDV, Mark_ID=@Mark_ID, PriceType=@PriceType, Hit=@Hit, Average_Rate=@Average_Rate  WHERE Products_ID= @Products_ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Products  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteProducts(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Products WHERE Products_ID= @Products_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Products  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<Products> getProducts (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Products  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<Products> getProducts (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Products  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public Products getProducts (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

Products item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Products WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getProductsCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Products  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertProducts(Products myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Products (Catalog_ID, Name, ShortExplanation, Detail, MainPage, Campaign, Price, ImagePath, CampaignPrice, Ordering, State, Created_Date, ImageState, Lang, Code, KDV, Mark_ID, PriceType, Hit, Average_Rate) values (@Catalog_ID, @Name, @ShortExplanation, @Detail, @MainPage, @Campaign, @Price, @ImagePath, @CampaignPrice, @Ordering, @State, @Created_Date, @ImageState, @Lang, @Code, @KDV, @Mark_ID, @PriceType, @Hit, @Average_Rate)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,Products item)
 {
command.Parameters.AddWithValue("@Catalog_ID", item.Catalog_ID);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Detail", item.Detail);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Campaign", item.Campaign);
command.Parameters.AddWithValue("@Price", item.Price);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@CampaignPrice", item.CampaignPrice);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@KDV", item.KDV);
command.Parameters.AddWithValue("@Mark_ID", item.Mark_ID);
command.Parameters.AddWithValue("@PriceType", item.PriceType);
command.Parameters.AddWithValue("@Hit", item.Hit);
command.Parameters.AddWithValue("@Average_Rate", item.Average_Rate);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertProductsALL(List<Products> list)
{
foreach (Products i in list)
{
this.insertProducts(i);
}
}



Products  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateProducts(Products myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Products SET  Catalog_ID=@Catalog_ID, Name=@Name, ShortExplanation=@ShortExplanation, Detail=@Detail, MainPage=@MainPage, Campaign=@Campaign, Price=@Price, ImagePath=@ImagePath, CampaignPrice=@CampaignPrice, Ordering=@Ordering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Code=@Code, KDV=@KDV, Mark_ID=@Mark_ID, PriceType=@PriceType, Hit=@Hit, Average_Rate=@Average_Rate  WHERE Products_ID= @Products_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@Products_ID", myItem.Products_ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateProductsALL(List<Products> list)
{
foreach (Products i in list)
{
this.updateProducts(i);
}
}



Products  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteProducts(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Products WHERE Products_ID= @Products_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@Products_ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteProductsALL(List<Products> list)
{
foreach (Products i in list)
{
this.deleteProducts(i.Products_ID);
}
}



Products  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<Products> getProducts (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Products  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getProductsWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Products WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getProducts(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getProducts (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Products  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public Products getProducts (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

Products item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Products WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getProductsCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}
}



Products  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getProducts (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Products  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getAllProductsItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Products";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Products  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Products> getProductsItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Products WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}
}



Products  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertProducts(Products myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Products (Catalog_ID, Name, ShortExplanation, Detail, MainPage, Campaign, Price, ImagePath, CampaignPrice, Ordering, State, Created_Date, ImageState, Lang, Code, KDV, Mark_ID, PriceType, Hit, Average_Rate) values (@Catalog_ID, @Name, @ShortExplanation, @Detail, @MainPage, @Campaign, @Price, @ImagePath, @CampaignPrice, @Ordering, @State, @Created_Date, @ImageState, @Lang, @Code, @KDV, @Mark_ID, @PriceType, @Hit, @Average_Rate)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,Products item)
 {
command.Parameters.AddWithValue("@Catalog_ID", item.Catalog_ID);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@ShortExplanation", item.ShortExplanation);
command.Parameters.AddWithValue("@Detail", item.Detail);
command.Parameters.AddWithValue("@MainPage", item.MainPage);
command.Parameters.AddWithValue("@Campaign", item.Campaign);
command.Parameters.AddWithValue("@Price", item.Price);
command.Parameters.AddWithValue("@ImagePath", item.ImagePath);
command.Parameters.AddWithValue("@CampaignPrice", item.CampaignPrice);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@ImageState", item.ImageState);
command.Parameters.AddWithValue("@Lang", item.Lang);
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@KDV", item.KDV);
command.Parameters.AddWithValue("@Mark_ID", item.Mark_ID);
command.Parameters.AddWithValue("@PriceType", item.PriceType);
command.Parameters.AddWithValue("@Hit", item.Hit);
command.Parameters.AddWithValue("@Average_Rate", item.Average_Rate);
 }




Products  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateProducts(Products myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Products SET  Catalog_ID=@Catalog_ID, Name=@Name, ShortExplanation=@ShortExplanation, Detail=@Detail, MainPage=@MainPage, Campaign=@Campaign, Price=@Price, ImagePath=@ImagePath, CampaignPrice=@CampaignPrice, Ordering=@Ordering, State=@State, Created_Date=@Created_Date, ImageState=@ImageState, Lang=@Lang, Code=@Code, KDV=@KDV, Mark_ID=@Mark_ID, PriceType=@PriceType, Hit=@Hit, Average_Rate=@Average_Rate  WHERE Products_ID= @Products_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Products  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteProducts(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Products WHERE Products_ID= @Products_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@Products_ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Products  ------------------>  TextBox_OracleSelectMethod <----------------

public List<Products> getProducts (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Products  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<Products> getProducts (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<Products> listItem = new List<Products>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getProductsCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Products  ------------------>  TextBox_OracleSelectMethod3 <----------------

public Products getProducts (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

Products item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Products WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getProductsCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Products  ------------------>  TextBox_MyTableItem <----------------

public int Products_ID { get; set; }
public int Catalog_ID { get; set; }
public string Name { get; set; }
public string ShortExplanation { get; set; }
public string Detail { get; set; }
public Boolean MainPage { get; set; }
public Boolean Campaign { get; set; }
public float Price { get; set; }
public string ImagePath { get; set; }
public float CampaignPrice { get; set; }
public int Ordering { get; set; }
public Boolean State { get; set; }
public DateTime Created_Date { get; set; }
public Boolean ImageState { get; set; }
public string Lang { get; set; }
public string Code { get; set; }
public int KDV { get; set; }
public int Mark_ID { get; set; }
public string PriceType { get; set; }
public int Hit { get; set; }
public float Average_Rate { get; set; }




Products  ------------------>  TextBox2 <----------------




Products  ------------------>  TextBox_IReader <----------------

public Products getProductsCollectionFromReader (IDataRecord  read)
{
Products item = new Products();

item.Products_ID = (read["Products_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Products_ID"].ToString());
item.Catalog_ID = (read["Catalog_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Catalog_ID"].ToString());
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.ShortExplanation = (read["ShortExplanation"] is DBNull) ? "" : read["ShortExplanation"].ToString();
item.MainPage = (read["MainPage"] is DBNull) ? false : Boolean.Parse(read["MainPage"].ToString());
item.Campaign = (read["Campaign"] is DBNull) ? false : Boolean.Parse(read["Campaign"].ToString());
item.Price = (read["Price"] is DBNull) ? -1 : float.Parse(read["Price"].ToString());
item.ImagePath = (read["ImagePath"] is DBNull) ? "" : read["ImagePath"].ToString();
item.CampaignPrice = (read["CampaignPrice"] is DBNull) ? -1 : float.Parse(read["CampaignPrice"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Created_Date = (read["Created_Date"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Created_Date"].ToString());
item.ImageState = (read["ImageState"] is DBNull) ? false : Boolean.Parse(read["ImageState"].ToString());
item.Lang = (read["Lang"] is DBNull) ? "" : read["Lang"].ToString();
item.Code = (read["Code"] is DBNull) ? "" : read["Code"].ToString();
item.KDV = (read["KDV"] is DBNull) ? -1 : Convert.ToInt32(read["KDV"].ToString());
item.Mark_ID = (read["Mark_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Mark_ID"].ToString());
item.PriceType = (read["PriceType"] is DBNull) ? "" : read["PriceType"].ToString();
item.Hit = (read["Hit"] is DBNull) ? -1 : Convert.ToInt32(read["Hit"].ToString());
item.Average_Rate = (read["Average_Rate"] is DBNull) ? -1 : float.Parse(read["Average_Rate"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Comment
TARİH = 10 Aralık 2010 Cuma 21:49:16


ID    ----->    TextBoxMax_
Title    ----->    TextBoxMax_
Comment    ----->    TextBoxMax_
Product_ID    ----->    TextBoxMax_
State    ----->    CheckBox_
Created_Date    ----->    TextBoxMax_
Users_ID    ----->    TextBoxMax_
Rate    ----->    TextBoxMax_



Comment  ------------------>  TextBox_In <----------------

protected bool retrieveData( Comment item, Label mesaj){
if(item != null){
try{
TextBox_Title.Text = string.IsNullOrEmpty(item.Title) ? String.Empty : item.Title;
TextBox_Comment.Text = string.IsNullOrEmpty(item.Comment) ? String.Empty : item.Comment;
TextBox_Product_ID.Text = item.Product_ID.ToString();
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
TextBox_Users_ID.Text = item.Users_ID.HasValue ?  item.Users_ID.Value.ToString() : String.Empty;
TextBox_Rate.Text = item.Rate.HasValue ?  item.Rate.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Comment  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Comment">
<tr  id="tr_Title" runat="server">
<td class="name">
<asp:Label ID="Label_Title" CssClass="Label_Deger" runat="server" Text="Başlık"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Title" CssClass="textBox_NORMAL" ValidationGroup="Comment" MaxLength="100" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Comment" runat="server">
<td class="name">
<asp:Label ID="Label_Comment" CssClass="Label_Deger" runat="server" Text="Comment"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Comment" CssClass="textBox_NORMAL" ValidationGroup="Comment" MaxLength="500" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Product_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Product_ID" CssClass="Label_Deger" runat="server" Text="Product_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Product_ID"  CssClass="textBox_NORMAL" ValidationGroup="Comment" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Comment" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_Users_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Users_ID" CssClass="Label_Deger" runat="server" Text="Users_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Users_ID"  CssClass="textBox_NORMAL" ValidationGroup="Comment" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Rate" runat="server">
<td class="name">
<asp:Label ID="Label_Rate" CssClass="Label_Deger" runat="server" Text="Rate"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Rate"  CssClass="textBox_NORMAL" ValidationGroup="Comment" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Comment  ------------------>  TextBox_Insert <----------------

protected bool initialize(Comment item,Label mesaj){
if(item != null){
try{
//item.ID=-1;
item.Title=TextBox_Title.Text.Trim();
item.Comment=TextBox_Comment.Text.Trim();
if(func.isInteger(TextBox_Product_ID.Text))
item.Product_ID= Convert.ToInt32(TextBox_Product_ID.Text.Trim());
item.State=CheckBox_State.Checked;
//item.Created_Date=DateTime.Now;
if(func.isInteger(TextBox_Users_ID.Text))
item.Users_ID= Convert.ToInt32(TextBox_Users_ID.Text.Trim());
if(func.isInteger(TextBox_Rate.Text))
item.Rate= Convert.ToInt32(TextBox_Rate.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Comment  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Comment"  CssClass="Ei_Labels" runat="server">
<table class="Comment">
<tr>
<td class="name">
<asp:Label ID="Label_ID_1" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Title_1" CssClass="db_Name"  Text="Başlık" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Title" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Comment_1" CssClass="db_Name"  Text="Comment" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Comment" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Product_ID_1" CssClass="db_Name"  Text="Product_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Product_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Created_Date_1" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Created_Date" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Users_ID_1" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Users_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Rate_1" CssClass="db_Name"  Text="Rate" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Rate" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Comment  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Comment item){
Label_ID.Text = item.ID.ToString();
Label_Title.Text = item.Title.HasValue ?  item.Title.Value.ToString() : String.Empty;
Label_Comment.Text = item.Comment.HasValue ?  item.Comment.Value.ToString() : String.Empty;
Label_Product_ID.Text = item.Product_ID.ToString();
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Created_Date.Text = item.Created_Date.HasValue ?  item.Created_Date.Value.ToString() : String.Empty;
Label_Users_ID.Text = item.Users_ID.HasValue ?  item.Users_ID.Value.ToString() : String.Empty;
Label_Rate.Text = item.Rate.HasValue ?  item.Rate.Value.ToString() : String.Empty;
}



Comment  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_ID" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
<asp:Label ID="Label_Title" CssClass="db_Name"  Text="Başlık" runat="server"></asp:Label>
<asp:Label ID="Label_Comment" CssClass="db_Name"  Text="Comment" runat="server"></asp:Label>
<asp:Label ID="Label_Product_ID" CssClass="db_Name"  Text="Product_ID" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Created_Date" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
<asp:Label ID="Label_Users_ID" CssClass="db_Name"  Text="Users_ID" runat="server"></asp:Label>
<asp:Label ID="Label_Rate" CssClass="db_Name"  Text="Rate" runat="server"></asp:Label>



Comment  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Comment" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Comment">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Title")  %>
<%#  Eval("Comment")  %>
<%#  Eval("Product_ID")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Users_ID")  %>
<%#  Eval("Rate")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Comment" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Title,Comment,Product_ID,State,Users_ID,Rate FROM Comment WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Comment  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Comment" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Comment">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Title</th>
<th>Comment</th>
<th>Product_ID</th>
<th>State</th>
<th>Users_ID</th>
<th>Rate</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Title" cssClass="evalCss" runat="server" Text='<%#  Eval("Title")  %>' /></td>
<td><asp:Label ID="Label_Comment" cssClass="evalCss" runat="server" Text='<%#  Eval("Comment")  %>' /></td>
<td><asp:Label ID="Label_Product_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Product_ID")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_Rate" cssClass="evalCss" runat="server" Text='<%#  Eval("Rate")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Title" cssClass="evalCss" runat="server" Text='<%#  Eval("Title")  %>' /></td>
<td><asp:Label ID="Label_Comment" cssClass="evalCss" runat="server" Text='<%#  Eval("Comment")  %>' /></td>
<td><asp:Label ID="Label_Product_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Product_ID")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Users_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' /></td>
<td><asp:Label ID="Label_Rate" cssClass="evalCss" runat="server" Text='<%#  Eval("Rate")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Comment" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Title,Comment,Product_ID,State,Users_ID,Rate FROM Comment WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Comment  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Comment" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Comment">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Title cssClass="evalCss" runat="server" Text='<%#  Eval("Title")  %>' />
</td>
<td>
<asp:Label ID="Label_Comment cssClass="evalCss" runat="server" Text='<%#  Eval("Comment")  %>' />
</td>
<td>
<asp:Label ID="Label_Product_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Product_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_Users_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Users_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_Rate cssClass="evalCss" runat="server" Text='<%#  Eval("Rate")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Comment" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Title,Comment,Product_ID,State,Users_ID,Rate FROM Comment WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Comment  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Comment" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Comment">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Title")  %>
<%#  Eval("Comment")  %>
<%#  Eval("Product_ID")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Users_ID")  %>
<%#  Eval("Rate")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Comment" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Title,Comment,Product_ID,State,Users_ID,Rate FROM Comment WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Comment  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Comment" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Comment">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Title")  %>
<%#  Eval("Comment")  %>
<%#  Eval("Product_ID")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Users_ID")  %>
<%#  Eval("Rate")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Comment" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Title,Comment,Product_ID,State,Users_ID,Rate FROM Comment WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Comment  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Comment" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Comment">
<ItemTemplate>
<li class="Comment">
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Title")  %>
<%#  Eval("Comment")  %>
<%#  Eval("Product_ID")  %>
<%#  Eval("State")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("Users_ID")  %>
<%#  Eval("Rate")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Comment" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Title,Comment,Product_ID,State,Users_ID,Rate FROM Comment WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Comment  ------------------>  TextBox_Resource_to_XML <----------------




Comment  ------------------>  TextBox_List_XML <----------------

<word Keyword="Title" Translate="Title"/>
<word Keyword="Comment" Translate="Comment"/>
<word Keyword="Product_ID" Translate="Product_ID"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Created_Date" Translate="Created_Date"/>
<word Keyword="Users_ID" Translate="Users_ID"/>
<word Keyword="Rate" Translate="Rate"/>



Comment  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Comment" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Comment" runat="server" AllowPaging="True" DataKeyNames="ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Comment" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="ID"  InsertVisible="False" Visible="False"  HeaderText="ID" SortExpression="ID" /> 
<asp:BoundField DataField="Title" HeaderText="Başlık" SortExpression="Title" /> 
<asp:BoundField DataField="Comment" HeaderText="Comment" SortExpression="Comment" /> 
<asp:BoundField DataField="Product_ID"  InsertVisible="False" Visible="False"  HeaderText="Product_ID" SortExpression="Product_ID" /> 
<asp:CheckBoxField DataField="State" HeaderText="Durum" SortExpression="State" /> 
<asp:BoundField DataField="Created_Date" DataFormatString="{0:d}" HeaderText="Oluşturma Tarihi" SortExpression="Created_Date" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Comment" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ID,Title,Comment,Product_ID,State,Created_Date FROM Comment  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Comment  ------------------>  TextBox_Veri <----------------

protected void generateCommentData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Comment item = new Comment();
item.Title=Guid.NewGuid().ToString().Replace("-"," ");
item.Comment=Guid.NewGuid().ToString().Replace("-"," ");
//item.Product_ID= 1;
item.State=true;
item.Created_Date= DateTime.Now;
//item.Users_ID= 1;
item.Rate= rand.Next(1000);
data.Comments.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Comment  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE CommentInsert(
@Title nvarchar(100),
@Comment nvarchar(500),
@Product_ID int,
@State bit,
@Created_Date datetime,
@Users_ID int,
@Rate int)
AS INSERT INTO Comment(
Title,Comment,Product_ID,State,Created_Date,Users_ID,Rate) VALUES (
@Title,@Comment,@Product_ID,@State,@Created_Date,@Users_ID,@Rate)
RETURN
----------------------------------------------
CREATE PROCEDURE CommentUPDATE(
@ID int,
@Title nvarchar(100),
@Comment nvarchar(500),
@Product_ID int,
@State bit,
@Created_Date datetime,
@Users_ID int,
@Rate int)
AS UPDATE Comment SET
Title = @Title,
Comment = @Comment,
Product_ID = @Product_ID,
State = @State,
Created_Date = @Created_Date,
Users_ID = @Users_ID,
Rate = @Rate
WHERE ID=@ID;
RETURN
----------------------------------------------
CREATE PROCEDURE CommentDelete(
@ID int
)
AS DELETE FROM Comment WHERE ID = @ID;
RETURN



Comment  ------------------>  TextBox_State <----------------

ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;3;True;True;False;False;
Title;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;7;False;True;True;True;TextBox_Title
Comment;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;1;False;True;True;True;TextBox_Comment
Product_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;False;False;TextBox_Product_ID
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;5;False;6;False;True;True;True;CheckBox_State
Created_Date;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;True;2;False;True;True;True;
Users_ID;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;8;False;False;False;False;TextBox_Users_ID
Rate;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;5;False;False;False;False;TextBox_Rate



Comment  ------------------>  TextBox_InsertMethod <----------------

public void  insertComment(Comment myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Comment (Title, Comment, Product_ID, State, Created_Date, Users_ID, Rate) values (@Title, @Comment, @Product_ID, @State, @Created_Date, @Users_ID, @Rate)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,Comment item)
 {
command.Parameters.AddWithValue("@Title", item.Title);
command.Parameters.AddWithValue("@Comment", item.Comment);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@Rate", item.Rate);
 }




Comment  ------------------>  TextBox_UpdateMethod <----------------

public void  updateComment(Comment myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Comment SET  Title=@Title, Comment=@Comment, Product_ID=@Product_ID, State=@State, Created_Date=@Created_Date, Users_ID=@Users_ID, Rate=@Rate  WHERE ID= @ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,Comment item)
 {
command.Parameters.AddWithValue("@Title", item.Title);
command.Parameters.AddWithValue("@Comment", item.Comment);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@Rate", item.Rate);
 }




Comment  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteComment(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Comment WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Comment  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getCommentWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Comment WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getComment(sql, list.ToArray());
}
public List<Comment> getComment (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getComment (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public Comment getComment (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

Comment item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Comment WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getCommentCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Comment  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getComment (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getAllCommentItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Comment";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getCommentItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Comment WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertComment(Comment myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Comment (Title, Comment, Product_ID, State, Created_Date, Users_ID, Rate) values (@Title, @Comment, @Product_ID, @State, @Created_Date, @Users_ID, @Rate)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,Comment item)
 {
command.Parameters.AddWithValue("@Title", item.Title);
command.Parameters.AddWithValue("@Comment", item.Comment);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@Rate", item.Rate);
 }




Comment  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateComment(Comment myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Comment SET  Title=@Title, Comment=@Comment, Product_ID=@Product_ID, State=@State, Created_Date=@Created_Date, Users_ID=@Users_ID, Rate=@Rate  WHERE ID= @ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Comment  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteComment(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Comment WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Comment  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<Comment> getComment (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<Comment> getComment (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public Comment getComment (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

Comment item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Comment WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getCommentCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Comment  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertComment(Comment myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Comment (Title, Comment, Product_ID, State, Created_Date, Users_ID, Rate) values (@Title, @Comment, @Product_ID, @State, @Created_Date, @Users_ID, @Rate)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
private void setParametersAddWithValue(OleDbCommand command,Comment item)
 {
command.Parameters.AddWithValue("@Title", item.Title);
command.Parameters.AddWithValue("@Comment", item.Comment);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@Rate", item.Rate);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertCommentALL(List<Comment> list)
{
foreach (Comment i in list)
{
this.insertComment(i);
}
}



Comment  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateComment(Comment myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Comment SET  Title=@Title, Comment=@Comment, Product_ID=@Product_ID, State=@State, Created_Date=@Created_Date, Users_ID=@Users_ID, Rate=@Rate  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@ID", myItem.ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateCommentALL(List<Comment> list)
{
foreach (Comment i in list)
{
this.updateComment(i);
}
}



Comment  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteComment(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Comment WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
catch (Exception)
 {
 return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteCommentALL(List<Comment> list)
{
foreach (Comment i in list)
{
this.deleteComment(i.ID);
}
}



Comment  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<Comment> getComment (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getCommentWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Comment WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getComment(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getComment (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public Comment getComment (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

Comment item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Comment WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getCommentCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Comment  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getComment (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getAllCommentItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Comment";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Comment> getCommentItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Comment WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertComment(Comment myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Comment (Title, Comment, Product_ID, State, Created_Date, Users_ID, Rate) values (@Title, @Comment, @Product_ID, @State, @Created_Date, @Users_ID, @Rate)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,Comment item)
 {
command.Parameters.AddWithValue("@Title", item.Title);
command.Parameters.AddWithValue("@Comment", item.Comment);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@Users_ID", item.Users_ID);
command.Parameters.AddWithValue("@Rate", item.Rate);
 }




Comment  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateComment(Comment myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Comment SET  Title=@Title, Comment=@Comment, Product_ID=@Product_ID, State=@State, Created_Date=@Created_Date, Users_ID=@Users_ID, Rate=@Rate  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Comment  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteComment(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Comment WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Comment  ------------------>  TextBox_OracleSelectMethod <----------------

public List<Comment> getComment (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<Comment> getComment (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<Comment> listItem = new List<Comment>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getCommentCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Comment  ------------------>  TextBox_OracleSelectMethod3 <----------------

public Comment getComment (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

Comment item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Comment WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getCommentCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Comment  ------------------>  TextBox_MyTableItem <----------------

public int ID { get; set; }
public string Title { get; set; }
public string Comment { get; set; }
public int Product_ID { get; set; }
public Boolean State { get; set; }
public DateTime Created_Date { get; set; }
public int Users_ID { get; set; }
public int Rate { get; set; }




Comment  ------------------>  TextBox2 <----------------




Comment  ------------------>  TextBox_IReader <----------------

public Comment getCommentCollectionFromReader (IDataRecord  read)
{
Comment item = new Comment();

item.ID = (read["ID"] is DBNull) ? -1 : Convert.ToInt32(read["ID"].ToString());
item.Title = (read["Title"] is DBNull) ? "" : read["Title"].ToString();
item.Comment = (read["Comment"] is DBNull) ? "" : read["Comment"].ToString();
item.Product_ID = (read["Product_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Product_ID"].ToString());
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Created_Date = (read["Created_Date"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Created_Date"].ToString());
item.Users_ID = (read["Users_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Users_ID"].ToString());
item.Rate = (read["Rate"] is DBNull) ? -1 : Convert.ToInt32(read["Rate"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Lang
TARİH = 10 Aralık 2010 Cuma 22:04:58


ID    ----->    TextBoxMax_
Code    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
State    ----->    CheckBox_
Ordering    ----->    TextBoxMax_



Lang  ------------------>  TextBox_In <----------------

protected bool retrieveData( Lang item, Label mesaj){
if(item != null){
try{
TextBox_Code.Text = item.Code.ToString();
TextBox_Name.Text = string.IsNullOrEmpty(item.Name) ? String.Empty : item.Name;
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
TextBox_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Lang">
<tr  id="tr_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Code" CssClass="Label_Deger" runat="server" Text="Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Code" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Lang" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Lang" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox_Insert <----------------

protected bool initialize(Lang item,Label mesaj){
if(item != null){
try{
//item.ID=-1;
item.Code=TextBox_Code.Text.Trim();
item.Name=TextBox_Name.Text.Trim();
item.State=CheckBox_State.Checked;
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Lang"  CssClass="Ei_Labels" runat="server">
<table class="Lang">
<tr>
<td class="name">
<asp:Label ID="Label_ID_1" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Code_1" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Lang item){
Label_ID.Text = item.ID.ToString();
Label_Code.Text = item.Code.ToString();
Label_Name.Text = item.Name.HasValue ?  item.Name.Value.ToString() : String.Empty;
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
}



Lang  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_ID" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
<asp:Label ID="Label_Code" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>



Lang  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Code</th>
<th>Name</th>
<th>State</th>
<th>Ordering</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="Lang">
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_Resource_to_XML <----------------




Lang  ------------------>  TextBox_List_XML <----------------

<word Keyword="Code" Translate="Code"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Ordering" Translate="Ordering"/>



Lang  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Lang" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Lang" runat="server" AllowPaging="True" DataKeyNames="ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Lang" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="ID"  InsertVisible="False" Visible="False"  HeaderText="ID" SortExpression="ID" /> 
<asp:BoundField DataField="Code" HeaderText="Kodu" SortExpression="Code" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:CheckBoxField DataField="State" HeaderText="Durum" SortExpression="State" /> 
 <asp:TemplateField HeaderText="Sırası" SortExpression="Ordering">
<ItemTemplate>
<asp:TextBox ID="TextBox_Order" CssClass="siraNo" runat="server" Text='<%# Bind("Ordering") %>'></asp:TextBox>
</ItemTemplate>
</asp:TemplateField>
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ID,Code,Name,State,Ordering FROM Lang  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Lang  ------------------>  TextBox_Veri <----------------

protected void generateLangData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Lang item = new Lang();
item.Code=Guid.NewGuid().ToString().Replace("-"," ");
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.State=true;
item.Ordering= rand.Next(1000);
data.Langs.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Lang  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE LangInsert(
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS INSERT INTO Lang(
Code,Name,State,Ordering) VALUES (
@Code,@Name,@State,@Ordering)
RETURN
----------------------------------------------
CREATE PROCEDURE LangUPDATE(
@ID int,
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS UPDATE Lang SET
Code = @Code,
Name = @Name,
State = @State,
Ordering = @Ordering
WHERE ID=@ID;
RETURN
----------------------------------------------
CREATE PROCEDURE LangDelete(
@ID int
)
AS DELETE FROM Lang WHERE ID = @ID;
RETURN



Lang  ------------------>  TextBox_State <----------------

ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;2;True;True;False;False;
Code;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;1;False;True;True;True;TextBox_Code
Name;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Name
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;4;False;5;False;True;True;True;CheckBox_State
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;4;False;True;True;True;TextBox_Ordering



Lang  ------------------>  TextBox_InsertMethod <----------------

public void  insertLang(Lang myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,Lang item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_UpdateMethod <----------------

public void  updateLang(Lang myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,Lang item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteLang(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getLang(sql, list.ToArray());
}
public List<Lang> getLang (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<Lang> listItem = new List<Lang>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getLang (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Lang> listItem = new List<Lang>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public Lang getLang (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

Lang item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getLang (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Lang> listItem = new List<Lang>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getAllLangItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Lang> listItem = new List<Lang>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getLangItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<Lang> listItem = new List<Lang>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertLang(Lang myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,Lang item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateLang(Lang myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteLang(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<Lang> getLang (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<Lang> listItem = new List<Lang>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<Lang> getLang (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<Lang> listItem = new List<Lang>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public Lang getLang (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

Lang item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Lang  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertLang(Lang myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,Lang item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.insertLang(i);
}
}



Lang  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateLang(Lang myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@ID", myItem.ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.updateLang(i);
}
}



Lang  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteLang(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.deleteLang(i.ID);
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<Lang> getLang (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<Lang> listItem = new List<Lang>();

connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getLang(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getLang (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<Lang> listItem = new List<Lang>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public Lang getLang (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

Lang item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
return item;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getLang (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<Lang> listItem = new List<Lang>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getAllLangItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<Lang> listItem = new List<Lang>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<Lang> getLangItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<Lang> listItem = new List<Lang>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertLang(Lang myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,Lang item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateLang(Lang myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteLang(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleSelectMethod <----------------

public List<Lang> getLang (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<Lang> listItem = new List<Lang>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<Lang> getLang (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<Lang> listItem = new List<Lang>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod3 <----------------

public Lang getLang (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

Lang item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_MyTableItem <----------------

public int ID { get; set; }
public string Code { get; set; }
public string Name { get; set; }
public Boolean State { get; set; }
public int Ordering { get; set; }




Lang  ------------------>  TextBox2 <----------------




Lang  ------------------>  TextBox_IReader <----------------

public Lang getLangCollectionFromReader (IDataRecord  read)
{
Lang item = new Lang();

item.ID = (read["ID"] is DBNull) ? -1 : Convert.ToInt32(read["ID"].ToString());
item.Code = (read["Code"] is DBNull) ? "" : read["Code"].ToString();
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Lang
TARİH = 10 Aralık 2010 Cuma 22:07:34


ID    ----->    TextBoxMax_
Code    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
State    ----->    CheckBox_
Ordering    ----->    TextBoxMax_



Lang  ------------------>  TextBox_In <----------------

protected bool retrieveData( Lang item, Label mesaj){
if(item != null){
try{
TextBox_Code.Text = item.Code.ToString();
TextBox_Name.Text = string.IsNullOrEmpty(item.Name) ? String.Empty : item.Name;
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
TextBox_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Lang">
<tr  id="tr_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Code" CssClass="Label_Deger" runat="server" Text="Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Code" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Lang" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Lang" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox_Insert <----------------

protected bool initialize(Lang item,Label mesaj){
if(item != null){
try{
//item.ID=-1;
item.Code=TextBox_Code.Text.Trim();
item.Name=TextBox_Name.Text.Trim();
item.State=CheckBox_State.Checked;
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Lang"  CssClass="Ei_Labels" runat="server">
<table class="Lang">
<tr>
<td class="name">
<asp:Label ID="Label_ID_1" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Code_1" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Lang item){
Label_ID.Text = item.ID.ToString();
Label_Code.Text = item.Code.ToString();
Label_Name.Text = item.Name.HasValue ?  item.Name.Value.ToString() : String.Empty;
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
}



Lang  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_ID" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
<asp:Label ID="Label_Code" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>



Lang  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Code</th>
<th>Name</th>
<th>State</th>
<th>Ordering</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="Lang">
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_Resource_to_XML <----------------




Lang  ------------------>  TextBox_List_XML <----------------

<word Keyword="Code" Translate="Code"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Ordering" Translate="Ordering"/>



Lang  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Lang" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Lang" runat="server" AllowPaging="True" DataKeyNames="ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Lang" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="ID"  InsertVisible="False" Visible="False"  HeaderText="ID" SortExpression="ID" /> 
<asp:BoundField DataField="Code" HeaderText="Kodu" SortExpression="Code" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:CheckBoxField DataField="State" HeaderText="Durum" SortExpression="State" /> 
 <asp:TemplateField HeaderText="Sırası" SortExpression="Ordering">
<ItemTemplate>
<asp:TextBox ID="TextBox_Order" CssClass="siraNo" runat="server" Text='<%# Bind("Ordering") %>'></asp:TextBox>
</ItemTemplate>
</asp:TemplateField>
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ID,Code,Name,State,Ordering FROM Lang  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Lang  ------------------>  TextBox_Veri <----------------

protected void generateLangData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Lang item = new Lang();
item.Code=Guid.NewGuid().ToString().Replace("-"," ");
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.State=true;
item.Ordering= rand.Next(1000);
data.Langs.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Lang  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE LangInsert(
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS INSERT INTO Lang(
Code,Name,State,Ordering) VALUES (
@Code,@Name,@State,@Ordering)
RETURN
----------------------------------------------
CREATE PROCEDURE LangUPDATE(
@ID int,
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS UPDATE Lang SET
Code = @Code,
Name = @Name,
State = @State,
Ordering = @Ordering
WHERE ID=@ID;
RETURN
----------------------------------------------
CREATE PROCEDURE LangDelete(
@ID int
)
AS DELETE FROM Lang WHERE ID = @ID;
RETURN



Lang  ------------------>  TextBox_State <----------------

ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;2;True;True;False;False;
Code;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;1;False;True;True;True;TextBox_Code
Name;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Name
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;4;False;5;False;True;True;True;CheckBox_State
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;4;False;True;True;True;TextBox_Ordering



Lang  ------------------>  TextBox_InsertMethod <----------------

public void  insertLang(LangI myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangI item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_UpdateMethod <----------------

public void  updateLang(LangI myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangI item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteLang(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getLang(sql, list.ToArray());
}
public List<LangI> getLang (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<LangI> listItem = new List<LangI>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getLang (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangI> listItem = new List<LangI>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangI getLang (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

LangI item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getLang (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangI> listItem = new List<LangI>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getAllLangItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangI> listItem = new List<LangI>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getLangItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangI> listItem = new List<LangI>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertLang(LangI myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,LangI item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateLang(LangI myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteLang(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<LangI> getLang (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<LangI> listItem = new List<LangI>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<LangI> getLang (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<LangI> listItem = new List<LangI>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public LangI getLang (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

LangI item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Lang  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertLang(LangI myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangI item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.insertLang(i);
}
}



Lang  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateLang(LangI myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@ID", myItem.ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.updateLang(i);
}
}



Lang  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteLang(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.deleteLang(i.ID);
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<LangI> getLang (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<LangI> listItem = new List<LangI>();

connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getLang(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getLang (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangI> listItem = new List<LangI>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangI getLang (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

LangI item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
return item;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getLang (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangI> listItem = new List<LangI>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getAllLangItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangI> listItem = new List<LangI>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangI> getLangItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangI> listItem = new List<LangI>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertLang(LangI myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangI item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateLang(LangI myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteLang(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleSelectMethod <----------------

public List<LangI> getLang (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<LangI> listItem = new List<LangI>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<LangI> getLang (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<LangI> listItem = new List<LangI>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod3 <----------------

public LangI getLang (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

LangI item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_MyTableItem <----------------

public int ID { get; set; }
public string Code { get; set; }
public string Name { get; set; }
public Boolean State { get; set; }
public int Ordering { get; set; }




Lang  ------------------>  TextBox2 <----------------




Lang  ------------------>  TextBox_IReader <----------------

public LangI getLangCollectionFromReader (IDataRecord  read)
{
LangI item = new LangI();

item.ID = (read["ID"] is DBNull) ? -1 : Convert.ToInt32(read["ID"].ToString());
item.Code = (read["Code"] is DBNull) ? "" : read["Code"].ToString();
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Lang
TARİH = 10 Aralık 2010 Cuma 22:14:42


ID    ----->    TextBoxMax_
Code    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
State    ----->    CheckBox_
Ordering    ----->    TextBoxMax_



Lang  ------------------>  TextBox_In <----------------

protected bool retrieveData( Lang item, Label mesaj){
if(item != null){
try{
TextBox_Code.Text = item.Code.ToString();
TextBox_Name.Text = string.IsNullOrEmpty(item.Name) ? String.Empty : item.Name;
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
TextBox_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Lang">
<tr  id="tr_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Code" CssClass="Label_Deger" runat="server" Text="Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Code" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Lang" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Lang" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox_Insert <----------------

protected bool initialize(Lang item,Label mesaj){
if(item != null){
try{
//item.ID=-1;
item.Code=TextBox_Code.Text.Trim();
item.Name=TextBox_Name.Text.Trim();
item.State=CheckBox_State.Checked;
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Lang"  CssClass="Ei_Labels" runat="server">
<table class="Lang">
<tr>
<td class="name">
<asp:Label ID="Label_ID_1" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Code_1" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Lang item){
Label_ID.Text = item.ID.ToString();
Label_Code.Text = item.Code.ToString();
Label_Name.Text = item.Name.HasValue ?  item.Name.Value.ToString() : String.Empty;
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
}



Lang  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_ID" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
<asp:Label ID="Label_Code" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>



Lang  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Code</th>
<th>Name</th>
<th>State</th>
<th>Ordering</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="Lang">
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_Resource_to_XML <----------------




Lang  ------------------>  TextBox_List_XML <----------------

<word Keyword="Code" Translate="Code"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Ordering" Translate="Ordering"/>



Lang  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Lang" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Lang" runat="server" AllowPaging="True" DataKeyNames="ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Lang" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="ID"  InsertVisible="False" Visible="False"  HeaderText="ID" SortExpression="ID" /> 
<asp:BoundField DataField="Code" HeaderText="Kodu" SortExpression="Code" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:CheckBoxField DataField="State" HeaderText="Durum" SortExpression="State" /> 
 <asp:TemplateField HeaderText="Sırası" SortExpression="Ordering">
<ItemTemplate>
<asp:TextBox ID="TextBox_Order" CssClass="siraNo" runat="server" Text='<%# Bind("Ordering") %>'></asp:TextBox>
</ItemTemplate>
</asp:TemplateField>
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ID,Code,Name,State,Ordering FROM Lang  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Lang  ------------------>  TextBox_Veri <----------------

protected void generateLangData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Lang item = new Lang();
item.Code=Guid.NewGuid().ToString().Replace("-"," ");
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.State=true;
item.Ordering= rand.Next(1000);
data.Langs.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Lang  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE LangInsert(
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS INSERT INTO Lang(
Code,Name,State,Ordering) VALUES (
@Code,@Name,@State,@Ordering)
RETURN
----------------------------------------------
CREATE PROCEDURE LangUPDATE(
@ID int,
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS UPDATE Lang SET
Code = @Code,
Name = @Name,
State = @State,
Ordering = @Ordering
WHERE ID=@ID;
RETURN
----------------------------------------------
CREATE PROCEDURE LangDelete(
@ID int
)
AS DELETE FROM Lang WHERE ID = @ID;
RETURN



Lang  ------------------>  TextBox_State <----------------

ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;2;True;True;False;False;
Code;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;1;False;True;True;True;TextBox_Code
Name;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Name
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;4;False;5;False;True;True;True;CheckBox_State
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;4;False;True;True;True;TextBox_Ordering



Lang  ------------------>  TextBox_InsertMethod <----------------

public void  insertLang(LangItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_UpdateMethod <----------------

public void  updateLang(LangItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteLang(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getLang(sql, list.ToArray());
}
public List<LangItem> getLang (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangItem getLang (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getAllLangItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertLang(LangItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateLang(LangItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteLang(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<LangItem> getLang (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public LangItem getLang (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Lang  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertLang(LangItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.insertLang(i);
}
}



Lang  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateLang(LangItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@ID", myItem.ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.updateLang(i);
}
}



Lang  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteLang(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.deleteLang(i.ID);
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<LangItem> getLang (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getLang(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangItem getLang (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
return item;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getAllLangItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertLang(LangItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateLang(LangItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteLang(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleSelectMethod <----------------

public List<LangItem> getLang (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod3 <----------------

public LangItem getLang (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_MyTableItem <----------------

public int ID { get; set; }
public string Code { get; set; }
public string Name { get; set; }
public Boolean State { get; set; }
public int Ordering { get; set; }




Lang  ------------------>  TextBox2 <----------------




Lang  ------------------>  TextBox_IReader <----------------

public LangItem getLangCollectionFromReader (IDataRecord  read)
{
LangItem item = new LangItem();

item.ID = (read["ID"] is DBNull) ? -1 : Convert.ToInt32(read["ID"].ToString());
item.Code = (read["Code"] is DBNull) ? "" : read["Code"].ToString();
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Faq
TARİH = 18 Kasım 2010 Perşembe 20:55:30


Faq_ID    ----->    TextBoxMax_
Question    ----->    TextBox_MultiLine
Answer    ----->    TextBox_MultiLine
Created_Date    ----->    TextBoxMax_
State    ----->    CheckBox_
Ordering    ----->    TextBoxMax_
Product_ID    ----->    CheckBoxList_
Lang    ----->    DropDownList_



Faq  ------------------>  TextBox_In <----------------

protected bool retrieveData( Faq item, Label mesaj){
if(item != null){
try{
TextBox_Faq_ID.Text = item.Faq_ID.ToString();
TextBox_Question.Text = string.IsNullOrEmpty(item.Question) ? String.Empty : item.Question;
TextBox_Answer.Text = string.IsNullOrEmpty(item.Answer) ? String.Empty : item.Answer;
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
TextBox_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
EntitySet<T> k = item.T;
foreach (T i in k){
if (item.Product_ID.HasValue){
func.selectCheckBoxList(CheckBoxList_Product_ID,item.Product_ID.Value.ToString());
}
}
if (!String.IsNullOrEmpty(item.Lang)){
func.selectDropDown(DropDownList_Lang,item.Lang.ToString());
}
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Faq  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Faq">
<tr  id="tr_Faq_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Faq_ID" CssClass="Label_Deger" runat="server" Text="Faq_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Faq_ID"  CssClass="textBox_NORMAL" ValidationGroup="Faq" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Question" runat="server">
<td class="name">
<asp:Label ID="Label_Question" CssClass="Label_Deger" runat="server" Text="Question"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Question" TextMode="MultiLine" ValidationGroup="Faq" CssClass="textBox_MULTI" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Answer" runat="server">
<td class="name">
<asp:Label ID="Label_Answer" CssClass="Label_Deger" runat="server" Text="Answer"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Answer" TextMode="MultiLine" ValidationGroup="Faq" CssClass="textBox_MULTI" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Faq" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Faq" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Product_ID" runat="server">
<td class="name">
<asp:Label ID="Label_Product_ID" CssClass="Label_Deger" runat="server" Text="Product_ID"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBoxList ID="CheckBoxList_Product_ID"  CssClass="checkBox_LIST" ValidationGroup="Faq"  RepeatDirection="Vertical" RepeatColumns="5" runat="server"></asp:CheckBoxList>

</td>
</tr>
<tr  id="tr_Lang" runat="server">
<td class="name">
<asp:Label ID="Label_Lang" CssClass="Label_Deger" runat="server" Text="Dil"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:DropDownList ID="DropDownList_Lang"  CssClass="dropDown_LIST" ValidationGroup="Faq" runat="server"></asp:DropDownList>

</td>
</tr>
</table>
</asp:Panel>



Faq  ------------------>  TextBox_Insert <----------------

protected bool initialize(Faq item,Label mesaj){
if(item != null){
try{
if(func.isInteger(TextBox_Faq_ID.Text))
item.Faq_ID= Convert.ToInt32(TextBox_Faq_ID.Text.Trim());
item.Question=func.stringCut(TextBox_Question.Text.Trim(),0,998);
item.Answer=func.stringCut(TextBox_Answer.Text.Trim(),0,998);
//item.Created_Date=DateTime.Now;
item.State=CheckBox_State.Checked;
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
foreach (ListItem i in CheckBoxList_Product_ID.Items){
if (i.Selected){
if (CheckBoxList_Product_ID.SelectedItem != null && func.isInteger(CheckBoxList_Product_ID.SelectedValue)){
}}
if (DropDownList_Lang.SelectedItem != null && !String.IsNullOrEmpty(DropDownList_Lang.SelectedValue)){
item.Lang=DropDownList_Lang.SelectedValue;
}else{ item.Lang= String.Empty;}
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Faq  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Faq"  CssClass="Ei_Labels" runat="server">
<table class="Faq">
<tr>
<td class="name">
<asp:Label ID="Label_Faq_ID_1" CssClass="db_Name"  Text="Faq_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Faq_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Question_1" CssClass="db_Name"  Text="Question" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Question" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Answer_1" CssClass="db_Name"  Text="Answer" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Answer" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Created_Date_1" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Created_Date" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Product_ID_1" CssClass="db_Name"  Text="Product_ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Product_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Lang_1" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Lang" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Faq  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Faq item){
Label_Faq_ID.Text = item.Faq_ID.ToString();
Label_Question.Text = item.Question.HasValue ?  item.Question.Value.ToString() : String.Empty;
Label_Answer.Text = item.Answer.HasValue ?  item.Answer.Value.ToString() : String.Empty;
Label_Created_Date.Text = item.Created_Date.HasValue ?  item.Created_Date.Value.ToString() : String.Empty;
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
Label_Product_ID.Text = item.Product_ID.HasValue ?  item.Product_ID.Value.ToString() : String.Empty;
Label_Lang.Text = item.Lang.HasValue ?  item.Lang.Value.ToString() : String.Empty;
}



Faq  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_Faq_ID" CssClass="db_Name"  Text="Faq_ID" runat="server"></asp:Label>
<asp:Label ID="Label_Question" CssClass="db_Name"  Text="Question" runat="server"></asp:Label>
<asp:Label ID="Label_Answer" CssClass="db_Name"  Text="Answer" runat="server"></asp:Label>
<asp:Label ID="Label_Created_Date" CssClass="db_Name"  Text="Oluşturma Tarihi" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
<asp:Label ID="Label_Product_ID" CssClass="db_Name"  Text="Product_ID" runat="server"></asp:Label>
<asp:Label ID="Label_Lang" CssClass="db_Name"  Text="Dil" runat="server"></asp:Label>



Faq  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Faq" runat="server" DataKeyNames="Faq_ID" DataSourceID="SqlDataSource_Faq">
<ItemTemplate>
<%#  Eval("Faq_ID")  %>
<%#  Eval("Question")  %>
<%#  Eval("Answer")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("Product_ID")  %>
<%#  Eval("Lang")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Faq" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Faq_ID,Question,Answer,State,Ordering,Product_ID,Lang FROM Faq WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Faq  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Faq" runat="server" DataKeyNames="Faq_ID" DataSourceID="SqlDataSource_Faq">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Faq_ID</th>
<th>Question</th>
<th>Answer</th>
<th>State</th>
<th>Ordering</th>
<th>Product_ID</th>
<th>Lang</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Faq_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Faq_ID")  %>' /></td>
<td><asp:Label ID="Label_Question" cssClass="evalCss" runat="server" Text='<%#  Eval("Question")  %>' /></td>
<td><asp:Label ID="Label_Answer" cssClass="evalCss" runat="server" Text='<%#  Eval("Answer")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
<td><asp:Label ID="Label_Product_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Product_ID")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Faq_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Faq_ID")  %>' /></td>
<td><asp:Label ID="Label_Question" cssClass="evalCss" runat="server" Text='<%#  Eval("Question")  %>' /></td>
<td><asp:Label ID="Label_Answer" cssClass="evalCss" runat="server" Text='<%#  Eval("Answer")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
<td><asp:Label ID="Label_Product_ID" cssClass="evalCss" runat="server" Text='<%#  Eval("Product_ID")  %>' /></td>
<td><asp:Label ID="Label_Lang" cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Faq" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Faq_ID,Question,Answer,State,Ordering,Product_ID,Lang FROM Faq WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Faq  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Faq" runat="server" DataKeyNames="Faq_ID" DataSourceID="SqlDataSource_Faq">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Faq_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Faq_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_Question cssClass="evalCss" runat="server" Text='<%#  Eval("Question")  %>' />
</td>
<td>
<asp:Label ID="Label_Answer cssClass="evalCss" runat="server" Text='<%#  Eval("Answer")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
<td>
<asp:Label ID="Label_Product_ID cssClass="evalCss" runat="server" Text='<%#  Eval("Product_ID")  %>' />
</td>
<td>
<asp:Label ID="Label_Lang cssClass="evalCss" runat="server" Text='<%#  Eval("Lang")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Faq" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Faq_ID,Question,Answer,State,Ordering,Product_ID,Lang FROM Faq WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Faq  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Faq" runat="server" DataKeyNames="Faq_ID" DataSourceID="SqlDataSource_Faq">
<ItemTemplate>
<%#  Eval("Faq_ID")  %>
<%#  Eval("Question")  %>
<%#  Eval("Answer")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("Product_ID")  %>
<%#  Eval("Lang")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Faq" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Faq_ID,Question,Answer,State,Ordering,Product_ID,Lang FROM Faq WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Faq  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Faq" runat="server" DataKeyNames="Faq_ID" DataSourceID="SqlDataSource_Faq">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%#  Eval("Faq_ID")  %>
<%#  Eval("Question")  %>
<%#  Eval("Answer")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("Product_ID")  %>
<%#  Eval("Lang")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Faq" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Faq_ID,Question,Answer,State,Ordering,Product_ID,Lang FROM Faq WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Faq  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Faq" runat="server" DataKeyNames="Faq_ID" DataSourceID="SqlDataSource_Faq">
<ItemTemplate>
<li class="Faq">
<%#  Eval("Faq_ID")  %>
<%#  Eval("Question")  %>
<%#  Eval("Answer")  %>
<%-- <%# Eval("Created_Date") %> --%>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
<%#  Eval("Product_ID")  %>
<%#  Eval("Lang")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Faq" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Faq_ID,Question,Answer,State,Ordering,Product_ID,Lang FROM Faq WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Faq  ------------------>  TextBox_Resource_to_XML <----------------




Faq  ------------------>  TextBox_List_XML <----------------

<word Keyword="Faq_ID" Translate="Faq_ID"/>
<word Keyword="Question" Translate="Question"/>
<word Keyword="Answer" Translate="Answer"/>
<word Keyword="Created_Date" Translate="Created_Date"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Ordering" Translate="Ordering"/>
<word Keyword="Product_ID" Translate="Product_ID"/>
<word Keyword="Lang" Translate="Lang"/>



Faq  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Faq" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Faq" runat="server" AllowPaging="True" DataKeyNames="Faq_ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Faq" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="Faq_ID"  InsertVisible="False" Visible="False"  HeaderText="Faq_ID" SortExpression="Faq_ID" /> 
<asp:BoundField DataField="Question" HeaderText="Question" SortExpression="Question" /> 
<asp:BoundField DataField="Answer" HeaderText="Answer" SortExpression="Answer" /> 
<asp:BoundField DataField="Created_Date" DataFormatString="{0:d}" HeaderText="Oluşturma Tarihi" SortExpression="Created_Date" /> 
<asp:CheckBoxField DataField="State" HeaderText="Durum" SortExpression="State" /> 
 <asp:TemplateField HeaderText="Sırası" SortExpression="Ordering">
<ItemTemplate>
<asp:TextBox ID="TextBox_Order" CssClass="siraNo" runat="server" Text='<%# Bind("Ordering") %>'></asp:TextBox>
</ItemTemplate>
</asp:TemplateField>
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Faq" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Faq_ID,Question,Answer,Created_Date,State,Ordering FROM Faq  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Faq  ------------------>  TextBox_Veri <----------------

protected void generateFaqData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Faq item = new Faq();
item.Question=Guid.NewGuid().ToString().Replace("-"," ");
item.Answer=Guid.NewGuid().ToString().Replace("-"," ");
item.Created_Date= DateTime.Now;
item.State=true;
item.Ordering= rand.Next(1000);
//item.Product_ID= 1;
item.Lang=Guid.NewGuid().ToString().Replace("-"," ");
data.Faqs.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Faq  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE FaqInsert(
@Question nvarchar(1000),
@Answer nvarchar(1000),
@Created_Date datetime,
@State bit,
@Ordering int,
@Product_ID int,
@Lang nvarchar(50))
AS INSERT INTO Faq(
Question,Answer,Created_Date,State,Ordering,Product_ID,Lang) VALUES (
@Question,@Answer,@Created_Date,@State,@Ordering,@Product_ID,@Lang)
RETURN
----------------------------------------------
CREATE PROCEDURE FaqUPDATE(
@Faq_ID int,
@Question nvarchar(1000),
@Answer nvarchar(1000),
@Created_Date datetime,
@State bit,
@Ordering int,
@Product_ID int,
@Lang nvarchar(50))
AS UPDATE Faq SET
Question = @Question,
Answer = @Answer,
Created_Date = @Created_Date,
State = @State,
Ordering = @Ordering,
Product_ID = @Product_ID,
Lang = @Lang
WHERE Faq_ID=@Faq_ID;
RETURN
----------------------------------------------
CREATE PROCEDURE FaqDelete(
@Faq_ID int
)
AS DELETE FROM Faq WHERE Faq_ID = @Faq_ID;
RETURN



Faq  ------------------>  TextBox_State <----------------

Faq_ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;3;True;True;False;False;TextBox_Faq_ID
Question;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;2;False;7;False;True;True;True;TextBox_Question
Answer;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;3;False;1;False;True;True;True;TextBox_Answer
Created_Date;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;True;2;False;True;True;True;
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;5;False;8;False;True;True;True;CheckBox_State
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;5;False;True;True;True;TextBox_Ordering
Product_ID;YES;int;;int;checkBox_LIST;CheckBoxList_;BOS_;BOS_;BOS_;7;False;6;False;False;False;False;CheckBoxList_Product_ID
Lang;YES;nvarchar;50;nvarchar(50);dropDown_LIST;DropDownList_;BOS_;BOS_;BOS_;8;False;4;False;False;False;False;DropDownList_Lang



Faq  ------------------>  TextBox_InsertMethod <----------------

public void  insertFaq(FaqItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Faq (Question, Answer, Created_Date, State, Ordering, Product_ID, Lang) values (@Question, @Answer, @Created_Date, @State, @Ordering, @Product_ID, @Lang)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,FaqItem item)
 {
command.Parameters.AddWithValue("@Question", item.Question);
command.Parameters.AddWithValue("@Answer", item.Answer);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }




Faq  ------------------>  TextBox_UpdateMethod <----------------

public void  updateFaq(FaqItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Faq SET  Question=@Question, Answer=@Answer, Created_Date=@Created_Date, State=@State, Ordering=@Ordering, Product_ID=@Product_ID, Lang=@Lang  WHERE Faq_ID= @Faq_ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,FaqItem item)
 {
command.Parameters.AddWithValue("@Question", item.Question);
command.Parameters.AddWithValue("@Answer", item.Answer);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }




Faq  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteFaq(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Faq WHERE Faq_ID= @Faq_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Faq  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getFaqWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Faq WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getFaq(sql, list.ToArray());
}
public List<FaqItem> getFaq (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<FaqItem> listItem = new List<FaqItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Faq  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getFaq (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<FaqItem> listItem = new List<FaqItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Faq  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public FaqItem getFaq (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

FaqItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Faq WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getFaqCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Faq  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getFaq (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<FaqItem> listItem = new List<FaqItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Faq  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getAllFaqItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<FaqItem> listItem = new List<FaqItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Faq";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Faq  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getFaqItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<FaqItem> listItem = new List<FaqItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Faq WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Faq  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertFaq(FaqItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Faq (Question, Answer, Created_Date, State, Ordering, Product_ID, Lang) values (@Question, @Answer, @Created_Date, @State, @Ordering, @Product_ID, @Lang)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,FaqItem item)
 {
command.Parameters.AddWithValue("@Question", item.Question);
command.Parameters.AddWithValue("@Answer", item.Answer);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }




Faq  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateFaq(FaqItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Faq SET  Question=@Question, Answer=@Answer, Created_Date=@Created_Date, State=@State, Ordering=@Ordering, Product_ID=@Product_ID, Lang=@Lang  WHERE Faq_ID= @Faq_ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Faq  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteFaq(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Faq WHERE Faq_ID= @Faq_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Faq  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<FaqItem> getFaq (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<FaqItem> listItem = new List<FaqItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Faq  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<FaqItem> getFaq (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<FaqItem> listItem = new List<FaqItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Faq  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public FaqItem getFaq (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

FaqItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Faq WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getFaqCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Faq  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertFaq(FaqItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Faq (Question, Answer, Created_Date, State, Ordering, Product_ID, Lang) values (@Question, @Answer, @Created_Date, @State, @Ordering, @Product_ID, @Lang)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,FaqItem item)
 {
command.Parameters.AddWithValue("@Question", item.Question);
command.Parameters.AddWithValue("@Answer", item.Answer);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertFaqALL(List<Faq> list)
{
foreach (Faq i in list)
{
this.insertFaq(i);
}
}



Faq  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateFaq(FaqItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Faq SET  Question=@Question, Answer=@Answer, Created_Date=@Created_Date, State=@State, Ordering=@Ordering, Product_ID=@Product_ID, Lang=@Lang  WHERE Faq_ID= @Faq_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@Faq_ID", myItem.Faq_ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateFaqALL(List<Faq> list)
{
foreach (Faq i in list)
{
this.updateFaq(i);
}
}



Faq  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteFaq(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Faq WHERE Faq_ID= @Faq_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@Faq_ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteFaqALL(List<Faq> list)
{
foreach (Faq i in list)
{
this.deleteFaq(i.Faq_ID);
}
}



Faq  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<FaqItem> getFaq (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<FaqItem> listItem = new List<FaqItem>();

connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
return listItem;
}
}
}



Faq  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getFaqWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Faq WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getFaq(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getFaq (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<FaqItem> listItem = new List<FaqItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Faq  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public FaqItem getFaq (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

FaqItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Faq WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getFaqCollectionFromReader(read);
 }
return item;
}
}
}



Faq  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getFaq (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<FaqItem> listItem = new List<FaqItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Faq  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getAllFaqItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<FaqItem> listItem = new List<FaqItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Faq";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
return listItem;
}
}
}



Faq  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<FaqItem> getFaqItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<FaqItem> listItem = new List<FaqItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Faq WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
return listItem;
}
}
}



Faq  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertFaq(FaqItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Faq (Question, Answer, Created_Date, State, Ordering, Product_ID, Lang) values (@Question, @Answer, @Created_Date, @State, @Ordering, @Product_ID, @Lang)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,FaqItem item)
 {
command.Parameters.AddWithValue("@Question", item.Question);
command.Parameters.AddWithValue("@Answer", item.Answer);
command.Parameters.AddWithValue("@Created_Date", item.Created_Date);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
command.Parameters.AddWithValue("@Product_ID", item.Product_ID);
command.Parameters.AddWithValue("@Lang", item.Lang);
 }




Faq  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateFaq(FaqItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Faq SET  Question=@Question, Answer=@Answer, Created_Date=@Created_Date, State=@State, Ordering=@Ordering, Product_ID=@Product_ID, Lang=@Lang  WHERE Faq_ID= @Faq_ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Faq  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteFaq(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Faq WHERE Faq_ID= @Faq_ID";
command.Connection = connect;
command.Parameters.AddWithValue("@Faq_ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Faq  ------------------>  TextBox_OracleSelectMethod <----------------

public List<FaqItem> getFaq (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<FaqItem> listItem = new List<FaqItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Faq  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<FaqItem> getFaq (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<FaqItem> listItem = new List<FaqItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getFaqCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Faq  ------------------>  TextBox_OracleSelectMethod3 <----------------

public FaqItem getFaq (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

FaqItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Faq WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getFaqCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Faq  ------------------>  TextBox_MyTableItem <----------------

public int Faq_ID { get; set; }
public string Question { get; set; }
public string Answer { get; set; }
public DateTime Created_Date { get; set; }
public Boolean State { get; set; }
public int Ordering { get; set; }
public int Product_ID { get; set; }
public string Lang { get; set; }




Faq  ------------------>  TextBox2 <----------------




Faq  ------------------>  TextBox_IReader <----------------

public FaqItem getFaqCollectionFromReader (IDataRecord  read)
{
FaqItem item = new FaqItem();

item.Faq_ID = (read["Faq_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Faq_ID"].ToString());
item.Question = (read["Question"] is DBNull) ? "" : read["Question"].ToString();
item.Answer = (read["Answer"] is DBNull) ? "" : read["Answer"].ToString();
item.Created_Date = (read["Created_Date"] is DBNull) ? DateTime.Now : DateTime.Parse(read["Created_Date"].ToString());
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
item.Product_ID = (read["Product_ID"] is DBNull) ? -1 : Convert.ToInt32(read["Product_ID"].ToString());
item.Lang = (read["Lang"] is DBNull) ? "" : read["Lang"].ToString();
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Lang
TARİH = 19 Kasım 2010 Cuma 11:28:56


ID    ----->    TextBoxMax_
Code    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
State    ----->    CheckBox_
Ordering    ----->    TextBoxMax_



Lang  ------------------>  TextBox_In <----------------

protected bool retrieveData( Lang item, Label mesaj){
if(item != null){
try{
TextBox_Code.Text = item.Code.ToString();
TextBox_Name.Text = string.IsNullOrEmpty(item.Name) ? String.Empty : item.Name;
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
TextBox_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Lang">
<tr  id="tr_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Code" CssClass="Label_Deger" runat="server" Text="Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Code" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Lang" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Lang" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox_Insert <----------------

protected bool initialize(Lang item,Label mesaj){
if(item != null){
try{
//item.ID=-1;
item.Code=TextBox_Code.Text.Trim();
item.Name=TextBox_Name.Text.Trim();
item.State=CheckBox_State.Checked;
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Lang"  CssClass="Ei_Labels" runat="server">
<table class="Lang">
<tr>
<td class="name">
<asp:Label ID="Label_ID_1" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Code_1" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Lang item){
Label_ID.Text = item.ID.ToString();
Label_Code.Text = item.Code.ToString();
Label_Name.Text = item.Name.HasValue ?  item.Name.Value.ToString() : String.Empty;
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
}



Lang  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_ID" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
<asp:Label ID="Label_Code" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>



Lang  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Code</th>
<th>Name</th>
<th>State</th>
<th>Ordering</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="Lang">
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_Resource_to_XML <----------------




Lang  ------------------>  TextBox_List_XML <----------------

<word Keyword="Code" Translate="Code"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Ordering" Translate="Ordering"/>



Lang  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Lang" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Lang" runat="server" AllowPaging="True" DataKeyNames="ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Lang" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="ID"  InsertVisible="False" Visible="False"  HeaderText="ID" SortExpression="ID" /> 
<asp:BoundField DataField="Code" HeaderText="Kodu" SortExpression="Code" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:CheckBoxField DataField="State" HeaderText="Durum" SortExpression="State" /> 
 <asp:TemplateField HeaderText="Sırası" SortExpression="Ordering">
<ItemTemplate>
<asp:TextBox ID="TextBox_Order" CssClass="siraNo" runat="server" Text='<%# Bind("Ordering") %>'></asp:TextBox>
</ItemTemplate>
</asp:TemplateField>
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ID,Code,Name,State,Ordering FROM Lang  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Lang  ------------------>  TextBox_Veri <----------------

protected void generateLangData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Lang item = new Lang();
item.Code=Guid.NewGuid().ToString().Replace("-"," ");
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.State=true;
item.Ordering= rand.Next(1000);
data.Langs.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Lang  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE LangInsert(
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS INSERT INTO Lang(
Code,Name,State,Ordering) VALUES (
@Code,@Name,@State,@Ordering)
RETURN
----------------------------------------------
CREATE PROCEDURE LangUPDATE(
@ID int,
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS UPDATE Lang SET
Code = @Code,
Name = @Name,
State = @State,
Ordering = @Ordering
WHERE ID=@ID;
RETURN
----------------------------------------------
CREATE PROCEDURE LangDelete(
@ID int
)
AS DELETE FROM Lang WHERE ID = @ID;
RETURN



Lang  ------------------>  TextBox_State <----------------

ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;2;True;True;False;False;
Code;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;1;False;True;True;True;TextBox_Code
Name;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Name
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;4;False;5;False;True;True;True;CheckBox_State
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;4;False;True;True;True;TextBox_Ordering



Lang  ------------------>  TextBox_InsertMethod <----------------

public void  insertLang(LangItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_UpdateMethod <----------------

public void  updateLang(LangItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteLang(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getLang(sql, list.ToArray());
}
public List<LangItem> getLang (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangItem getLang (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getAllLangItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertLang(LangItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateLang(LangItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteLang(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<LangItem> getLang (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public LangItem getLang (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Lang  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertLang(LangItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.insertLang(i);
}
}



Lang  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateLang(LangItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@ID", myItem.ID);
int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.updateLang(i);
}
}



Lang  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteLang(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 return true;
 }
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteLangALL(List<Lang> list)
{
foreach (Lang i in list)
{
this.deleteLang(i.ID);
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<LangItem> getLang (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = oleDbCommand){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getLang(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangItem getLang (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
return item;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getAllLangItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OleDbCommand command = new OleDbCommand()){

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
return listItem;
}
}
}



Lang  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertLang(LangItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateLang(LangItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteLang(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleSelectMethod <----------------

public List<LangItem> getLang (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod3 <----------------

public LangItem getLang (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_MyTableItem <----------------

public int ID { get; set; }
public string Code { get; set; }
public string Name { get; set; }
public Boolean State { get; set; }
public int Ordering { get; set; }




Lang  ------------------>  TextBox2 <----------------




Lang  ------------------>  TextBox_IReader <----------------

public LangItem getLangCollectionFromReader (IDataRecord  read)
{
LangItem item = new LangItem();

item.ID = (read["ID"] is DBNull) ? -1 : Convert.ToInt32(read["ID"].ToString());
item.Code = (read["Code"] is DBNull) ? "" : read["Code"].ToString();
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Lang
TARİH = 19 Kasım 2010 Cuma 11:33:28


ID    ----->    TextBoxMax_
Code    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
State    ----->    CheckBox_
Ordering    ----->    TextBoxMax_



Lang  ------------------>  TextBox_In <----------------

protected bool retrieveData( Lang item, Label mesaj){
if(item != null){
try{
TextBox_Code.Text = item.Code.ToString();
TextBox_Name.Text = string.IsNullOrEmpty(item.Name) ? String.Empty : item.Name;
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
TextBox_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Lang">
<tr  id="tr_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Code" CssClass="Label_Deger" runat="server" Text="Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Code" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Lang" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Lang" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox_Insert <----------------

protected bool initialize(Lang item,Label mesaj){
if(item != null){
try{
//item.ID=-1;
item.Code=TextBox_Code.Text.Trim();
item.Name=TextBox_Name.Text.Trim();
item.State=CheckBox_State.Checked;
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Lang"  CssClass="Ei_Labels" runat="server">
<table class="Lang">
<tr>
<td class="name">
<asp:Label ID="Label_ID_1" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Code_1" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Lang item){
Label_ID.Text = item.ID.ToString();
Label_Code.Text = item.Code.ToString();
Label_Name.Text = item.Name.HasValue ?  item.Name.Value.ToString() : String.Empty;
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
}



Lang  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_ID" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
<asp:Label ID="Label_Code" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>



Lang  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Code</th>
<th>Name</th>
<th>State</th>
<th>Ordering</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="Lang">
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_Resource_to_XML <----------------




Lang  ------------------>  TextBox_List_XML <----------------

<word Keyword="Code" Translate="Code"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Ordering" Translate="Ordering"/>



Lang  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Lang" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Lang" runat="server" AllowPaging="True" DataKeyNames="ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Lang" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="ID"  InsertVisible="False" Visible="False"  HeaderText="ID" SortExpression="ID" /> 
<asp:BoundField DataField="Code" HeaderText="Kodu" SortExpression="Code" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:CheckBoxField DataField="State" HeaderText="Durum" SortExpression="State" /> 
 <asp:TemplateField HeaderText="Sırası" SortExpression="Ordering">
<ItemTemplate>
<asp:TextBox ID="TextBox_Order" CssClass="siraNo" runat="server" Text='<%# Bind("Ordering") %>'></asp:TextBox>
</ItemTemplate>
</asp:TemplateField>
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ID,Code,Name,State,Ordering FROM Lang  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Lang  ------------------>  TextBox_Veri <----------------

protected void generateLangData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Lang item = new Lang();
item.Code=Guid.NewGuid().ToString().Replace("-"," ");
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.State=true;
item.Ordering= rand.Next(1000);
data.Langs.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Lang  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE LangInsert(
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS INSERT INTO Lang(
Code,Name,State,Ordering) VALUES (
@Code,@Name,@State,@Ordering)
RETURN
----------------------------------------------
CREATE PROCEDURE LangUPDATE(
@ID int,
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS UPDATE Lang SET
Code = @Code,
Name = @Name,
State = @State,
Ordering = @Ordering
WHERE ID=@ID;
RETURN
----------------------------------------------
CREATE PROCEDURE LangDelete(
@ID int
)
AS DELETE FROM Lang WHERE ID = @ID;
RETURN



Lang  ------------------>  TextBox_State <----------------

ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;2;True;True;False;False;
Code;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;1;False;True;True;True;TextBox_Code
Name;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Name
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;4;False;5;False;True;True;True;CheckBox_State
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;4;False;True;True;True;TextBox_Ordering



Lang  ------------------>  TextBox_InsertMethod <----------------

public void  insertLang(LangItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_UpdateMethod <----------------

public void  updateLang(LangItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteLang(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getLang(sql, list.ToArray());
}
public List<LangItem> getLang (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangItem getLang (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getAllLangItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertLang(LangItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateLang(LangItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteLang(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<LangItem> getLang (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public LangItem getLang (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Lang  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertLang(LangItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
     connect.Close();
 return true;
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertLangALL(List<LangItem> list)
{
foreach (LangItem i in list)
{
this.insertLang(i);
}
}



Lang  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateLang(LangItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@ID", myItem.ID);
int affectedRowNumber =  command.ExecuteNonQuery();
     connect.Close();
 return true;
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateLangALL(List<LangItem> list)
{
foreach (LangItem i in list)
{
this.updateLang(i);
}
}



Lang  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteLang(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
     connect.Close();
 return true;
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteLangALL(List<LangItem> list)
{
foreach (LangItem i in list)
{
this.deleteLang(i.ID);
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<LangItem> getLang (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = oleDbCommand;

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getLang(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangItem getLang (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

LangItem item = null;
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID",ID);
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
     connect.Close();
return item;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getAllLangItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", true);
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertLang(LangItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateLang(LangItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteLang(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleSelectMethod <----------------

public List<LangItem> getLang (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod3 <----------------

public LangItem getLang (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_MyTableItem <----------------

public int ID { get; set; }
public string Code { get; set; }
public string Name { get; set; }
public Boolean State { get; set; }
public int Ordering { get; set; }




Lang  ------------------>  TextBox2 <----------------




Lang  ------------------>  TextBox_IReader <----------------

public LangItem getLangCollectionFromReader (IDataRecord  read)
{
LangItem item = new LangItem();

item.ID = (read["ID"] is DBNull) ? -1 : Convert.ToInt32(read["ID"].ToString());
item.Code = (read["Code"] is DBNull) ? "" : read["Code"].ToString();
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Lang
TARİH = 19 Kasım 2010 Cuma 11:58:15


ID    ----->    TextBoxMax_
Code    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
State    ----->    CheckBox_
Ordering    ----->    TextBoxMax_



Lang  ------------------>  TextBox_In <----------------

protected bool retrieveData( Lang item, Label mesaj){
if(item != null){
try{
TextBox_Code.Text = item.Code.ToString();
TextBox_Name.Text = string.IsNullOrEmpty(item.Name) ? String.Empty : item.Name;
CheckBox_State.Checked = item.State.HasValue ?  item.State.Value : false;
TextBox_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="Lang">
<tr  id="tr_Code" runat="server">
<td class="name">
<asp:Label ID="Label_Code" CssClass="Label_Deger" runat="server" Text="Kodu"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Code" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="Lang" MaxLength="50" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_State" runat="server">
<td class="name">
<asp:Label ID="Label_State" CssClass="Label_Deger" runat="server" Text="Durum"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_State" ValidationGroup="Lang" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr class="alt" id="tr_Ordering" runat="server">
<td class="name">
<asp:Label ID="Label_Ordering" CssClass="Label_Deger" runat="server" Text="Sırası"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Ordering"  CssClass="textBox_NORMAL" ValidationGroup="Lang" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox_Insert <----------------

protected bool initialize(Lang item,Label mesaj){
if(item != null){
try{
//item.ID=-1;
item.Code=TextBox_Code.Text.Trim();
item.Name=TextBox_Name.Text.Trim();
item.State=CheckBox_State.Checked;
if(func.isInteger(TextBox_Ordering.Text))
item.Ordering= Convert.ToInt32(TextBox_Ordering.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



Lang  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_Lang"  CssClass="Ei_Labels" runat="server">
<table class="Lang">
<tr>
<td class="name">
<asp:Label ID="Label_ID_1" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_ID" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Code_1" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Code" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_State_1" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_State" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Ordering_1" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Ordering" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



Lang  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( Lang item){
Label_ID.Text = item.ID.ToString();
Label_Code.Text = item.Code.ToString();
Label_Name.Text = item.Name.HasValue ?  item.Name.Value.ToString() : String.Empty;
Label_State.Text = item.State.HasValue ?  item.State.Value.ToString() : String.Empty;
Label_Ordering.Text = item.Ordering.HasValue ?  item.Ordering.Value.ToString() : String.Empty;
}



Lang  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_ID" CssClass="db_Name"  Text="ID" runat="server"></asp:Label>
<asp:Label ID="Label_Code" CssClass="db_Name"  Text="Kodu" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_State" CssClass="db_Name"  Text="Durum" runat="server"></asp:Label>
<asp:Label ID="Label_Ordering" CssClass="db_Name"  Text="Sırası" runat="server"></asp:Label>



Lang  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>Code</th>
<th>Name</th>
<th>State</th>
<th>Ordering</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_Code" cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_State" cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' /></td>
<td><asp:Label ID="Label_Ordering" cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_Code cssClass="evalCss" runat="server" Text='<%#  Eval("Code")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_State cssClass="evalCss" runat="server" Text='<%#  Eval("State")  %>' />
</td>
<td>
<asp:Label ID="Label_Ordering cssClass="evalCss" runat="server" Text='<%#  Eval("Ordering")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_Lang" runat="server" DataKeyNames="ID" DataSourceID="SqlDataSource_Lang">
<ItemTemplate>
<li class="Lang">
<%-- <%# Eval("ID") %> --%>
<%#  Eval("Code")  %>
<%#  Eval("Name")  %>
<%#  Eval("State")  %>
<%#  Eval("Ordering")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT Code,Name,State,Ordering FROM Lang WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



Lang  ------------------>  TextBox_Resource_to_XML <----------------




Lang  ------------------>  TextBox_List_XML <----------------

<word Keyword="Code" Translate="Code"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="State" Translate="State"/>
<word Keyword="Ordering" Translate="Ordering"/>



Lang  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_Lang" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_Lang" runat="server" AllowPaging="True" DataKeyNames="ID"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_Lang" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="ID"  InsertVisible="False" Visible="False"  HeaderText="ID" SortExpression="ID" /> 
<asp:BoundField DataField="Code" HeaderText="Kodu" SortExpression="Code" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:CheckBoxField DataField="State" HeaderText="Durum" SortExpression="State" /> 
 <asp:TemplateField HeaderText="Sırası" SortExpression="Ordering">
<ItemTemplate>
<asp:TextBox ID="TextBox_Order" CssClass="siraNo" runat="server" Text='<%# Bind("Ordering") %>'></asp:TextBox>
</ItemTemplate>
</asp:TemplateField>
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_Lang" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT ID,Code,Name,State,Ordering FROM Lang  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



Lang  ------------------>  TextBox_Veri <----------------

protected void generateLangData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
Lang item = new Lang();
item.Code=Guid.NewGuid().ToString().Replace("-"," ");
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.State=true;
item.Ordering= rand.Next(1000);
data.Langs.InsertOnSubmit(item);
}
data.SubmitChanges();
}



Lang  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE LangInsert(
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS INSERT INTO Lang(
Code,Name,State,Ordering) VALUES (
@Code,@Name,@State,@Ordering)
RETURN
----------------------------------------------
CREATE PROCEDURE LangUPDATE(
@ID int,
@Code nvarchar(50),
@Name nvarchar(50),
@State bit,
@Ordering int)
AS UPDATE Lang SET
Code = @Code,
Name = @Name,
State = @State,
Ordering = @Ordering
WHERE ID=@ID;
RETURN
----------------------------------------------
CREATE PROCEDURE LangDelete(
@ID int
)
AS DELETE FROM Lang WHERE ID = @ID;
RETURN



Lang  ------------------>  TextBox_State <----------------

ID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;2;True;True;False;False;
Code;NO;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;1;False;True;True;True;TextBox_Code
Name;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Name
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;4;False;5;False;True;True;True;CheckBox_State
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;4;False;True;True;True;TextBox_Ordering



Lang  ------------------>  TextBox_InsertMethod <----------------

public void  insertLang(LangItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_UpdateMethod <----------------

public void  updateLang(LangItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_DeleteMethod <----------------

public void  deleteLang(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getLang(sql, list.ToArray());
}
public List<LangItem> getLang (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangItem getLang (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getAllLangItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertLang(LangItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updateLang(LangItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deleteLang(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



Lang  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<LangItem> getLang (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public LangItem getLang (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



Lang  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public Boolean  insertLang(LangItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
command.CommandText = @"SELECT @@IDENTITY";

int id = (int)command.ExecuteScalar();
     connect.Close();
 return id;
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertLangALL(List<LangItem> list)
{
foreach (LangItem i in list)
{
this.insertLang(i);
}
}



Lang  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updateLang(LangItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@ID", myItem.ID);
int affectedRowNumber =  command.ExecuteNonQuery();
     connect.Close();
 return true;
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updateLangALL(List<LangItem> list)
{
foreach (LangItem i in list)
{
this.updateLang(i);
}
}



Lang  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deleteLang(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
     connect.Close();
 return true;
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deleteLangALL(List<LangItem> list)
{
foreach (LangItem i in list)
{
this.deleteLang(i.ID);
}
}
public void deleteLang(LangItem item)
{
this.deleteLang(item.ID);
}



Lang  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<LangItem> getLang (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = oleDbCommand;

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM Lang WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getLang(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public LangItem getLang (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

LangItem item = null;
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID",ID);
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
     connect.Close();
return item;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLang (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getAllLangItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<LangItem> getLangItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<LangItem> listItem = new List<LangItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", true);
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



Lang  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertLang(LangItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO Lang (Code, Name, State, Ordering) values (@Code, @Name, @State, @Ordering)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,LangItem item)
 {
command.Parameters.AddWithValue("@Code", item.Code);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@State", item.State);
command.Parameters.AddWithValue("@Ordering", item.Ordering);
 }




Lang  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updateLang(LangItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE Lang SET  Code=@Code, Name=@Name, State=@State, Ordering=@Ordering  WHERE ID= @ID";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deleteLang(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From Lang WHERE ID= @ID";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



Lang  ------------------>  TextBox_OracleSelectMethod <----------------

public List<LangItem> getLang (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<LangItem> getLang (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<LangItem> listItem = new List<LangItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getLangCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



Lang  ------------------>  TextBox_OracleSelectMethod3 <----------------

public LangItem getLang (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

LangItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM Lang WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getLangCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



Lang  ------------------>  TextBox_MyTableItem <----------------

public int ID { get; set; }
public string Code { get; set; }
public string Name { get; set; }
public Boolean State { get; set; }
public int Ordering { get; set; }




Lang  ------------------>  TextBox2 <----------------




Lang  ------------------>  TextBox_IReader <----------------

public LangItem getLangCollectionFromReader (IDataRecord  read)
{
LangItem item = new LangItem();

item.ID = (read["ID"] is DBNull) ? -1 : Convert.ToInt32(read["ID"].ToString());
item.Code = (read["Code"] is DBNull) ? "" : read["Code"].ToString();
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.State = (read["State"] is DBNull) ? false : Boolean.Parse(read["State"].ToString());
item.Ordering = (read["Ordering"] is DBNull) ? -1 : Convert.ToInt32(read["Ordering"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = p_Prices
TARİH = Wednesday, November 06, 2013 9:34:07 AM


PriceId    ----->    TextBoxMax_
JobTypeId    ----->    TextBoxMax_
PaymentPlanId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Amount    ----->    BOS
PricePerJob    ----->    BOS
PricePerResume    ----->    BOS
IncludedJobs    ----->    TextBoxMax_
IncludedResumes    ----->    TextBoxMax_
IsActive    ----->    CheckBox_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_



p_Prices  ------------------>  TextBox_In <----------------

protected bool retrieveData( p_Prices item, Label mesaj){
if(item != null){
try{
TextBox_PriceId.Text = item.PriceId.ToString();
TextBox_JobTypeId.Text = item.JobTypeId.HasValue ?  item.JobTypeId.Value.ToString() : String.Empty;
TextBox_PaymentPlanId.Text = item.PaymentPlanId.HasValue ?  item.PaymentPlanId.Value.ToString() : String.Empty;
TextBox_Name.Text = string.IsNullOrEmpty(item.Name) ? String.Empty : item.Name;
TextBox_IncludedJobs.Text = item.IncludedJobs.HasValue ?  item.IncludedJobs.Value.ToString() : String.Empty;
TextBox_IncludedResumes.Text = item.IncludedResumes.HasValue ?  item.IncludedResumes.Value.ToString() : String.Empty;
CheckBox_IsActive.Checked = item.IsActive.HasValue ?  item.IsActive.Value : false;
TextBox_DateCreated.Text = item.DateCreated.HasValue ?  item.DateCreated.Value.ToString() : String.Empty;
TextBox_DateUpdated.Text = item.DateUpdated.HasValue ?  item.DateUpdated.Value.ToString() : String.Empty;
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



p_Prices  ------------------>  TextBox_Edit <----------------

<asp:Panel ID="Panel_TextBox" Visible="true" CssClass="Ei_Add_Table" runat="server">
<table class="p_Prices">
<tr  id="tr_PriceId" runat="server">
<td class="name">
<asp:Label ID="Label_PriceId" CssClass="Label_Deger" runat="server" Text="PriceId"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_PriceId"  CssClass="textBox_NORMAL" ValidationGroup="p_Prices" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_JobTypeId" runat="server">
<td class="name">
<asp:Label ID="Label_JobTypeId" CssClass="Label_Deger" runat="server" Text="JobTypeId"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_JobTypeId"  CssClass="textBox_NORMAL" ValidationGroup="p_Prices" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_PaymentPlanId" runat="server">
<td class="name">
<asp:Label ID="Label_PaymentPlanId" CssClass="Label_Deger" runat="server" Text="PaymentPlanId"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_PaymentPlanId"  CssClass="textBox_NORMAL" ValidationGroup="p_Prices" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_Name" runat="server">
<td class="name">
<asp:Label ID="Label_Name" CssClass="Label_Deger" runat="server" Text="İsim"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_Name" CssClass="textBox_NORMAL" ValidationGroup="p_Prices" MaxLength="200" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_Amount" runat="server">
<td class="name">
<asp:Label ID="Label_Amount" CssClass="Label_Deger" runat="server" Text="Amount"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">

</td>
</tr>
<tr class="alt" id="tr_PricePerJob" runat="server">
<td class="name">
<asp:Label ID="Label_PricePerJob" CssClass="Label_Deger" runat="server" Text="PricePerJob"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">

</td>
</tr>
<tr  id="tr_PricePerResume" runat="server">
<td class="name">
<asp:Label ID="Label_PricePerResume" CssClass="Label_Deger" runat="server" Text="PricePerResume"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">

</td>
</tr>
<tr class="alt" id="tr_IncludedJobs" runat="server">
<td class="name">
<asp:Label ID="Label_IncludedJobs" CssClass="Label_Deger" runat="server" Text="IncludedJobs"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_IncludedJobs"  CssClass="textBox_NORMAL" ValidationGroup="p_Prices" runat="server"></asp:TextBox>

</td>
</tr>
<tr  id="tr_IncludedResumes" runat="server">
<td class="name">
<asp:Label ID="Label_IncludedResumes" CssClass="Label_Deger" runat="server" Text="IncludedResumes"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_IncludedResumes"  CssClass="textBox_NORMAL" ValidationGroup="p_Prices" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_IsActive" runat="server">
<td class="name">
<asp:Label ID="Label_IsActive" CssClass="Label_Deger" runat="server" Text="IsActive"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:CheckBox ID="CheckBox_IsActive" ValidationGroup="p_Prices" runat="server" CssClass="check_BOX"/>

</td>
</tr>
<tr  id="tr_DateCreated" runat="server">
<td class="name">
<asp:Label ID="Label_DateCreated" CssClass="Label_Deger" runat="server" Text="DateCreated"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_DateCreated"  CssClass="textBox_NORMAL" ValidationGroup="p_Prices" runat="server"></asp:TextBox>

</td>
</tr>
<tr class="alt" id="tr_DateUpdated" runat="server">
<td class="name">
<asp:Label ID="Label_DateUpdated" CssClass="Label_Deger" runat="server" Text="DateUpdated"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:TextBox ID="TextBox_DateUpdated"  CssClass="textBox_NORMAL" ValidationGroup="p_Prices" runat="server"></asp:TextBox>

</td>
</tr>
</table>
</asp:Panel>



p_Prices  ------------------>  TextBox_Insert <----------------

protected bool initialize(p_Prices item,Label mesaj){
if(item != null){
try{
if(func.isInteger(TextBox_PriceId.Text))
item.PriceId= Convert.ToInt32(TextBox_PriceId.Text.Trim());
if(func.isInteger(TextBox_JobTypeId.Text))
item.JobTypeId= Convert.ToInt32(TextBox_JobTypeId.Text.Trim());
if(func.isInteger(TextBox_PaymentPlanId.Text))
item.PaymentPlanId= Convert.ToInt32(TextBox_PaymentPlanId.Text.Trim());
item.Name=TextBox_Name.Text.Trim();
if(func.isInteger(TextBox_IncludedJobs.Text))
item.IncludedJobs= Convert.ToInt32(TextBox_IncludedJobs.Text.Trim());
if(func.isInteger(TextBox_IncludedResumes.Text))
item.IncludedResumes= Convert.ToInt32(TextBox_IncludedResumes.Text.Trim());
item.IsActive=CheckBox_IsActive.Checked;
if(func.isDateTime(TextBox_DateCreated.Text.Trim()))
item.DateCreated= DateTime.Parse(TextBox_DateCreated.Text.Trim());
if(func.isDateTime(TextBox_DateUpdated.Text.Trim()))
item.DateUpdated= DateTime.Parse(TextBox_DateUpdated.Text.Trim());
mesaj.Text = "Yüklendi";
return true;
}catch(Exception ex){
mesaj.Text = ex.Message;
return false;
}
}else{
return false;
}
}



p_Prices  ------------------>  TextBox_Labels <----------------

<asp:Panel ID="Panel_Labels_p_Prices"  CssClass="Ei_Labels" runat="server">
<table class="p_Prices">
<tr>
<td class="name">
<asp:Label ID="Label_PriceId_1" CssClass="db_Name"  Text="PriceId" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PriceId" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_JobTypeId_1" CssClass="db_Name"  Text="JobTypeId" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_JobTypeId" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_PaymentPlanId_1" CssClass="db_Name"  Text="PaymentPlanId" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PaymentPlanId" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_Name_1" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Name" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_Amount_1" CssClass="db_Name"  Text="Amount" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_Amount" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_PricePerJob_1" CssClass="db_Name"  Text="PricePerJob" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PricePerJob" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_PricePerResume_1" CssClass="db_Name"  Text="PricePerResume" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_PricePerResume" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_IncludedJobs_1" CssClass="db_Name"  Text="IncludedJobs" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_IncludedJobs" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_IncludedResumes_1" CssClass="db_Name"  Text="IncludedResumes" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_IncludedResumes" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_IsActive_1" CssClass="db_Name"  Text="IsActive" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_IsActive" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr>
<td class="name">
<asp:Label ID="Label_DateCreated_1" CssClass="db_Name"  Text="DateCreated" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_DateCreated" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
<tr class="alt">
<td class="name">
<asp:Label ID="Label_DateUpdated_1" CssClass="db_Name"  Text="DateUpdated" runat="server"></asp:Label>
</td>
<td class="sprt"> : </td>
<td  class="value">
<asp:Label ID="Label_DateUpdated" CssClass="db_Value" runat="server"></asp:Label>
</td>
</tr>
</table>
</asp:Panel>



p_Prices  ------------------>  TextBox__labelsCodeBehind <----------------

protected void getData( p_Prices item){
Label_PriceId.Text = item.PriceId.ToString();
Label_JobTypeId.Text = item.JobTypeId.HasValue ?  item.JobTypeId.Value.ToString() : String.Empty;
Label_PaymentPlanId.Text = item.PaymentPlanId.HasValue ?  item.PaymentPlanId.Value.ToString() : String.Empty;
Label_Name.Text = item.Name.HasValue ?  item.Name.Value.ToString() : String.Empty;
Label_Amount.Text = item.Amount.HasValue ?  item.Amount.Value.ToString() : String.Empty;
Label_PricePerJob.Text = item.PricePerJob.HasValue ?  item.PricePerJob.Value.ToString() : String.Empty;
Label_PricePerResume.Text = item.PricePerResume.HasValue ?  item.PricePerResume.Value.ToString() : String.Empty;
Label_IncludedJobs.Text = item.IncludedJobs.HasValue ?  item.IncludedJobs.Value.ToString() : String.Empty;
Label_IncludedResumes.Text = item.IncludedResumes.HasValue ?  item.IncludedResumes.Value.ToString() : String.Empty;
Label_IsActive.Text = item.IsActive.HasValue ?  item.IsActive.Value.ToString() : String.Empty;
Label_DateCreated.Text = item.DateCreated.HasValue ?  item.DateCreated.Value.ToString() : String.Empty;
Label_DateUpdated.Text = item.DateUpdated.HasValue ?  item.DateUpdated.Value.ToString() : String.Empty;
}



p_Prices  ------------------>  TextBox_Label_ONLY <----------------

<asp:Label ID="Label_PriceId" CssClass="db_Name"  Text="PriceId" runat="server"></asp:Label>
<asp:Label ID="Label_JobTypeId" CssClass="db_Name"  Text="JobTypeId" runat="server"></asp:Label>
<asp:Label ID="Label_PaymentPlanId" CssClass="db_Name"  Text="PaymentPlanId" runat="server"></asp:Label>
<asp:Label ID="Label_Name" CssClass="db_Name"  Text="İsim" runat="server"></asp:Label>
<asp:Label ID="Label_Amount" CssClass="db_Name"  Text="Amount" runat="server"></asp:Label>
<asp:Label ID="Label_PricePerJob" CssClass="db_Name"  Text="PricePerJob" runat="server"></asp:Label>
<asp:Label ID="Label_PricePerResume" CssClass="db_Name"  Text="PricePerResume" runat="server"></asp:Label>
<asp:Label ID="Label_IncludedJobs" CssClass="db_Name"  Text="IncludedJobs" runat="server"></asp:Label>
<asp:Label ID="Label_IncludedResumes" CssClass="db_Name"  Text="IncludedResumes" runat="server"></asp:Label>
<asp:Label ID="Label_IsActive" CssClass="db_Name"  Text="IsActive" runat="server"></asp:Label>
<asp:Label ID="Label_DateCreated" CssClass="db_Name"  Text="DateCreated" runat="server"></asp:Label>
<asp:Label ID="Label_DateUpdated" CssClass="db_Name"  Text="DateUpdated" runat="server"></asp:Label>



p_Prices  ------------------>  TextBox_ListView_Evals <----------------


<asp:ListView ID="ListView_p_Prices" runat="server" DataKeyNames="PriceId" DataSourceID="SqlDataSource_p_Prices">
<ItemTemplate>
<%#  Eval("PriceId")  %>
<%#  Eval("JobTypeId")  %>
<%#  Eval("PaymentPlanId")  %>
<%#  Eval("Name")  %>
<%#  Eval("Amount")  %>
<%#  Eval("PricePerJob")  %>
<%#  Eval("PricePerResume")  %>
<%#  Eval("IncludedJobs")  %>
<%#  Eval("IncludedResumes")  %>
<%#  Eval("IsActive")  %>
<%#  Eval("DateCreated")  %>
<%#  Eval("DateUpdated")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_p_Prices" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT PriceId,JobTypeId,PaymentPlanId,Name,Amount,PricePerJob,PricePerResume,IncludedJobs,IncludedResumes,IsActive,DateCreated,DateUpdated FROM p_Prices WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



p_Prices  ------------------>  TextBox_ListView_Label_Evals <----------------

<asp:ListView ID="ListView_p_Prices" runat="server" DataKeyNames="PriceId" DataSourceID="SqlDataSource_p_Prices">
<LayoutTemplate>
    <table>
              <thead>
                  <tr>
<th>PriceId</th>
<th>JobTypeId</th>
<th>PaymentPlanId</th>
<th>Name</th>
<th>Amount</th>
<th>PricePerJob</th>
<th>PricePerResume</th>
<th>IncludedJobs</th>
<th>IncludedResumes</th>
<th>IsActive</th>
<th>DateCreated</th>
<th>DateUpdated</th>
                     </tr>
            </thead>
             <tbody id="itemContainer" runat="server"></tbody>
            <tfoot>
                <tr>
                   <th style="text-align:right" colspan="7">
                       <asp:DataPager runat="server" ID="DataPager" PageSize="10">
                           <Fields>
                               <asp:NumericPagerField ButtonCount="5"/>
                           </Fields>
                       </asp:DataPager>
                   </th>
                </tr>
            </tfoot>
        </table>
</LayoutTemplate>
<ItemTemplate>
<tr>
<td><asp:Label ID="Label_PriceId" cssClass="evalCss" runat="server" Text='<%#  Eval("PriceId")  %>' /></td>
<td><asp:Label ID="Label_JobTypeId" cssClass="evalCss" runat="server" Text='<%#  Eval("JobTypeId")  %>' /></td>
<td><asp:Label ID="Label_PaymentPlanId" cssClass="evalCss" runat="server" Text='<%#  Eval("PaymentPlanId")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_Amount" cssClass="evalCss" runat="server" Text='<%#  Eval("Amount")  %>' /></td>
<td><asp:Label ID="Label_PricePerJob" cssClass="evalCss" runat="server" Text='<%#  Eval("PricePerJob")  %>' /></td>
<td><asp:Label ID="Label_PricePerResume" cssClass="evalCss" runat="server" Text='<%#  Eval("PricePerResume")  %>' /></td>
<td><asp:Label ID="Label_IncludedJobs" cssClass="evalCss" runat="server" Text='<%#  Eval("IncludedJobs")  %>' /></td>
<td><asp:Label ID="Label_IncludedResumes" cssClass="evalCss" runat="server" Text='<%#  Eval("IncludedResumes")  %>' /></td>
<td><asp:Label ID="Label_IsActive" cssClass="evalCss" runat="server" Text='<%#  Eval("IsActive")  %>' /></td>
<td><asp:Label ID="Label_DateCreated" cssClass="evalCss" runat="server" Text='<%#  Eval("DateCreated")  %>' /></td>
<td><asp:Label ID="Label_DateUpdated" cssClass="evalCss" runat="server" Text='<%#  Eval("DateUpdated")  %>' /></td>
</tr>
</ItemTemplate>
<AlternatingItemTemplate>
<tr>
<td><asp:Label ID="Label_PriceId" cssClass="evalCss" runat="server" Text='<%#  Eval("PriceId")  %>' /></td>
<td><asp:Label ID="Label_JobTypeId" cssClass="evalCss" runat="server" Text='<%#  Eval("JobTypeId")  %>' /></td>
<td><asp:Label ID="Label_PaymentPlanId" cssClass="evalCss" runat="server" Text='<%#  Eval("PaymentPlanId")  %>' /></td>
<td><asp:Label ID="Label_Name" cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' /></td>
<td><asp:Label ID="Label_Amount" cssClass="evalCss" runat="server" Text='<%#  Eval("Amount")  %>' /></td>
<td><asp:Label ID="Label_PricePerJob" cssClass="evalCss" runat="server" Text='<%#  Eval("PricePerJob")  %>' /></td>
<td><asp:Label ID="Label_PricePerResume" cssClass="evalCss" runat="server" Text='<%#  Eval("PricePerResume")  %>' /></td>
<td><asp:Label ID="Label_IncludedJobs" cssClass="evalCss" runat="server" Text='<%#  Eval("IncludedJobs")  %>' /></td>
<td><asp:Label ID="Label_IncludedResumes" cssClass="evalCss" runat="server" Text='<%#  Eval("IncludedResumes")  %>' /></td>
<td><asp:Label ID="Label_IsActive" cssClass="evalCss" runat="server" Text='<%#  Eval("IsActive")  %>' /></td>
<td><asp:Label ID="Label_DateCreated" cssClass="evalCss" runat="server" Text='<%#  Eval("DateCreated")  %>' /></td>
<td><asp:Label ID="Label_DateUpdated" cssClass="evalCss" runat="server" Text='<%#  Eval("DateUpdated")  %>' /></td>
</tr>
</AlternatingItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_p_Prices" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT PriceId,JobTypeId,PaymentPlanId,Name,Amount,PricePerJob,PricePerResume,IncludedJobs,IncludedResumes,IsActive,DateCreated,DateUpdated FROM p_Prices WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



p_Prices  ------------------>  TextBox_ListView_Tables_Evals <----------------

<asp:ListView ID="ListView_p_Prices" runat="server" DataKeyNames="PriceId" DataSourceID="SqlDataSource_p_Prices">
<ItemTemplate>
<table>
<tr>
<td>
<asp:Label ID="Label_PriceId cssClass="evalCss" runat="server" Text='<%#  Eval("PriceId")  %>' />
</td>
<td>
<asp:Label ID="Label_JobTypeId cssClass="evalCss" runat="server" Text='<%#  Eval("JobTypeId")  %>' />
</td>
<td>
<asp:Label ID="Label_PaymentPlanId cssClass="evalCss" runat="server" Text='<%#  Eval("PaymentPlanId")  %>' />
</td>
<td>
<asp:Label ID="Label_Name cssClass="evalCss" runat="server" Text='<%#  Eval("Name")  %>' />
</td>
<td>
<asp:Label ID="Label_Amount cssClass="evalCss" runat="server" Text='<%#  Eval("Amount")  %>' />
</td>
<td>
<asp:Label ID="Label_PricePerJob cssClass="evalCss" runat="server" Text='<%#  Eval("PricePerJob")  %>' />
</td>
<td>
<asp:Label ID="Label_PricePerResume cssClass="evalCss" runat="server" Text='<%#  Eval("PricePerResume")  %>' />
</td>
<td>
<asp:Label ID="Label_IncludedJobs cssClass="evalCss" runat="server" Text='<%#  Eval("IncludedJobs")  %>' />
</td>
<td>
<asp:Label ID="Label_IncludedResumes cssClass="evalCss" runat="server" Text='<%#  Eval("IncludedResumes")  %>' />
</td>
<td>
<asp:Label ID="Label_IsActive cssClass="evalCss" runat="server" Text='<%#  Eval("IsActive")  %>' />
</td>
<td>
<asp:Label ID="Label_DateCreated cssClass="evalCss" runat="server" Text='<%#  Eval("DateCreated")  %>' />
</td>
<td>
<asp:Label ID="Label_DateUpdated cssClass="evalCss" runat="server" Text='<%#  Eval("DateUpdated")  %>' />
</td>
</tr>
</table>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_p_Prices" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT PriceId,JobTypeId,PaymentPlanId,Name,Amount,PricePerJob,PricePerResume,IncludedJobs,IncludedResumes,IsActive,DateCreated,DateUpdated FROM p_Prices WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



p_Prices  ------------------>  TextBox_ListView_Defaut <----------------


<asp:ListView ID="ListView_p_Prices" runat="server" DataKeyNames="PriceId" DataSourceID="SqlDataSource_p_Prices">
<ItemTemplate>
<%#  Eval("PriceId")  %>
<%#  Eval("JobTypeId")  %>
<%#  Eval("PaymentPlanId")  %>
<%#  Eval("Name")  %>
<%#  Eval("Amount")  %>
<%#  Eval("PricePerJob")  %>
<%#  Eval("PricePerResume")  %>
<%#  Eval("IncludedJobs")  %>
<%#  Eval("IncludedResumes")  %>
<%#  Eval("IsActive")  %>
<%#  Eval("DateCreated")  %>
<%#  Eval("DateUpdated")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_p_Prices" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT PriceId,JobTypeId,PaymentPlanId,Name,Amount,PricePerJob,PricePerResume,IncludedJobs,IncludedResumes,IsActive,DateCreated,DateUpdated FROM p_Prices WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



p_Prices  ------------------>  TextBox_ListView_Kutu <----------------

<asp:ListView ID="ListView_p_Prices" runat="server" DataKeyNames="PriceId" DataSourceID="SqlDataSource_p_Prices">
<ItemTemplate>
<li class="clearfix">
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<img src="ImageResize.ashx?image=<%# Eval("ImagePath").ToString().Replace("~/","") %>&wSize=90&hSize=90" />
</a>
<h5>
<a href="?mod=product&ProID=<%# Eval("ID") %>&lang=<%# Eval("Lang") %>">
<%# Eval("Name") %></a>
</h5>
</li>
<%#  Eval("PriceId")  %>
<%#  Eval("JobTypeId")  %>
<%#  Eval("PaymentPlanId")  %>
<%#  Eval("Name")  %>
<%#  Eval("Amount")  %>
<%#  Eval("PricePerJob")  %>
<%#  Eval("PricePerResume")  %>
<%#  Eval("IncludedJobs")  %>
<%#  Eval("IncludedResumes")  %>
<%#  Eval("IsActive")  %>
<%#  Eval("DateCreated")  %>
<%#  Eval("DateUpdated")  %>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_p_Prices" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT PriceId,JobTypeId,PaymentPlanId,Name,Amount,PricePerJob,PricePerResume,IncludedJobs,IncludedResumes,IsActive,DateCreated,DateUpdated FROM p_Prices WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



p_Prices  ------------------>  TextBox_ListView_Liste <----------------


<asp:ListView ID="ListView_p_Prices" runat="server" DataKeyNames="PriceId" DataSourceID="SqlDataSource_p_Prices">
<ItemTemplate>
<li class="p_Prices">
<%#  Eval("PriceId")  %>
<%#  Eval("JobTypeId")  %>
<%#  Eval("PaymentPlanId")  %>
<%#  Eval("Name")  %>
<%#  Eval("Amount")  %>
<%#  Eval("PricePerJob")  %>
<%#  Eval("PricePerResume")  %>
<%#  Eval("IncludedJobs")  %>
<%#  Eval("IncludedResumes")  %>
<%#  Eval("IsActive")  %>
<%#  Eval("DateCreated")  %>
<%#  Eval("DateUpdated")  %>
</li>
</ItemTemplate>
<EmptyItemTemplate><asp:Label ID="Label_EmptyItemTemplate" Visible="false" runat="server"></asp:Label></EmptyItemTemplate>
  <LayoutTemplate>
            <ul id="itemPlaceholderContainer" runat="server" style="">
                  <li id="itemPlaceholder" runat="server" />
             </ul>
           <div style="">
           </div>
       </LayoutTemplate>
</asp:ListView>
<asp:SqlDataSource ID="SqlDataSource_p_Prices" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT PriceId,JobTypeId,PaymentPlanId,Name,Amount,PricePerJob,PricePerResume,IncludedJobs,IncludedResumes,IsActive,DateCreated,DateUpdated FROM p_Prices WHERE (State = @State) AND  (Lang = @Lang) ORDER BY Ordering">
   <SelectParameters>
       <asp:Parameter DefaultValue="True" Name="State" Type="Boolean" />
      <asp:QueryStringParameter DefaultValue="tr-TR" Name="Lang" QueryStringField="lang" />
   </SelectParameters>
 </asp:SqlDataSource>



p_Prices  ------------------>  TextBox_Resource_to_XML <----------------




p_Prices  ------------------>  TextBox_List_XML <----------------

<word Keyword="PriceId" Translate="PriceId"/>
<word Keyword="JobTypeId" Translate="JobTypeId"/>
<word Keyword="PaymentPlanId" Translate="PaymentPlanId"/>
<word Keyword="Name" Translate="Name"/>
<word Keyword="Amount" Translate="Amount"/>
<word Keyword="PricePerJob" Translate="PricePerJob"/>
<word Keyword="PricePerResume" Translate="PricePerResume"/>
<word Keyword="IncludedJobs" Translate="IncludedJobs"/>
<word Keyword="IncludedResumes" Translate="IncludedResumes"/>
<word Keyword="IsActive" Translate="IsActive"/>
<word Keyword="DateCreated" Translate="DateCreated"/>
<word Keyword="DateUpdated" Translate="DateUpdated"/>



p_Prices  ------------------>  TextBox_GridView <----------------

<asp:Panel ID="Panel_GridView_p_Prices" CssClass="Ei_Grid" runat="server">
<asp:GridView ID="GridView_p_Prices" runat="server" AllowPaging="True" DataKeyNames="PriceId"
OnPageIndexChanging="GridView1_PageIndexChanging" 
ForeColor="#333333" OnRowCommand="GridView1_RowCommand"
DataSourceID="SqlDataSource_p_Prices" PageSize="20"
AutoGenerateColumns="False" AllowSorting="True" 
OnRowDataBound="GridView1_RowDataBound"
OnPageIndexChanged="GridView1_PageIndexChanged">
<FooterStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<RowStyle CssClass="TrRowBos" ForeColor="#333333" />
<AlternatingRowStyle CssClass="TrRowDolu" ForeColor="#284775" />
<Columns>
 <asp:TemplateField>
<HeaderTemplate>
<input id="chkAll" onclick="javascript:HepsiniSec(this);" type="checkbox" />
</HeaderTemplate>
<ItemTemplate>
<asp:CheckBox ID="CheckBox_Grid" CssClass="emo" runat="server" />
</ItemTemplate>
</asp:TemplateField>
<asp:ButtonField CommandName="btnDown" Text="Aşağı" ControlStyle-CssClass="gridMoveDown">
<ControlStyle CssClass="gridMoveDown"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField CommandName="btnUp"  Text="Yukarı"  ControlStyle-CssClass="gridMoveUp">
<ControlStyle CssClass="gridMoveUp"></ControlStyle>
</asp:ButtonField>
<asp:ButtonField  CommandName="btnUpdate" Text="Güncelle" ControlStyle-CssClass="gridEdit">
<ControlStyle CssClass="gridEdit"></ControlStyle>
</asp:ButtonField>
<asp:BoundField DataField="PriceId" HeaderText="PriceId" SortExpression="PriceId" /> 
<asp:BoundField DataField="JobTypeId" HeaderText="JobTypeId" SortExpression="JobTypeId" /> 
<asp:BoundField DataField="PaymentPlanId" HeaderText="PaymentPlanId" SortExpression="PaymentPlanId" /> 
<asp:BoundField DataField="Name" HeaderText="İsim" SortExpression="Name" /> 
<asp:BoundField DataField="Amount" HeaderText="Amount" SortExpression="Amount" /> 
<asp:BoundField DataField="PricePerJob" HeaderText="PricePerJob" SortExpression="PricePerJob" /> 
</Columns>
<PagerStyle BackColor="#284775" ForeColor="White" HorizontalAlign="Center"  />
<SelectedRowStyle BackColor="#E2DED6" Font-Bold="True" ForeColor="#333333" />
<HeaderStyle BackColor="#5D7B9D" Font-Bold="True" ForeColor="White" />
<EditRowStyle BackColor="#999999" />
<PagerSettings Position="TopAndBottom"  PageButtonCount="15" Mode="NumericFirstLast"
FirstPageText="<<" LastPageText=">>" />
</asp:GridView>
<asp:SqlDataSource ID="SqlDataSource_p_Prices" runat="server" ConnectionString="<%$ ConnectionStrings:ConnectionString %>" 
   SelectCommand="SELECT PriceId,JobTypeId,PaymentPlanId,Name,Amount,PricePerJob FROM p_Prices  ORDER BY Ordering">
 </asp:SqlDataSource>
</asp:Panel>



p_Prices  ------------------>  TextBox_Veri <----------------

protected void generatep_PricesData(int max){
E_CommerceDataContext data = new E_CommerceDataContext(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);
Random rand = new Random();
String path = "";
for (int i = 0; i < max; i++){
p_Prices item = new p_Prices();
item.JobTypeId= rand.Next(1000);
item.PaymentPlanId= rand.Next(1000);
item.Name=Guid.NewGuid().ToString().Replace("-"," ");
item.IncludedJobs= rand.Next(1000);
item.IncludedResumes= rand.Next(1000);
item.IsActive=true;
item.DateCreated= DateTime.Now;
item.DateUpdated= DateTime.Now;
data.p_Pricess.InsertOnSubmit(item);
}
data.SubmitChanges();
}



p_Prices  ------------------>  TextBox_SP <----------------

CREATE PROCEDURE p_PricesInsert(
@JobTypeId int,
@PaymentPlanId int,
@Name nvarchar(200),
@Amount money,
@PricePerJob money,
@PricePerResume money,
@IncludedJobs int,
@IncludedResumes int,
@IsActive bit,
@DateCreated datetime,
@DateUpdated datetime)
AS INSERT INTO p_Prices(
JobTypeId,PaymentPlanId,Name,Amount,PricePerJob,PricePerResume,IncludedJobs,IncludedResumes,IsActive,DateCreated,DateUpdated) VALUES (
@JobTypeId,@PaymentPlanId,@Name,@Amount,@PricePerJob,@PricePerResume,@IncludedJobs,@IncludedResumes,@IsActive,@DateCreated,@DateUpdated)
RETURN
----------------------------------------------
CREATE PROCEDURE p_PricesUPDATE(
@PriceId int,
@JobTypeId int,
@PaymentPlanId int,
@Name nvarchar(200),
@Amount money,
@PricePerJob money,
@PricePerResume money,
@IncludedJobs int,
@IncludedResumes int,
@IsActive bit,
@DateCreated datetime,
@DateUpdated datetime)
AS UPDATE p_Prices SET
JobTypeId = @JobTypeId,
PaymentPlanId = @PaymentPlanId,
Name = @Name,
Amount = @Amount,
PricePerJob = @PricePerJob,
PricePerResume = @PricePerResume,
IncludedJobs = @IncludedJobs,
IncludedResumes = @IncludedResumes,
IsActive = @IsActive,
DateCreated = @DateCreated,
DateUpdated = @DateUpdated
WHERE PriceId=@PriceId;
RETURN
----------------------------------------------
CREATE PROCEDURE p_PricesDelete(
@PriceId int
)
AS DELETE FROM p_Prices WHERE PriceId = @PriceId;
RETURN



p_Prices  ------------------>  TextBox_State <----------------

PriceId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_PriceId
JobTypeId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_JobTypeId
PaymentPlanId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PaymentPlanId
Name;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_Name
Amount;YES;money;;money;;BOS;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;
PricePerJob;YES;money;;money;;BOS;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;
PricePerResume;YES;money;;money;;BOS;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;
IncludedJobs;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_IncludedJobs
IncludedResumes;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_IncludedResumes
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;CheckBox_IsActive
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_DateUpdated



p_Prices  ------------------>  TextBox_InsertMethod <----------------

public void  insertp_Prices(p_PricesItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
SqlCommand command = new SqlCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO p_Prices (JobTypeId, PaymentPlanId, Name, Amount, PricePerJob, PricePerResume, IncludedJobs, IncludedResumes, IsActive, DateCreated, DateUpdated) values (@JobTypeId, @PaymentPlanId, @Name, @Amount, @PricePerJob, @PricePerResume, @IncludedJobs, @IncludedResumes, @IsActive, @DateCreated, @DateUpdated)";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,p_PricesItem item)
 {
command.Parameters.AddWithValue("@JobTypeId", item.JobTypeId);
command.Parameters.AddWithValue("@PaymentPlanId", item.PaymentPlanId);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Amount", item.Amount);
command.Parameters.AddWithValue("@PricePerJob", item.PricePerJob);
command.Parameters.AddWithValue("@PricePerResume", item.PricePerResume);
command.Parameters.AddWithValue("@IncludedJobs", item.IncludedJobs);
command.Parameters.AddWithValue("@IncludedResumes", item.IncludedResumes);
command.Parameters.AddWithValue("@IsActive", item.IsActive);
command.Parameters.AddWithValue("@DateCreated", item.DateCreated);
command.Parameters.AddWithValue("@DateUpdated", item.DateUpdated);
 }




p_Prices  ------------------>  TextBox_UpdateMethod <----------------

public void  updatep_Prices(p_PricesItem myItem){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE p_Prices SET  JobTypeId=@JobTypeId, PaymentPlanId=@PaymentPlanId, Name=@Name, Amount=@Amount, PricePerJob=@PricePerJob, PricePerResume=@PricePerResume, IncludedJobs=@IncludedJobs, IncludedResumes=@IncludedResumes, IsActive=@IsActive, DateCreated=@DateCreated, DateUpdated=@DateUpdated  WHERE PriceId= @PriceId";
command.Connection = connect;

generateParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void generateParametersAddWithValue(SqlCommand command,p_PricesItem item)
 {
command.Parameters.AddWithValue("@JobTypeId", item.JobTypeId);
command.Parameters.AddWithValue("@PaymentPlanId", item.PaymentPlanId);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Amount", item.Amount);
command.Parameters.AddWithValue("@PricePerJob", item.PricePerJob);
command.Parameters.AddWithValue("@PricePerResume", item.PricePerResume);
command.Parameters.AddWithValue("@IncludedJobs", item.IncludedJobs);
command.Parameters.AddWithValue("@IncludedResumes", item.IncludedResumes);
command.Parameters.AddWithValue("@IsActive", item.IsActive);
command.Parameters.AddWithValue("@DateCreated", item.DateCreated);
command.Parameters.AddWithValue("@DateUpdated", item.DateUpdated);
 }




p_Prices  ------------------>  TextBox_DeleteMethod <----------------

public void  deletep_Prices(int ID){
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From p_Prices WHERE PriceId= @PriceId";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



p_Prices  ------------------>  TextBox_SelectMethod1 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getp_PricesWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM p_Prices WHERE STATE= @STATE and LANG=@LANG ORDER BY ORDERING";

 List<SqlParameter> list = new List<SqlParameter>();

SqlParameter param1 = new SqlParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new SqlParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

 return this.getp_Prices(sql, list.ToArray());
}
public List<p_PricesItem> getp_Prices (SqlCommand SqlCommand)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = SqlCommand;

List<p_PricesItem> listItem = new List<p_PricesItem>();

 try
{
connect.Open();
command.Connection = connect;

SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



p_Prices  ------------------>  TextBox_SelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getp_Prices (String sql,SqlParameter [] values)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<p_PricesItem> listItem = new List<p_PricesItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



p_Prices  ------------------>  TextBox_SelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public p_PricesItem getp_Prices (int ID)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

p_PricesItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM p_Prices WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
SqlDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getp_PricesCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



p_Prices  ------------------>  TextBox_SelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getp_Prices (String sql)
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<p_PricesItem> listItem = new List<p_PricesItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
SqlDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



p_Prices  ------------------>  TextBox_SelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getAllp_PricesItems()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<p_PricesItem> listItem = new List<p_PricesItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM p_Prices";
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



p_Prices  ------------------>  TextBox_SelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getp_PricesItemsWithState()
{
using(SqlConnection connect = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
SqlCommand command = new SqlCommand();

List<p_PricesItem> listItem = new List<p_PricesItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM p_Prices WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", "true");
SqlDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



p_Prices  ------------------>  TextBox_OdbcInsertMethod <----------------

public Boolean  insertp_Prices(p_PricesItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
using(OdbcCommand command = new OdbcCommand()){

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO p_Prices (JobTypeId, PaymentPlanId, Name, Amount, PricePerJob, PricePerResume, IncludedJobs, IncludedResumes, IsActive, DateCreated, DateUpdated) values (@JobTypeId, @PaymentPlanId, @Name, @Amount, @PricePerJob, @PricePerResume, @IncludedJobs, @IncludedResumes, @IsActive, @DateCreated, @DateUpdated)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }
private void setParametersAddWithValue(OdbcCommand command,p_PricesItem item)
 {
command.Parameters.AddWithValue("@JobTypeId", item.JobTypeId);
command.Parameters.AddWithValue("@PaymentPlanId", item.PaymentPlanId);
command.Parameters.AddWithValue("@Name", item.Name);
command.Parameters.AddWithValue("@Amount", item.Amount);
command.Parameters.AddWithValue("@PricePerJob", item.PricePerJob);
command.Parameters.AddWithValue("@PricePerResume", item.PricePerResume);
command.Parameters.AddWithValue("@IncludedJobs", item.IncludedJobs);
command.Parameters.AddWithValue("@IncludedResumes", item.IncludedResumes);
command.Parameters.AddWithValue("@IsActive", item.IsActive);
command.Parameters.AddWithValue("@DateCreated", item.DateCreated);
command.Parameters.AddWithValue("@DateUpdated", item.DateUpdated);
 }




p_Prices  ------------------>  TextBox_OdbcUpdateMethod <----------------

public Boolean  updatep_Prices(p_PricesItem myItem){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE p_Prices SET  JobTypeId=@JobTypeId, PaymentPlanId=@PaymentPlanId, Name=@Name, Amount=@Amount, PricePerJob=@PricePerJob, PricePerResume=@PricePerResume, IncludedJobs=@IncludedJobs, IncludedResumes=@IncludedResumes, IsActive=@IsActive, DateCreated=@DateCreated, DateUpdated=@DateUpdated  WHERE PriceId= @PriceId";
command.Connection = connect;

setParametersAddWithValue(command,myItem);
int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



p_Prices  ------------------>  TextBox_OdbcDeleteMethod <----------------

public Boolean  deletep_Prices(int ID){
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From p_Prices WHERE PriceId= @PriceId";
command.Connection = connect;
command.Parameters.AddWithValue("@ID", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
return true;
 }
catch (Exception)
 {
return false;
 }
 finally
 {
     connect.Close();
 }
 }
 }
 }



p_Prices  ------------------>  TextBox_OdbcSelectMethod <----------------

public List<p_PricesItem> getp_Prices (OdbcCommand odbcCommand)
{
using(OdbcConnection connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OdbcCommand command = odbcCommand;

List<p_PricesItem> listItem = new List<p_PricesItem>();

 try
{
connect.Open();
command.Connection = connect;

OdbcDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
 }
catch (Exception)
 {
    listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



p_Prices  ------------------>  TextBox_OdbcSelectMethod2 <----------------

public List<p_PricesItem> getp_Prices (String sql,SqlParameter [] values)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

List<p_PricesItem> listItem = new List<p_PricesItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OdbcDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



p_Prices  ------------------>  TextBox_OdbcSelectMethod3 <----------------

public p_PricesItem getp_Prices (int ID)
{
using(OdbcConnection  connect = new OdbcConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
using(OdbcCommand command = new OdbcCommand()){

p_PricesItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM p_Prices WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OdbcDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getp_PricesCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     listItem = null;
 }
 finally
 {
     connect.Close();
 }
 }
return item;
}
}



p_Prices  ------------------>  TextBox_OleDbInsertMethod <----------------

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public int  insertp_Prices(p_PricesItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO p_Prices (JobTypeId, PaymentPlanId, Name, Amount, PricePerJob, PricePerResume, IncludedJobs, IncludedResumes, IsActive, DateCreated, DateUpdated) values (@JobTypeId, @PaymentPlanId, @Name, @Amount, @PricePerJob, @PricePerResume, @IncludedJobs, @IncludedResumes, @IsActive, @DateCreated, @DateUpdated)";
setParametersAddWithValue(command,myItem);
command.Connection = connect;

int affectedRowNumber =  command.ExecuteNonQuery();
command.CommandText = @"SELECT @@IDENTITY";

int id = (int)command.ExecuteScalar();
     connect.Close();
 return id;
 }
 }
private void setParametersAddWithValue(OleDbCommand command,p_PricesItem item)
 {
command.Parameters.AddWithValue("@JobTypeId", item.JobTypeId);
command.Parameters.AddWithValue("@PaymentPlanId", item.PaymentPlanId);
command.Parameters.AddWithValue("@Name", item.Name == null ? "" : item.Name);
command.Parameters.AddWithValue("@Amount", item.Amount);
command.Parameters.AddWithValue("@PricePerJob", item.PricePerJob);
command.Parameters.AddWithValue("@PricePerResume", item.PricePerResume);
command.Parameters.AddWithValue("@IncludedJobs", item.IncludedJobs);
command.Parameters.AddWithValue("@IncludedResumes", item.IncludedResumes);
command.Parameters.AddWithValue("@IsActive", item.IsActive);
command.Parameters.AddWithValue("@DateCreated", item.DateCreated);
command.Parameters.AddWithValue("@DateUpdated", item.DateUpdated);
 }

[DataObjectMethod(DataObjectMethodType.Insert, false)]
public void insertp_PricesALL(List<p_PricesItem> list)
{
foreach (p_PricesItem i in list)
{
this.insertp_Prices(i);
}
}



p_Prices  ------------------>  TextBox_OleDbUpdateMethod <----------------

[DataObjectMethod(DataObjectMethodType.Update, false)]
public Boolean  updatep_Prices(p_PricesItem myItem){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE p_Prices SET  JobTypeId=@JobTypeId, PaymentPlanId=@PaymentPlanId, Name=@Name, Amount=@Amount, PricePerJob=@PricePerJob, PricePerResume=@PricePerResume, IncludedJobs=@IncludedJobs, IncludedResumes=@IncludedResumes, IsActive=@IsActive, DateCreated=@DateCreated, DateUpdated=@DateUpdated  WHERE PriceId= @PriceId";
command.Connection = connect;
setParametersAddWithValue(command,myItem);
command.Parameters.AddWithValue("@PriceId", myItem.PriceId);
int affectedRowNumber =  command.ExecuteNonQuery();
     connect.Close();
 return true;
 }
 }
[DataObjectMethod(DataObjectMethodType.Update, false)]
public void updatep_PricesALL(List<p_PricesItem> list)
{
foreach (p_PricesItem i in list)
{
this.updatep_Prices(i);
}
}



p_Prices  ------------------>  TextBox_OleDbDeleteMethod <----------------

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public Boolean  deletep_Prices(int ID){
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From p_Prices WHERE PriceId= @PriceId";
command.Connection = connect;
command.Parameters.AddWithValue("@PriceId",ID);

int affectedRowNumber =  command.ExecuteNonQuery();
     connect.Close();
 return true;
 }
 }

[DataObjectMethod(DataObjectMethodType.Delete, false)]
public void deletep_PricesALL(List<p_PricesItem> list)
{
foreach (p_PricesItem i in list)
{
this.deletep_Prices(i.PriceId);
}
}
public void deletep_Prices(p_PricesItem item)
{
this.deletep_Prices(item.PriceId);
}



p_Prices  ------------------>  TextBox_OleDbSelectMethod <----------------

public List<p_PricesItem> getp_Prices (OleDbCommand oleDbCommand)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = oleDbCommand;

List<p_PricesItem> listItem = new List<p_PricesItem>();

connect.Open();
command.Connection = connect;

OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



p_Prices  ------------------>  TextBox_OleDbSelectMethod2 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getp_PricesWithState(Boolean state,String lang)
 {
String sql = "SELECT * FROM p_Prices WHERE STATE= @STATE AND LANG=@LANG ORDER BY ORDERING";

 List<OleDbParameter> list = new List<OleDbParameter>();

 OleDbParameter param1 = new OleDbParameter();
param1.ParameterName = "@STATE";
param1.Value = state;
param1.DbType = DbType.Boolean;
list.Add(param1);

param1 = new OleDbParameter();
param1.ParameterName = "@LANG";
param1.Value = lang;
param1.DbType = DbType.String;
list.Add(param1);

return this.getp_Prices(sql, list.ToArray());
}
[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getp_Prices (String sql,OleDbParameter [] values)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<p_PricesItem> listItem = new List<p_PricesItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



p_Prices  ------------------>  TextBox_OleDbSelectMethod3 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public p_PricesItem getp_Prices (int ID)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

p_PricesItem item = null;
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM p_Prices WHERE  PriceId=@ID";
command.Parameters.AddWithValue("@ID",ID);
OleDbDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getp_PricesCollectionFromReader(read);
 }
     connect.Close();
return item;
}
}



p_Prices  ------------------>  TextBox_OleDbSelectMethod4 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getp_Prices (String sql)
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<p_PricesItem> listItem = new List<p_PricesItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
OleDbDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



p_Prices  ------------------>  TextBox_OleDbSelectMethod5 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getAllp_PricesItems()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<p_PricesItem> listItem = new List<p_PricesItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM p_Prices";
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



p_Prices  ------------------>  TextBox_OleDbSelectMethod6 <----------------

[DataObjectMethod(DataObjectMethodType.Select, false)]
public List<p_PricesItem> getp_PricesItemsWithState()
{
using(OleDbConnection connect = new OleDbConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OleDbCommand command = new OleDbCommand();

List<p_PricesItem> listItem = new List<p_PricesItem>();

connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM p_Prices WHERE State=@State  ORDER BY Ordering ";
command.Parameters.AddWithValue("@State", true);
OleDbDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
     connect.Close();
return listItem;
}
}



p_Prices  ------------------>  TextBox_OracleInsertMethod <----------------

public void  insertp_Prices(p_PricesItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
 try
{
OracleCommand command = new OracleCommand();

connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"INSERT INTO p_Prices (JobTypeId, PaymentPlanId, Name, Amount, PricePerJob, PricePerResume, IncludedJobs, IncludedResumes, IsActive, DateCreated, DateUpdated) values (@JobTypeId, @PaymentPlanId, @Name, @Amount, @PricePerJob, @PricePerResume, @IncludedJobs, @IncludedResumes, @IsActive, @DateCreated, @DateUpdated)";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }
private void setParametersAddWithValue(OleDbCommand command,p_PricesItem item)
 {
command.Parameters.AddWithValue("@JobTypeId", item.JobTypeId);
command.Parameters.AddWithValue("@PaymentPlanId", item.PaymentPlanId);
command.Parameters.AddWithValue("@Name", item.Name == null ? "" : item.Name);
command.Parameters.AddWithValue("@Amount", item.Amount);
command.Parameters.AddWithValue("@PricePerJob", item.PricePerJob);
command.Parameters.AddWithValue("@PricePerResume", item.PricePerResume);
command.Parameters.AddWithValue("@IncludedJobs", item.IncludedJobs);
command.Parameters.AddWithValue("@IncludedResumes", item.IncludedResumes);
command.Parameters.AddWithValue("@IsActive", item.IsActive);
command.Parameters.AddWithValue("@DateCreated", item.DateCreated);
command.Parameters.AddWithValue("@DateUpdated", item.DateUpdated);
 }




p_Prices  ------------------>  TextBox_OracleUpdateMethod <----------------

public void  updatep_Prices(p_PricesItem myItem){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
//command.Parameters.AddWithValue("@ID", "ID");
command.CommandText = @"UPDATE p_Prices SET  JobTypeId=@JobTypeId, PaymentPlanId=@PaymentPlanId, Name=@Name, Amount=@Amount, PricePerJob=@PricePerJob, PricePerResume=@PricePerResume, IncludedJobs=@IncludedJobs, IncludedResumes=@IncludedResumes, IsActive=@IsActive, DateCreated=@DateCreated, DateUpdated=@DateUpdated  WHERE PriceId= @PriceId";
command.Connection = connect;
setParametersAddWithValue(command,myItem);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



p_Prices  ------------------>  TextBox_OracleDeleteMethod <----------------

public void  deletep_Prices(int ID){
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

 try
{
connect.Open();
command.CommandType = CommandType.Text;
command.CommandText = @"Delete From p_Prices WHERE PriceId= @PriceId";
command.Connection = connect;
command.Parameters.AddWithValue("@PriceId", ID);

int affectedRowNumber =  command.ExecuteNonQuery();
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
 }



p_Prices  ------------------>  TextBox_OracleSelectMethod <----------------

public List<p_PricesItem> getp_Prices (OracleCommand sqlCommand)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = sqlCommand;

List<p_PricesItem> listItem = new List<p_PricesItem>();

 try
{
connect.Open();
command.Connection = connect;

OracleDataReader read = command.ExecuteReader();

while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return listItem;
}
}



p_Prices  ------------------>  TextBox_OracleSelectMethod2 <----------------

public List<p_PricesItem> getp_Prices (String sql,SqlParameter [] values)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

List<p_PricesItem> listItem = new List<p_PricesItem>();

 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText =sql;
command.Parameters.AddRange(values);
OracleDataReader read = command.ExecuteReader();


while (read.Read())
{
listItem.Add(getp_PricesCollectionFromReader(read));
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
 }
return listItem;
}
}



p_Prices  ------------------>  TextBox_OracleSelectMethod3 <----------------

public p_PricesItem getp_Prices (int ID)
{
using(OracleConnection connect = new OracleConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString)){
OracleCommand command = new OracleCommand();

p_PricesItem item = null;
 try
{
connect.Open();
command.Connection = connect;
command.CommandType = CommandType.Text;
command.CommandText = "SELECT * FROM p_Prices WHERE  ID=@ID";
command.Parameters.AddWithValue("@ID", "ID");
OracleDataReader read = command.ExecuteReader();

if (read.Read())
{
item = getp_PricesCollectionFromReader(read);
 }
 }
catch (Exception)
 {
     throw;
 }
 finally
 {
     connect.Close();
 }
return item;
}
}



p_Prices  ------------------>  TextBox_MyTableItem <----------------

public int PriceId { get; set; }
public int JobTypeId { get; set; }
public int PaymentPlanId { get; set; }
public string Name { get; set; }
public int IncludedJobs { get; set; }
public int IncludedResumes { get; set; }
public Boolean IsActive { get; set; }
public DateTime DateCreated { get; set; }
public DateTime DateUpdated { get; set; }




p_Prices  ------------------>  TextBox2 <----------------




p_Prices  ------------------>  TextBox_IReader <----------------

public p_PricesItem getp_PricesCollectionFromReader (IDataRecord  read)
{
p_PricesItem item = new p_PricesItem();

item.PriceId = (read["PriceId"] is DBNull) ? -1 : Convert.ToInt32(read["PriceId"].ToString());
item.JobTypeId = (read["JobTypeId"] is DBNull) ? -1 : Convert.ToInt32(read["JobTypeId"].ToString());
item.PaymentPlanId = (read["PaymentPlanId"] is DBNull) ? -1 : Convert.ToInt32(read["PaymentPlanId"].ToString());
item.Name = (read["Name"] is DBNull) ? "" : read["Name"].ToString();
item.IncludedJobs = (read["IncludedJobs"] is DBNull) ? -1 : Convert.ToInt32(read["IncludedJobs"].ToString());
item.IncludedResumes = (read["IncludedResumes"] is DBNull) ? -1 : Convert.ToInt32(read["IncludedResumes"].ToString());
item.IsActive = (read["IsActive"] is DBNull) ? false : Boolean.Parse(read["IsActive"].ToString());
item.DateCreated = (read["DateCreated"] is DBNull) ? DateTime.Now : DateTime.Parse(read["DateCreated"].ToString());
item.DateUpdated = (read["DateUpdated"] is DBNull) ? DateTime.Now : DateTime.Parse(read["DateUpdated"].ToString());
return item;
}



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = l_Locations
TARİH = Wednesday, November 20, 2013 9:30:44 AM


LocationId    ----->    TextBoxMax_
EmployerId    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
Latitude    ----->    TextBoxMax_
Longitude    ----->    TextBoxMax_
IsActive    ----->    CheckBox_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_



l_Locations  ------------------>  TextBox_State <----------------

LocationId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_LocationId
EmployerId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_EmployerId
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Address
City;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_City
State;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_State
Postal;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_Postal
Country;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_Country
Latitude;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_Latitude
Longitude;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_Longitude
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;CheckBox_IsActive
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_DateUpdated



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = ep_Payments
TARİH = Wednesday, November 20, 2013 9:34:20 AM


PaymentId    ----->    TextBoxMax_
EmployerId    ----->    TextBoxMax_
PriceId    ----->    TextBoxMax_
CouponId    ----->    TextBoxMax_
GrossAmount    ----->    BOS
DiscountAmount    ----->    BOS
PaidAmount    ----->    BOS
PaymentStatusId    ----->    TextBoxMax_
IsActive    ----->    CheckBox_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_
JobListingId    ----->    TextBoxMax_



ep_Payments  ------------------>  TextBox_State <----------------

PaymentId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_PaymentId
EmployerId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_EmployerId
PriceId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PriceId
CouponId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_CouponId
GrossAmount;YES;money;;money;;BOS;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;
DiscountAmount;YES;money;;money;;BOS;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;
PaidAmount;YES;money;;money;;BOS;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;
PaymentStatusId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_PaymentStatusId
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;CheckBox_IsActive
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_DateUpdated
JobListingId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_JobListingId



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = j_Jobs
TARİH = Monday, November 25, 2013 5:20:46 AM


JobId    ----->    TextBoxMax_
JobParentId    ----->    TextBoxMax_
JobCategoryId    ----->    TextBoxMax_
EmployerId    ----->    TextBoxMax_
Title    ----->    TextBoxMax_
Skills    ----->    TextBoxMax_
Description    ----->    TextBoxMax_
Salary    ----->    TextBoxMax_
EmploymentType    ----->    TextBoxMax_
Experience    ----->    TextBoxMax_
MoreColumns    ----->    TextBoxMax_
IsActive    ----->    CheckBox_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_
LocationId    ----->    TextBoxMax_
ContactId    ----->    TextBoxMax_



j_Jobs  ------------------>  TextBox_State <----------------

JobId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_JobId
JobParentId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_JobParentId
JobCategoryId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_JobCategoryId
EmployerId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_EmployerId
Title;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Title
Skills;YES;nvarchar;-1;nvarchar(-1);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_Skills
Description;YES;nvarchar;-1;nvarchar(-1);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_Description
Salary;YES;nvarchar;150;nvarchar(150);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_Salary
EmploymentType;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_EmploymentType
Experience;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_Experience
MoreColumns;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_MoreColumns
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;CheckBox_IsActive
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_DateUpdated
LocationId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_LocationId
ContactId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_ContactId



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = em_EmployerMembershipRelation
TARİH = Monday, November 25, 2013 6:19:04 AM


UserId    ----->    TextBoxMax_
EmployerId    ----->    TextBoxMax_
Email    ----->    TextBoxMax_



em_EmployerMembershipRelation  ------------------>  TextBox_State <----------------

UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;False;True;True;True;TextBox_UserId
EmployerId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_EmployerId
Email;YES;varchar;300;varchar(300);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Email



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = v_Values
TARİH = Monday, December 09, 2013 2:25:29 PM


ValueId    ----->    TextBoxMax_
CookieId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
KeyName    ----->    TextBoxMax_
KeyValue    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_



v_Values  ------------------>  TextBox_State <----------------

ValueId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_ValueId
CookieId;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CookieId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_UserId
KeyName;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_KeyName
KeyValue;YES;nvarchar;-1;nvarchar(-1);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_KeyValue
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DateUpdated



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = v_Values
TARİH = Monday, December 09, 2013 2:26:42 PM


ValueId    ----->    TextBoxMax_
CookieId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
KeyName    ----->    TextBoxMax_
KeyValue    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_



v_Values  ------------------>  TextBox_State <----------------

ValueId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_ValueId
CookieId;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CookieId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_UserId
KeyName;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_KeyName
KeyValue;YES;nvarchar;-1;nvarchar(-1);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_KeyValue
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DateUpdated



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = v_Values
TARİH = Monday, December 09, 2013 2:29:01 PM


ValueId    ----->    TextBoxMax_
CookieId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
KeyName    ----->    TextBoxMax_
KeyValue    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_



v_Values  ------------------>  TextBox_State <----------------

ValueId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_ValueId
CookieId;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CookieId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_UserId
KeyName;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_KeyName
KeyValue;YES;nvarchar;-1;nvarchar(-1);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_KeyValue
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DateUpdated



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = v_Values
TARİH = Tuesday, December 10, 2013 9:22:57 AM


ValueId    ----->    TextBoxMax_
CookieId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
KeyName    ----->    TextBoxMax_
KeyValue    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_



v_Values  ------------------>  TextBox_State <----------------

ValueId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_ValueId
CookieId;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CookieId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_UserId
KeyName;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_KeyName
KeyValue;YES;nvarchar;-1;nvarchar(-1);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_KeyValue
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DateUpdated



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Value
TARİH = Tuesday, December 10, 2013 9:23:59 AM


ValueId    ----->    TextBoxMax_
CookieId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
KeyName    ----->    TextBoxMax_
KeyValue    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_



Value  ------------------>  TextBox_State <----------------

ValueId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_ValueId
CookieId;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CookieId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_UserId
KeyName;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_KeyName
KeyValue;YES;nvarchar;-1;nvarchar(-1);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_KeyValue
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DateUpdated



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = e_Employers
TARİH = Tuesday, December 10, 2013 9:24:22 AM


EmployerId    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
IsActive    ----->    CheckBox_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_
LogoFileUrl    ----->    TextBoxMax_
Description    ----->    TextBox_MultiLine
EmployeeCount    ----->    TextBoxMax_
FoundedYear    ----->    TextBoxMax_
IndustryId    ----->    TextBoxMax_
LocationId    ----->    TextBoxMax_
ContactId    ----->    TextBoxMax_



e_Employers  ------------------>  TextBox_State <----------------

EmployerId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_EmployerId
Company;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_Company
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsActive
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_DateUpdated
LogoFileUrl;YES;varchar;200;varchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_LogoFileUrl
Description;YES;nvarchar;2000;nvarchar(2000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_Description
EmployeeCount;YES;varchar;200;varchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_EmployeeCount
FoundedYear;YES;varchar;200;varchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_FoundedYear
IndustryId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_IndustryId
LocationId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_LocationId
ContactId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_ContactId



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Employer
TARİH = Tuesday, December 10, 2013 9:24:27 AM


EmployerId    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
IsActive    ----->    CheckBox_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_
LogoFileUrl    ----->    TextBoxMax_
Description    ----->    TextBox_MultiLine
EmployeeCount    ----->    TextBoxMax_
FoundedYear    ----->    TextBoxMax_
IndustryId    ----->    TextBoxMax_
LocationId    ----->    TextBoxMax_
ContactId    ----->    TextBoxMax_



Employer  ------------------>  TextBox_State <----------------

EmployerId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_EmployerId
Company;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_Company
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsActive
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_DateUpdated
LogoFileUrl;YES;varchar;200;varchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_LogoFileUrl
Description;YES;nvarchar;2000;nvarchar(2000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_Description
EmployeeCount;YES;varchar;200;varchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_EmployeeCount
FoundedYear;YES;varchar;200;varchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_FoundedYear
IndustryId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_IndustryId
LocationId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_LocationId
ContactId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_ContactId



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = j_Jobs
TARİH = Thursday, December 12, 2013 9:22:42 AM


JobId    ----->    TextBoxMax_
JobParentId    ----->    TextBoxMax_
JobCategoryId    ----->    TextBoxMax_
EmployerId    ----->    TextBoxMax_
Title    ----->    TextBoxMax_
Skills    ----->    TextBox_MultiLine
Description    ----->    TextBox_MultiLine
Salary    ----->    TextBoxMax_
EmploymentType    ----->    TextBoxMax_
Experience    ----->    TextBoxMax_
MoreColumns    ----->    TextBoxMax_
IsActive    ----->    CheckBox_
DateCreated    ----->    TextBoxMax_
DateUpdated    ----->    TextBoxMax_
LocationId    ----->    TextBoxMax_
ContactId    ----->    TextBoxMax_
Search    ----->    TextBox_MultiLine



j_Jobs  ------------------>  TextBox_State <----------------

JobId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_JobId
JobParentId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_JobParentId
JobCategoryId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_JobCategoryId
EmployerId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_EmployerId
Title;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Title
Skills;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_Skills
Description;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_Description
Salary;YES;nvarchar;150;nvarchar(150);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_Salary
EmploymentType;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_EmploymentType
Experience;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_Experience
MoreColumns;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_MoreColumns
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;CheckBox_IsActive
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_DateCreated
DateUpdated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_DateUpdated
LocationId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_LocationId
ContactId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_ContactId
Search;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;TextBox_Search



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = j_Category
TARİH = Wednesday, December 18, 2013 10:58:59 AM


CategoryId    ----->    TextBoxMax_
CategoryName    ----->    TextBoxMax_
IsRecommended    ----->    CheckBox_



j_Category  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
CategoryName;YES;nvarchar;250;nvarchar(250);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CategoryName
IsRecommended;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsRecommended



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = j_Category
TARİH = Wednesday, December 18, 2013 11:05:11 AM


CategoryId    ----->    TextBoxMax_
CategoryName    ----->    TextBoxMax_
IsRecommended    ----->    CheckBox_



j_Category  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
CategoryName;YES;nvarchar;250;nvarchar(250);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CategoryName
IsRecommended;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsRecommended



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = j_Category
TARİH = Wednesday, December 18, 2013 11:06:16 AM


CategoryId    ----->    TextBoxMax_
CategoryName    ----->    TextBoxMax_
IsRecommended    ----->    CheckBox_



j_Category  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
CategoryName;YES;nvarchar;250;nvarchar(250);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CategoryName
IsRecommended;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsRecommended



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = j_Category
TARİH = Wednesday, December 18, 2013 11:13:15 AM


CategoryId    ----->    TextBoxMax_
CategoryName    ----->    TextBoxMax_
IsRecommended    ----->    CheckBox_



j_Category  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
CategoryName;YES;nvarchar;250;nvarchar(250);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CategoryName
IsRecommended;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsRecommended



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = j_Category
TARİH = Friday, January 17, 2014 11:26:35 AM


CategoryId    ----->    TextBoxMax_
CategoryName    ----->    TextBoxMax_
IsRecommended    ----->    CheckBox_



j_Category  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
CategoryName;YES;nvarchar;250;nvarchar(250);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CategoryName
IsRecommended;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsRecommended



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = j_Category
TARİH = Friday, January 17, 2014 11:31:19 AM


CategoryId    ----->    TextBoxMax_
CategoryName    ----->    TextBoxMax_
IsRecommended    ----->    CheckBox_



j_Category  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
CategoryName;YES;nvarchar;250;nvarchar(250);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CategoryName
IsRecommended;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsRecommended



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = j_Category
TARİH = Friday, January 17, 2014 11:36:46 AM


CategoryId    ----->    TextBoxMax_
CategoryName    ----->    TextBoxMax_
IsRecommended    ----->    CheckBox_



j_Category  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
CategoryName;YES;nvarchar;250;nvarchar(250);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CategoryName
IsRecommended;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsRecommended



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = ga_Sites
TARİH = Friday, February 07, 2014 10:48:15 AM


ProfileId    ----->    TextBoxMax_
Domain    ----->    TextBoxMax_



ga_Sites  ------------------>  TextBox_State <----------------

ProfileId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;False;True;True;True;TextBox_ProfileId
Domain;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_Domain



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = ga_Sites
TARİH = Friday, February 07, 2014 10:48:29 AM


ProfileId    ----->    TextBoxMax_
Domain    ----->    TextBoxMax_



ga_Sites  ------------------>  TextBox_State <----------------

ProfileId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;False;True;True;True;TextBox_ProfileId
Domain;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_Domain



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = ga_Pages
TARİH = Friday, February 07, 2014 10:51:01 AM


PageId    ----->    TextBoxMax_
ProfileId    ----->    TextBoxMax_
PagePath    ----->    TextBox_MultiLine
Hash    ----->    BOS



ga_Pages  ------------------>  TextBox_State <----------------

PageId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;False;True;True;True;TextBox_PageId
ProfileId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_ProfileId
PagePath;YES;nvarchar;2500;nvarchar(2500);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PagePath
Hash;YES;binary;20;binary;;BOS;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = ga_Pages
TARİH = Monday, February 24, 2014 10:17:43 AM


PageId    ----->    TextBoxMax_
ProfileId    ----->    TextBoxMax_
PagePath    ----->    TextBox_MultiLine
Hash    ----->    BOS



ga_Pages  ------------------>  TextBox_State <----------------

PageId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;False;True;True;True;TextBox_PageId
ProfileId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_ProfileId
PagePath;YES;nvarchar;2500;nvarchar(2500);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PagePath
Hash;YES;binary;20;binary;;BOS;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Connect
TARİH = Thursday, March 06, 2014 11:03:05 AM


ConnectId    ----->    TextBoxMax_
Web    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_



Connect  ------------------>  TextBox_State <----------------

ConnectId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_ConnectId
Web;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_Web
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Fax



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Categorie
TARİH = Monday, March 10, 2014 11:30:46 AM


CategoryId    ----->    TextBoxMax_
ParentCategoryId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Url    ----->    TextBoxMax_
IsActive    ----->    CheckBox_



Categorie  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
ParentCategoryId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_ParentCategoryId
Name;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Name
Url;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_Url
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;CheckBox_IsActive



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Connect
TARİH = Tuesday, March 11, 2014 2:28:12 PM


ConnectId    ----->    TextBoxMax_
Web    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_



Connect  ------------------>  TextBox_State <----------------

ConnectId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_ConnectId
Web;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_Web
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Fax



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Companie
TARİH = Wednesday, March 12, 2014 2:18:09 PM


CompanyId    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
CompanyDescription    ----->    TextBox_MultiLine
ProductsDescription    ----->    TextBox_MultiLine
ConnectId    ----->    TextBoxMax_
SocialId    ----->    TextBoxMax_
ImageId    ----->    TextBoxMax_
IsActive    ----->    CheckBox_
SourceId    ----->    TextBoxMax_
CompanyRank    ----->    TextBoxMax_
AccessType    ----->    TextBoxMax_



Companie  ------------------>  TextBox_State <----------------

CompanyId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CompanyId
Company;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_Company
CompanyDescription;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_CompanyDescription
ProductsDescription;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_ProductsDescription
ConnectId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_ConnectId
SocialId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_SocialId
ImageId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_ImageId
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;CheckBox_IsActive
SourceId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_SourceId
CompanyRank;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_CompanyRank
AccessType;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_AccessType



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Area
TARİH = Wednesday, March 12, 2014 3:16:05 PM


AreaID    ----->    TextBoxMax_
AreaShortName    ----->    TextBoxMax_
AreaLongName    ----->    TextBoxMax_



Area  ------------------>  TextBox_State <----------------

AreaID;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;False;True;False;False;TextBox_AreaID
AreaShortName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_AreaShortName
AreaLongName;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_AreaLongName



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Magazine
TARİH = Wednesday, April 09, 2014 3:07:26 PM


MagazineID    ----->    TextBoxMax_
MagazineName    ----->    TextBoxMax_



Magazine  ------------------>  TextBox_State <----------------

MagazineID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;False;False;TextBox_MagazineID
MagazineName;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_MagazineName



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Magazine
TARİH = Wednesday, April 09, 2014 3:07:31 PM


MagazineID    ----->    TextBoxMax_
MagazineName    ----->    TextBoxMax_



Magazine  ------------------>  TextBox_State <----------------

MagazineID;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;False;False;TextBox_MagazineID
MagazineName;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_MagazineName



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Page
TARİH = Wednesday, April 09, 2014 3:11:21 PM


PageId    ----->    TextBoxMax_
ProfileId    ----->    TextBoxMax_
PagePath    ----->    TextBox_MultiLine
Hash    ----->    BOS



Page  ------------------>  TextBox_State <----------------

PageId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;False;True;True;True;TextBox_PageId
ProfileId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_ProfileId
PagePath;YES;nvarchar;2500;nvarchar(2500);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PagePath
Hash;YES;binary;20;binary;;BOS;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Location
TARİH = Friday, April 11, 2014 10:51:54 AM


LocationId    ----->    TextBoxMax_
LocationName    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
ConnectId    ----->    TextBoxMax_
ImageId    ----->    TextBoxMax_
IsActive    ----->    CheckBox_
ParentItemId    ----->    TextBoxMax_
EntityTypeId    ----->    TextBoxMax_
Latitude    ----->    TextBoxMax_
Longitude    ----->    TextBoxMax_



Location  ------------------>  TextBox_State <----------------

LocationId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_LocationId
LocationName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_LocationName
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Address
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_City
State;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_State
Postal;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_Postal
Country;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_Country
ConnectId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_ConnectId
ImageId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_ImageId
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;CheckBox_IsActive
ParentItemId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_ParentItemId
EntityTypeId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_EntityTypeId
Latitude;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_Latitude
Longitude;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_Longitude



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Template
TARİH = Friday, April 11, 2014 10:53:40 AM


TemplateId    ----->    TextBoxMax_
TemplateName    ----->    TextBoxMax_
IsIssueTemplate    ----->    CheckBox_
IsActive    ----->    CheckBox_



Template  ------------------>  TextBox_State <----------------

TemplateId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_TemplateId
TemplateName;YES;nvarchar;100;nvarchar(100);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_TemplateName
IsIssueTemplate;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsIssueTemplate
IsActive;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;CheckBox_IsActive



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Page
TARİH = Friday, April 11, 2014 10:56:26 AM


PageId    ----->    TextBoxMax_
ProfileId    ----->    TextBoxMax_
PagePath    ----->    TextBox_MultiLine
Hash    ----->    BOS



Page  ------------------>  TextBox_State <----------------

PageId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;False;True;True;True;TextBox_PageId
ProfileId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_ProfileId
PagePath;YES;nvarchar;2500;nvarchar(2500);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PagePath
Hash;YES;binary;20;binary;;BOS;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Issue
TARİH = Friday, April 11, 2014 11:08:31 AM


IssueId    ----->    TextBoxMax_
MagazineId    ----->    TextBoxMax_
IssueDate    ----->    TextBoxMax_



Issue  ------------------>  TextBox_State <----------------

IssueId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_IssueId
MagazineId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_MagazineId
IssueDate;YES;date;;date;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_IssueDate



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Connect
TARİH = Saturday, June 28, 2014 4:22:47 AM


ConnectId    ----->    TextBoxMax_
Web    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_



Connect  ------------------>  TextBox_State <----------------

ConnectId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_ConnectId
Web;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_Web
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Fax



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Category
TARİH = Saturday, June 28, 2014 10:55:04 AM


CategoryId    ----->    TextBoxMax_
CategoryName    ----->    TextBoxMax_
IsRecommended    ----->    CheckBox_



Category  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
CategoryName;YES;nvarchar;250;nvarchar(250);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CategoryName
IsRecommended;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsRecommended



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Category
TARİH = Saturday, June 28, 2014 10:55:39 AM


CategoryId    ----->    TextBoxMax_
CategoryName    ----->    TextBoxMax_
IsRecommended    ----->    CheckBox_



Category  ------------------>  TextBox_State <----------------

CategoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_CategoryId
CategoryName;YES;nvarchar;250;nvarchar(250);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_CategoryName
IsRecommended;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;CheckBox_IsRecommended



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Storie
TARİH = Tuesday, September 09, 2014 2:04:09 PM


StoryId    ----->    TextBoxMax_
Title    ----->    TextBox_MultiLine
BodyHtml    ----->    TextBox_MultiLine
DateCreated    ----->    BOS
DateModified    ----->    BOS
EditorUserId    ----->    TextBoxMax_
Status    ----->    TextBoxMax_
Author    ----->    TextBoxMax_
DateStory    ----->    TextBoxMax_
Search    ----->    TextBox_MultiLine
SourceRecordId    ----->    TextBoxMax_
Source    ----->    TextBoxMax_



Storie  ------------------>  TextBox_State <----------------

StoryId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_StoryId
Title;NO;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_Title
BodyHtml;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_BodyHtml
DateCreated;YES;datetime2;;datetime2;;BOS;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;
DateModified;YES;datetime2;;datetime2;;BOS;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;
EditorUserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_EditorUserId
Status;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_Status
Author;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_Author
DateStory;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_DateStory
Search;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_Search
SourceRecordId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_SourceRecordId
Source;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Source



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Order
TARİH = Thursday, April 23, 2015 3:52:12 PM


OrderId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
PriceGross    ----->    TextBoxMax_
PriceDiscount    ----->    TextBoxMax_
Notes    ----->    TextBox_MultiLine
NotesPrivate    ----->    TextBox_MultiLine
DatePlanStart    ----->    TextBoxMax_
DatePlanEnd    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateModified    ----->    TextBoxMax_
EditorUserId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
IsApproved    ----->    CheckBox_
DateApproved    ----->    TextBoxMax_
DateInvoiced    ----->    TextBoxMax_
DateCardCharged    ----->    TextBoxMax_
DateContactRequested    ----->    TextBoxMax_
IsCanceled    ----->    CheckBox_
DateCanceled    ----->    TextBoxMax_
PaypalTransId    ----->    TextBoxMax_
ProcessorName    ----->    TextBoxMax_
PaymentStatus    ----->    TextBoxMax_



Order  ------------------>  TextBox_State <----------------

OrderId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_OrderId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_UserId
PriceGross;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PriceGross
PriceDiscount;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_PriceDiscount
Notes;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Notes
NotesPrivate;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_NotesPrivate
DatePlanStart;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DatePlanStart
DatePlanEnd;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_DatePlanEnd
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_DateCreated
DateModified;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_DateModified
EditorUserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_EditorUserId
Name;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Name
Company;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_Company
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_Fax
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;TextBox_Address
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;18;False;False;False;False;TextBox_City
State;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;19;False;False;False;False;TextBox_State
Postal;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;20;False;20;False;False;False;False;TextBox_Postal
Country;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;21;False;21;False;False;False;False;TextBox_Country
IsApproved;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;22;False;22;False;False;False;False;CheckBox_IsApproved
DateApproved;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;23;False;23;False;False;False;False;TextBox_DateApproved
DateInvoiced;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;24;False;24;False;False;False;False;TextBox_DateInvoiced
DateCardCharged;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;25;False;25;False;False;False;False;TextBox_DateCardCharged
DateContactRequested;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;26;False;26;False;False;False;False;TextBox_DateContactRequested
IsCanceled;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;27;False;27;False;False;False;False;CheckBox_IsCanceled
DateCanceled;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;28;False;28;False;False;False;False;TextBox_DateCanceled
PaypalTransId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;29;False;29;False;False;False;False;TextBox_PaypalTransId
ProcessorName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;30;False;30;False;False;False;False;TextBox_ProcessorName
PaymentStatus;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;31;False;31;False;False;False;False;TextBox_PaymentStatus



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Order
TARİH = Thursday, April 23, 2015 3:53:45 PM


OrderId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
PriceGross    ----->    TextBoxMax_
PriceDiscount    ----->    TextBoxMax_
Notes    ----->    TextBox_MultiLine
NotesPrivate    ----->    TextBox_MultiLine
DatePlanStart    ----->    TextBoxMax_
DatePlanEnd    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateModified    ----->    TextBoxMax_
EditorUserId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
IsApproved    ----->    CheckBox_
DateApproved    ----->    TextBoxMax_
DateInvoiced    ----->    TextBoxMax_
DateCardCharged    ----->    TextBoxMax_
DateContactRequested    ----->    TextBoxMax_
IsCanceled    ----->    CheckBox_
DateCanceled    ----->    TextBoxMax_
PaypalTransId    ----->    TextBoxMax_
ProcessorName    ----->    TextBoxMax_
PaymentStatus    ----->    TextBoxMax_



Order  ------------------>  TextBox_State <----------------

OrderId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_OrderId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_UserId
PriceGross;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PriceGross
PriceDiscount;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_PriceDiscount
Notes;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Notes
NotesPrivate;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_NotesPrivate
DatePlanStart;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DatePlanStart
DatePlanEnd;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_DatePlanEnd
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_DateCreated
DateModified;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_DateModified
EditorUserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_EditorUserId
Name;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Name
Company;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_Company
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_Fax
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;TextBox_Address
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;18;False;False;False;False;TextBox_City
State;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;19;False;False;False;False;TextBox_State
Postal;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;20;False;20;False;False;False;False;TextBox_Postal
Country;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;21;False;21;False;False;False;False;TextBox_Country
IsApproved;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;22;False;22;False;False;False;False;CheckBox_IsApproved
DateApproved;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;23;False;23;False;False;False;False;TextBox_DateApproved
DateInvoiced;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;24;False;24;False;False;False;False;TextBox_DateInvoiced
DateCardCharged;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;25;False;25;False;False;False;False;TextBox_DateCardCharged
DateContactRequested;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;26;False;26;False;False;False;False;TextBox_DateContactRequested
IsCanceled;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;27;False;27;False;False;False;False;CheckBox_IsCanceled
DateCanceled;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;28;False;28;False;False;False;False;TextBox_DateCanceled
PaypalTransId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;29;False;29;False;False;False;False;TextBox_PaypalTransId
ProcessorName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;30;False;30;False;False;False;False;TextBox_ProcessorName
PaymentStatus;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;31;False;31;False;False;False;False;TextBox_PaymentStatus



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Order
TARİH = Thursday, April 23, 2015 3:54:09 PM


OrderId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
PriceGross    ----->    TextBoxMax_
PriceDiscount    ----->    TextBoxMax_
Notes    ----->    TextBox_MultiLine
NotesPrivate    ----->    TextBox_MultiLine
DatePlanStart    ----->    TextBoxMax_
DatePlanEnd    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateModified    ----->    TextBoxMax_
EditorUserId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
IsApproved    ----->    CheckBox_
DateApproved    ----->    TextBoxMax_
DateInvoiced    ----->    TextBoxMax_
DateCardCharged    ----->    TextBoxMax_
DateContactRequested    ----->    TextBoxMax_
IsCanceled    ----->    CheckBox_
DateCanceled    ----->    TextBoxMax_
PaypalTransId    ----->    TextBoxMax_
ProcessorName    ----->    TextBoxMax_
PaymentStatus    ----->    TextBoxMax_



Order  ------------------>  TextBox_State <----------------

OrderId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_OrderId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_UserId
PriceGross;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PriceGross
PriceDiscount;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_PriceDiscount
Notes;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Notes
NotesPrivate;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_NotesPrivate
DatePlanStart;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DatePlanStart
DatePlanEnd;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_DatePlanEnd
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_DateCreated
DateModified;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_DateModified
EditorUserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_EditorUserId
Name;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Name
Company;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_Company
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_Fax
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;TextBox_Address
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;18;False;False;False;False;TextBox_City
State;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;19;False;False;False;False;TextBox_State
Postal;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;20;False;20;False;False;False;False;TextBox_Postal
Country;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;21;False;21;False;False;False;False;TextBox_Country
IsApproved;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;22;False;22;False;False;False;False;CheckBox_IsApproved
DateApproved;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;23;False;23;False;False;False;False;TextBox_DateApproved
DateInvoiced;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;24;False;24;False;False;False;False;TextBox_DateInvoiced
DateCardCharged;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;25;False;25;False;False;False;False;TextBox_DateCardCharged
DateContactRequested;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;26;False;26;False;False;False;False;TextBox_DateContactRequested
IsCanceled;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;27;False;27;False;False;False;False;CheckBox_IsCanceled
DateCanceled;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;28;False;28;False;False;False;False;TextBox_DateCanceled
PaypalTransId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;29;False;29;False;False;False;False;TextBox_PaypalTransId
ProcessorName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;30;False;30;False;False;False;False;TextBox_ProcessorName
PaymentStatus;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;31;False;31;False;False;False;False;TextBox_PaymentStatus



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Order
TARİH = Thursday, April 23, 2015 3:54:20 PM


OrderId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
PriceGross    ----->    TextBoxMax_
PriceDiscount    ----->    TextBoxMax_
Notes    ----->    TextBox_MultiLine
NotesPrivate    ----->    TextBox_MultiLine
DatePlanStart    ----->    TextBoxMax_
DatePlanEnd    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateModified    ----->    TextBoxMax_
EditorUserId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
IsApproved    ----->    CheckBox_
DateApproved    ----->    TextBoxMax_
DateInvoiced    ----->    TextBoxMax_
DateCardCharged    ----->    TextBoxMax_
DateContactRequested    ----->    TextBoxMax_
IsCanceled    ----->    CheckBox_
DateCanceled    ----->    TextBoxMax_
PaypalTransId    ----->    TextBoxMax_
ProcessorName    ----->    TextBoxMax_
PaymentStatus    ----->    TextBoxMax_



Order  ------------------>  TextBox_State <----------------

OrderId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_OrderId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_UserId
PriceGross;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PriceGross
PriceDiscount;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_PriceDiscount
Notes;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Notes
NotesPrivate;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_NotesPrivate
DatePlanStart;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DatePlanStart
DatePlanEnd;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_DatePlanEnd
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_DateCreated
DateModified;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_DateModified
EditorUserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_EditorUserId
Name;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Name
Company;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_Company
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_Fax
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;TextBox_Address
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;18;False;False;False;False;TextBox_City
State;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;19;False;False;False;False;TextBox_State
Postal;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;20;False;20;False;False;False;False;TextBox_Postal
Country;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;21;False;21;False;False;False;False;TextBox_Country
IsApproved;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;22;False;22;False;False;False;False;CheckBox_IsApproved
DateApproved;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;23;False;23;False;False;False;False;TextBox_DateApproved
DateInvoiced;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;24;False;24;False;False;False;False;TextBox_DateInvoiced
DateCardCharged;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;25;False;25;False;False;False;False;TextBox_DateCardCharged
DateContactRequested;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;26;False;26;False;False;False;False;TextBox_DateContactRequested
IsCanceled;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;27;False;27;False;False;False;False;CheckBox_IsCanceled
DateCanceled;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;28;False;28;False;False;False;False;TextBox_DateCanceled
PaypalTransId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;29;False;29;False;False;False;False;TextBox_PaypalTransId
ProcessorName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;30;False;30;False;False;False;False;TextBox_ProcessorName
PaymentStatus;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;31;False;31;False;False;False;False;TextBox_PaymentStatus



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Order
TARİH = Thursday, April 23, 2015 3:59:25 PM


OrderId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
PriceGross    ----->    TextBoxMax_
PriceDiscount    ----->    TextBoxMax_
Notes    ----->    TextBox_MultiLine
NotesPrivate    ----->    TextBox_MultiLine
DatePlanStart    ----->    TextBoxMax_
DatePlanEnd    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateModified    ----->    TextBoxMax_
EditorUserId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
IsApproved    ----->    CheckBox_
DateApproved    ----->    TextBoxMax_
DateInvoiced    ----->    TextBoxMax_
DateCardCharged    ----->    TextBoxMax_
DateContactRequested    ----->    TextBoxMax_
IsCanceled    ----->    CheckBox_
DateCanceled    ----->    TextBoxMax_
PaypalTransId    ----->    TextBoxMax_
ProcessorName    ----->    TextBoxMax_
PaymentStatus    ----->    TextBoxMax_



Order  ------------------>  TextBox_State <----------------

OrderId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_OrderId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_UserId
PriceGross;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PriceGross
PriceDiscount;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_PriceDiscount
Notes;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Notes
NotesPrivate;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_NotesPrivate
DatePlanStart;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DatePlanStart
DatePlanEnd;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_DatePlanEnd
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_DateCreated
DateModified;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_DateModified
EditorUserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_EditorUserId
Name;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Name
Company;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_Company
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_Fax
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;TextBox_Address
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;18;False;False;False;False;TextBox_City
State;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;19;False;False;False;False;TextBox_State
Postal;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;20;False;20;False;False;False;False;TextBox_Postal
Country;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;21;False;21;False;False;False;False;TextBox_Country
IsApproved;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;22;False;22;False;False;False;False;CheckBox_IsApproved
DateApproved;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;23;False;23;False;False;False;False;TextBox_DateApproved
DateInvoiced;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;24;False;24;False;False;False;False;TextBox_DateInvoiced
DateCardCharged;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;25;False;25;False;False;False;False;TextBox_DateCardCharged
DateContactRequested;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;26;False;26;False;False;False;False;TextBox_DateContactRequested
IsCanceled;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;27;False;27;False;False;False;False;CheckBox_IsCanceled
DateCanceled;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;28;False;28;False;False;False;False;TextBox_DateCanceled
PaypalTransId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;29;False;29;False;False;False;False;TextBox_PaypalTransId
ProcessorName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;30;False;30;False;False;False;False;TextBox_ProcessorName
PaymentStatus;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;31;False;31;False;False;False;False;TextBox_PaymentStatus



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Order
TARİH = Thursday, April 23, 2015 4:00:48 PM


OrderId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
PriceGross    ----->    TextBoxMax_
PriceDiscount    ----->    TextBoxMax_
Notes    ----->    TextBox_MultiLine
NotesPrivate    ----->    TextBox_MultiLine
DatePlanStart    ----->    TextBoxMax_
DatePlanEnd    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateModified    ----->    TextBoxMax_
EditorUserId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
IsApproved    ----->    CheckBox_
DateApproved    ----->    TextBoxMax_
DateInvoiced    ----->    TextBoxMax_
DateCardCharged    ----->    TextBoxMax_
DateContactRequested    ----->    TextBoxMax_
IsCanceled    ----->    CheckBox_
DateCanceled    ----->    TextBoxMax_
PaypalTransId    ----->    TextBoxMax_
ProcessorName    ----->    TextBoxMax_
PaymentStatus    ----->    TextBoxMax_



Order  ------------------>  TextBox_State <----------------

OrderId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_OrderId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_UserId
PriceGross;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PriceGross
PriceDiscount;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_PriceDiscount
Notes;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Notes
NotesPrivate;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_NotesPrivate
DatePlanStart;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DatePlanStart
DatePlanEnd;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_DatePlanEnd
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_DateCreated
DateModified;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_DateModified
EditorUserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_EditorUserId
Name;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Name
Company;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_Company
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_Fax
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;TextBox_Address
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;18;False;False;False;False;TextBox_City
State;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;19;False;False;False;False;TextBox_State
Postal;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;20;False;20;False;False;False;False;TextBox_Postal
Country;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;21;False;21;False;False;False;False;TextBox_Country
IsApproved;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;22;False;22;False;False;False;False;CheckBox_IsApproved
DateApproved;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;23;False;23;False;False;False;False;TextBox_DateApproved
DateInvoiced;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;24;False;24;False;False;False;False;TextBox_DateInvoiced
DateCardCharged;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;25;False;25;False;False;False;False;TextBox_DateCardCharged
DateContactRequested;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;26;False;26;False;False;False;False;TextBox_DateContactRequested
IsCanceled;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;27;False;27;False;False;False;False;CheckBox_IsCanceled
DateCanceled;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;28;False;28;False;False;False;False;TextBox_DateCanceled
PaypalTransId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;29;False;29;False;False;False;False;TextBox_PaypalTransId
ProcessorName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;30;False;30;False;False;False;False;TextBox_ProcessorName
PaymentStatus;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;31;False;31;False;False;False;False;TextBox_PaymentStatus



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Order
TARİH = Thursday, April 23, 2015 4:02:09 PM


OrderId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
PriceGross    ----->    TextBoxMax_
PriceDiscount    ----->    TextBoxMax_
Notes    ----->    TextBox_MultiLine
NotesPrivate    ----->    TextBox_MultiLine
DatePlanStart    ----->    TextBoxMax_
DatePlanEnd    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateModified    ----->    TextBoxMax_
EditorUserId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
IsApproved    ----->    CheckBox_
DateApproved    ----->    TextBoxMax_
DateInvoiced    ----->    TextBoxMax_
DateCardCharged    ----->    TextBoxMax_
DateContactRequested    ----->    TextBoxMax_
IsCanceled    ----->    CheckBox_
DateCanceled    ----->    TextBoxMax_
PaypalTransId    ----->    TextBoxMax_
ProcessorName    ----->    TextBoxMax_
PaymentStatus    ----->    TextBoxMax_



Order  ------------------>  TextBox_State <----------------

OrderId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_OrderId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_UserId
PriceGross;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PriceGross
PriceDiscount;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_PriceDiscount
Notes;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Notes
NotesPrivate;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_NotesPrivate
DatePlanStart;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DatePlanStart
DatePlanEnd;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_DatePlanEnd
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_DateCreated
DateModified;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_DateModified
EditorUserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_EditorUserId
Name;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Name
Company;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_Company
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_Fax
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;TextBox_Address
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;18;False;False;False;False;TextBox_City
State;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;19;False;False;False;False;TextBox_State
Postal;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;20;False;20;False;False;False;False;TextBox_Postal
Country;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;21;False;21;False;False;False;False;TextBox_Country
IsApproved;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;22;False;22;False;False;False;False;CheckBox_IsApproved
DateApproved;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;23;False;23;False;False;False;False;TextBox_DateApproved
DateInvoiced;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;24;False;24;False;False;False;False;TextBox_DateInvoiced
DateCardCharged;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;25;False;25;False;False;False;False;TextBox_DateCardCharged
DateContactRequested;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;26;False;26;False;False;False;False;TextBox_DateContactRequested
IsCanceled;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;27;False;27;False;False;False;False;CheckBox_IsCanceled
DateCanceled;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;28;False;28;False;False;False;False;TextBox_DateCanceled
PaypalTransId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;29;False;29;False;False;False;False;TextBox_PaypalTransId
ProcessorName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;30;False;30;False;False;False;False;TextBox_ProcessorName
PaymentStatus;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;31;False;31;False;False;False;False;TextBox_PaymentStatus



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Order
TARİH = Thursday, April 23, 2015 4:03:24 PM


OrderId    ----->    TextBoxMax_
UserId    ----->    TextBoxMax_
PriceGross    ----->    TextBoxMax_
PriceDiscount    ----->    TextBoxMax_
Notes    ----->    TextBox_MultiLine
NotesPrivate    ----->    TextBox_MultiLine
DatePlanStart    ----->    TextBoxMax_
DatePlanEnd    ----->    TextBoxMax_
DateCreated    ----->    TextBoxMax_
DateModified    ----->    TextBoxMax_
EditorUserId    ----->    TextBoxMax_
Name    ----->    TextBoxMax_
Company    ----->    TextBoxMax_
Email    ----->    TextBoxMax_
Phone    ----->    TextBoxMax_
Fax    ----->    TextBoxMax_
Address    ----->    TextBoxMax_
City    ----->    TextBoxMax_
State    ----->    TextBoxMax_
Postal    ----->    TextBoxMax_
Country    ----->    TextBoxMax_
IsApproved    ----->    CheckBox_
DateApproved    ----->    TextBoxMax_
DateInvoiced    ----->    TextBoxMax_
DateCardCharged    ----->    TextBoxMax_
DateContactRequested    ----->    TextBoxMax_
IsCanceled    ----->    CheckBox_
DateCanceled    ----->    TextBoxMax_
PaypalTransId    ----->    TextBoxMax_
ProcessorName    ----->    TextBoxMax_
PaymentStatus    ----->    TextBoxMax_



Order  ------------------>  TextBox_State <----------------

OrderId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;False;1;True;True;True;True;TextBox_OrderId
UserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;2;False;True;True;True;TextBox_UserId
PriceGross;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;3;False;True;True;True;TextBox_PriceGross
PriceDiscount;YES;float;;float;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;TextBox_PriceDiscount
Notes;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Notes
NotesPrivate;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_NotesPrivate
DatePlanStart;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_DatePlanStart
DatePlanEnd;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_DatePlanEnd
DateCreated;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_DateCreated
DateModified;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;TextBox_DateModified
EditorUserId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_EditorUserId
Name;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Name
Company;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;TextBox_Company
Email;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_Email
Phone;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_Phone
Fax;YES;nvarchar;200;nvarchar(200);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;TextBox_Fax
Address;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;TextBox_Address
City;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;18;False;18;False;False;False;False;TextBox_City
State;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;19;False;19;False;False;False;False;TextBox_State
Postal;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;20;False;20;False;False;False;False;TextBox_Postal
Country;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;21;False;21;False;False;False;False;TextBox_Country
IsApproved;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;22;False;22;False;False;False;False;CheckBox_IsApproved
DateApproved;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;23;False;23;False;False;False;False;TextBox_DateApproved
DateInvoiced;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;24;False;24;False;False;False;False;TextBox_DateInvoiced
DateCardCharged;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;25;False;25;False;False;False;False;TextBox_DateCardCharged
DateContactRequested;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;26;False;26;False;False;False;False;TextBox_DateContactRequested
IsCanceled;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;27;False;27;False;False;False;False;CheckBox_IsCanceled
DateCanceled;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;28;False;28;False;False;False;False;TextBox_DateCanceled
PaypalTransId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;29;False;29;False;False;False;False;TextBox_PaypalTransId
ProcessorName;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;30;False;30;False;False;False;False;TextBox_ProcessorName
PaymentStatus;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;31;False;31;False;False;False;False;TextBox_PaymentStatus



*************************************FINISH***********************************************
**************************************************************************
TABLO ADI = Navigations
TARİH = Thursday, April 30, 2015 11:55:36 AM


Id    ----->    TextBoxMax_
StoreId    ----->    TextBoxMax_
ParentId    ----->    TextBoxMax_
Static    ----->    CheckBox_
Name    ----->    TextBoxMax_
Title    ----->    TextBoxMax_
Description    ----->    TextBox_MultiLine
ImagePath    ----->    TextBoxMax_
Ordering    ----->    TextBoxMax_
ImageState    ----->    CheckBox_
Lang    ----->    TextBoxMax_
Link    ----->    TextBoxMax_
LinkState    ----->    CheckBox_
CreatedDate    ----->    TextBoxMax_
PageMetaKeys    ----->    TextBoxMax_
IsController    ----->    CheckBox_
IsAction    ----->    CheckBox_
IsMainMenu    ----->    CheckBox_
State    ----->    CheckBox_



Navigations  ------------------>  TextBox_State <----------------

Id;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;1;True;2;True;True;True;True;
StoreId;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;2;False;3;False;True;True;True;TextBox_StoreId
ParentId;NO;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;3;False;1;False;True;True;True;TextBox_ParentId
Static;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;4;False;4;False;True;True;True;CheckBox_Static
Name;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;5;False;5;False;True;True;True;TextBox_Name
Title;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;6;False;6;False;True;True;True;TextBox_Title
Description;YES;nvarchar;1000;nvarchar(1000);textBox_MULTI;TextBox_MultiLine;BOS_;BOS_;BOS_;7;False;7;False;False;False;False;TextBox_Description
ImagePath;YES;nvarchar;255;nvarchar(255);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;8;False;8;False;False;False;False;TextBox_ImagePath
Ordering;YES;int;;int;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;9;False;9;False;False;False;False;TextBox_Ordering
ImageState;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;10;False;10;False;False;False;False;CheckBox_ImageState
Lang;YES;nvarchar;50;nvarchar(50);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;11;False;11;False;False;False;False;TextBox_Lang
Link;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;12;False;12;False;False;False;False;TextBox_Link
LinkState;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;13;False;13;False;False;False;False;CheckBox_LinkState
CreatedDate;YES;datetime;;datetime;textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;14;False;14;False;False;False;False;TextBox_CreatedDate
PageMetaKeys;YES;nvarchar;500;nvarchar(500);textBox_NORMAL;TextBoxMax_;BOS_;BOS_;BOS_;15;False;15;False;False;False;False;TextBox_PageMetaKeys
IsController;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;16;False;16;False;False;False;False;CheckBox_IsController
IsAction;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;17;False;17;False;False;False;False;CheckBox_IsAction
IsMainMenu;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;18;False;18;False;False;False;False;CheckBox_IsMainMenu
State;YES;bit;;bit;check_BOX;CheckBox_;BOS_;BOS_;BOS_;19;False;19;False;False;False;False;CheckBox_State



*************************************FINISH***********************************************
